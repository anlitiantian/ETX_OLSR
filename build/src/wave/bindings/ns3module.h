/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03050000
typedef PyAsyncMethods* cmpfunc;
#else
typedef void* cmpfunc;
#endif
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif

#if PY_VERSION_HEX >= 0x03070000 && !defined(PyEval_ThreadsInitialized)
#define PyEval_ThreadsInitialized() 1
#endif


#include "ns3/wave-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ApplicationContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ApplicationContainer;


extern PyTypeObject *_PyNs3ApplicationContainer_Type;
#define PyNs3ApplicationContainer_Type (*_PyNs3ApplicationContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3ApplicationContainer_wrapper_registry;
#define PyNs3ApplicationContainer_wrapper_registry (*_PyNs3ApplicationContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelper;


extern PyTypeObject *_PyNs3AsciiTraceHelper_Type;
#define PyNs3AsciiTraceHelper_Type (*_PyNs3AsciiTraceHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelper_wrapper_registry;
#define PyNs3AsciiTraceHelper_wrapper_registry (*_PyNs3AsciiTraceHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForDevice;


extern PyTypeObject *_PyNs3AsciiTraceHelperForDevice_Type;
#define PyNs3AsciiTraceHelperForDevice_Type (*_PyNs3AsciiTraceHelperForDevice_Type)

class PyNs3AsciiTraceHelperForDevice__PythonHelper : public ns3::AsciiTraceHelperForDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForDevice_wrapper_registry;
#define PyNs3AsciiTraceHelperForDevice_wrapper_registry (*_PyNs3AsciiTraceHelperForDevice_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForIpv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForIpv4;


extern PyTypeObject *_PyNs3AsciiTraceHelperForIpv4_Type;
#define PyNs3AsciiTraceHelperForIpv4_Type (*_PyNs3AsciiTraceHelperForIpv4_Type)

class PyNs3AsciiTraceHelperForIpv4__PythonHelper : public ns3::AsciiTraceHelperForIpv4
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForIpv4__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForIpv4_wrapper_registry;
#define PyNs3AsciiTraceHelperForIpv4_wrapper_registry (*_PyNs3AsciiTraceHelperForIpv4_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForIpv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForIpv6;


extern PyTypeObject *_PyNs3AsciiTraceHelperForIpv6_Type;
#define PyNs3AsciiTraceHelperForIpv6_Type (*_PyNs3AsciiTraceHelperForIpv6_Type)

class PyNs3AsciiTraceHelperForIpv6__PythonHelper : public ns3::AsciiTraceHelperForIpv6
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForIpv6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForIpv6_wrapper_registry;
#define PyNs3AsciiTraceHelperForIpv6_wrapper_registry (*_PyNs3AsciiTraceHelperForIpv6_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BandInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BandInfo;


extern PyTypeObject *_PyNs3BandInfo_Type;
#define PyNs3BandInfo_Type (*_PyNs3BandInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3BandInfo_wrapper_registry;
#define PyNs3BandInfo_wrapper_registry (*_PyNs3BandInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Bar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Bar;


extern PyTypeObject *_PyNs3Bar_Type;
#define PyNs3Bar_Type (*_PyNs3Bar_Type)

extern std::map<void*, PyObject*> *_PyNs3Bar_wrapper_registry;
#define PyNs3Bar_wrapper_registry (*_PyNs3Bar_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BlockAckAgreement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckAgreement;


extern PyTypeObject *_PyNs3BlockAckAgreement_Type;
#define PyNs3BlockAckAgreement_Type (*_PyNs3BlockAckAgreement_Type)

extern std::map<void*, PyObject*> *_PyNs3BlockAckAgreement_wrapper_registry;
#define PyNs3BlockAckAgreement_wrapper_registry (*_PyNs3BlockAckAgreement_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BlockAckCache *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckCache;


extern PyTypeObject *_PyNs3BlockAckCache_Type;
#define PyNs3BlockAckCache_Type (*_PyNs3BlockAckCache_Type)

extern std::map<void*, PyObject*> *_PyNs3BlockAckCache_wrapper_registry;
#define PyNs3BlockAckCache_wrapper_registry (*_PyNs3BlockAckCache_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BlockAckWindow *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckWindow;


extern PyTypeObject *_PyNs3BlockAckWindow_Type;
#define PyNs3BlockAckWindow_Type (*_PyNs3BlockAckWindow_Type)

extern std::map<void*, PyObject*> *_PyNs3BlockAckWindow_wrapper_registry;
#define PyNs3BlockAckWindow_wrapper_registry (*_PyNs3BlockAckWindow_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DataRate *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRate;


extern PyTypeObject *_PyNs3DataRate_Type;
#define PyNs3DataRate_Type (*_PyNs3DataRate_Type)

extern std::map<void*, PyObject*> *_PyNs3DataRate_wrapper_registry;
#define PyNs3DataRate_wrapper_registry (*_PyNs3DataRate_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeAccessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeAccessor;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type;
#define PyNs3DefaultDeleter__Ns3AttributeAccessor_Type (*_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeChecker > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeChecker;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeChecker_Type;
#define PyNs3DefaultDeleter__Ns3AttributeChecker_Type (*_PyNs3DefaultDeleter__Ns3AttributeChecker_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeValue_Type;
#define PyNs3DefaultDeleter__Ns3AttributeValue_Type (*_PyNs3DefaultDeleter__Ns3AttributeValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::CallbackImplBase > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3CallbackImplBase;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type;
#define PyNs3DefaultDeleter__Ns3CallbackImplBase_Type (*_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry (*_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Event > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3Event;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3Event_Type;
#define PyNs3DefaultDeleter__Ns3Event_Type (*_PyNs3DefaultDeleter__Ns3Event_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3Event_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3Event_wrapper_registry (*_PyNs3DefaultDeleter__Ns3Event_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::EventImpl > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3EventImpl;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3EventImpl_Type;
#define PyNs3DefaultDeleter__Ns3EventImpl_Type (*_PyNs3DefaultDeleter__Ns3EventImpl_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry (*_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Hash::Implementation > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3HashImplementation;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3HashImplementation_Type;
#define PyNs3DefaultDeleter__Ns3HashImplementation_Type (*_PyNs3DefaultDeleter__Ns3HashImplementation_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry (*_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::NixVector > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3NixVector;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3NixVector_Type;
#define PyNs3DefaultDeleter__Ns3NixVector_Type (*_PyNs3DefaultDeleter__Ns3NixVector_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry (*_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::OutputStreamWrapper > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3OutputStreamWrapper;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_Type;
#define PyNs3DefaultDeleter__Ns3OutputStreamWrapper_Type (*_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry (*_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Packet > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3Packet;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3Packet_Type;
#define PyNs3DefaultDeleter__Ns3Packet_Type (*_PyNs3DefaultDeleter__Ns3Packet_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3Packet_wrapper_registry (*_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::QueueItem > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3QueueItem;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3QueueItem_Type;
#define PyNs3DefaultDeleter__Ns3QueueItem_Type (*_PyNs3DefaultDeleter__Ns3QueueItem_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry (*_PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumModel > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumModel;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumModel_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumModel_Type (*_PyNs3DefaultDeleter__Ns3SpectrumModel_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::TraceSourceAccessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3TraceSourceAccessor;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type;
#define PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type (*_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry (*_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiInformationElement > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiInformationElement;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3WifiInformationElement_Type;
#define PyNs3DefaultDeleter__Ns3WifiInformationElement_Type (*_PyNs3DefaultDeleter__Ns3WifiInformationElement_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry (*_PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiMacQueueItem > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiMacQueueItem;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type;
#define PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type (*_PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry (*_PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiPpdu > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiPpdu;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3WifiPpdu_Type;
#define PyNs3DefaultDeleter__Ns3WifiPpdu_Type (*_PyNs3DefaultDeleter__Ns3WifiPpdu_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3WifiPpdu_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3WifiPpdu_wrapper_registry (*_PyNs3DefaultDeleter__Ns3WifiPpdu_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiPsdu > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiPsdu;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3WifiPsdu_Type;
#define PyNs3DefaultDeleter__Ns3WifiPsdu_Type (*_PyNs3DefaultDeleter__Ns3WifiPsdu_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3WifiPsdu_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3WifiPsdu_wrapper_registry (*_PyNs3DefaultDeleter__Ns3WifiPsdu_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject *_PyNs3Hasher_Type;
#define PyNs3Hasher_Type (*_PyNs3Hasher_Type)

extern std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;
#define PyNs3Hasher_wrapper_registry (*_PyNs3Hasher_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HeMuUserInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeMuUserInfo;


extern PyTypeObject *_PyNs3HeMuUserInfo_Type;
#define PyNs3HeMuUserInfo_Type (*_PyNs3HeMuUserInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3HeMuUserInfo_wrapper_registry;
#define PyNs3HeMuUserInfo_wrapper_registry (*_PyNs3HeMuUserInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HePreambleParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HePreambleParameters;


extern PyTypeObject *_PyNs3HePreambleParameters_Type;
#define PyNs3HePreambleParameters_Type (*_PyNs3HePreambleParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3HePreambleParameters_wrapper_registry;
#define PyNs3HePreambleParameters_wrapper_registry (*_PyNs3HePreambleParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HeRu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeRu;


extern PyTypeObject *_PyNs3HeRu_Type;
#define PyNs3HeRu_Type (*_PyNs3HeRu_Type)

extern std::map<void*, PyObject*> *_PyNs3HeRu_wrapper_registry;
#define PyNs3HeRu_wrapper_registry (*_PyNs3HeRu_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HeRu::RuSpec *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeRuRuSpec;


extern PyTypeObject *_PyNs3HeRuRuSpec_Type;
#define PyNs3HeRuRuSpec_Type (*_PyNs3HeRuRuSpec_Type)

extern std::map<void*, PyObject*> *_PyNs3HeRuRuSpec_wrapper_registry;
#define PyNs3HeRuRuSpec_wrapper_registry (*_PyNs3HeRuRuSpec_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Inet6SocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Inet6SocketAddress;


extern PyTypeObject *_PyNs3Inet6SocketAddress_Type;
#define PyNs3Inet6SocketAddress_Type (*_PyNs3Inet6SocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Inet6SocketAddress_wrapper_registry;
#define PyNs3Inet6SocketAddress_wrapper_registry (*_PyNs3Inet6SocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InetSocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InetSocketAddress;


extern PyTypeObject *_PyNs3InetSocketAddress_Type;
#define PyNs3InetSocketAddress_Type (*_PyNs3InetSocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3InetSocketAddress_wrapper_registry;
#define PyNs3InetSocketAddress_wrapper_registry (*_PyNs3InetSocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelper;


extern PyTypeObject *_PyNs3InterferenceHelper_Type;
#define PyNs3InterferenceHelper_Type (*_PyNs3InterferenceHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3InterferenceHelper_wrapper_registry;
#define PyNs3InterferenceHelper_wrapper_registry (*_PyNs3InterferenceHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper::SnrPer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelperSnrPer;


extern PyTypeObject *_PyNs3InterferenceHelperSnrPer_Type;
#define PyNs3InterferenceHelperSnrPer_Type (*_PyNs3InterferenceHelperSnrPer_Type)

extern std::map<void*, PyObject*> *_PyNs3InterferenceHelperSnrPer_wrapper_registry;
#define PyNs3InterferenceHelperSnrPer_wrapper_registry (*_PyNs3InterferenceHelperSnrPer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceAddress;


extern PyTypeObject *_PyNs3Ipv4InterfaceAddress_Type;
#define PyNs3Ipv4InterfaceAddress_Type (*_PyNs3Ipv4InterfaceAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4InterfaceAddress_wrapper_registry;
#define PyNs3Ipv4InterfaceAddress_wrapper_registry (*_PyNs3Ipv4InterfaceAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceContainer;


extern PyTypeObject *_PyNs3Ipv4InterfaceContainer_Type;
#define PyNs3Ipv4InterfaceContainer_Type (*_PyNs3Ipv4InterfaceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4InterfaceContainer_wrapper_registry;
#define PyNs3Ipv4InterfaceContainer_wrapper_registry (*_PyNs3Ipv4InterfaceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6InterfaceAddress;


extern PyTypeObject *_PyNs3Ipv6InterfaceAddress_Type;
#define PyNs3Ipv6InterfaceAddress_Type (*_PyNs3Ipv6InterfaceAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6InterfaceAddress_wrapper_registry;
#define PyNs3Ipv6InterfaceAddress_wrapper_registry (*_PyNs3Ipv6InterfaceAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6InterfaceContainer;


extern PyTypeObject *_PyNs3Ipv6InterfaceContainer_Type;
#define PyNs3Ipv6InterfaceContainer_Type (*_PyNs3Ipv6InterfaceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6InterfaceContainer_wrapper_registry;
#define PyNs3Ipv6InterfaceContainer_wrapper_registry (*_PyNs3Ipv6InterfaceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogComponent *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogComponent;


extern PyTypeObject *_PyNs3LogComponent_Type;
#define PyNs3LogComponent_Type (*_PyNs3LogComponent_Type)

extern std::map<void*, PyObject*> *_PyNs3LogComponent_wrapper_registry;
#define PyNs3LogComponent_wrapper_registry (*_PyNs3LogComponent_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject *_PyNs3Mac48Address_Type;
#define PyNs3Mac48Address_Type (*_PyNs3Mac48Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;
#define PyNs3Mac48Address_wrapper_registry (*_PyNs3Mac48Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac8Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac8Address;


extern PyTypeObject *_PyNs3Mac8Address_Type;
#define PyNs3Mac8Address_Type (*_PyNs3Mac8Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac8Address_wrapper_registry;
#define PyNs3Mac8Address_wrapper_registry (*_PyNs3Mac8Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::MacLowTransmissionParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowTransmissionParameters;


extern PyTypeObject *_PyNs3MacLowTransmissionParameters_Type;
#define PyNs3MacLowTransmissionParameters_Type (*_PyNs3MacLowTransmissionParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3MacLowTransmissionParameters_wrapper_registry;
#define PyNs3MacLowTransmissionParameters_wrapper_registry (*_PyNs3MacLowTransmissionParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::MpduInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MpduInfo;


extern PyTypeObject *_PyNs3MpduInfo_Type;
#define PyNs3MpduInfo_Type (*_PyNs3MpduInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3MpduInfo_wrapper_registry;
#define PyNs3MpduInfo_wrapper_registry (*_PyNs3MpduInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject *_PyNs3NetDeviceContainer_Type;
#define PyNs3NetDeviceContainer_Type (*_PyNs3NetDeviceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;
#define PyNs3NetDeviceContainer_wrapper_registry (*_PyNs3NetDeviceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::OriginatorBlockAckAgreement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OriginatorBlockAckAgreement;


extern PyTypeObject *_PyNs3OriginatorBlockAckAgreement_Type;
#define PyNs3OriginatorBlockAckAgreement_Type (*_PyNs3OriginatorBlockAckAgreement_Type)


typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ParameterLogger *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParameterLogger;


extern PyTypeObject *_PyNs3ParameterLogger_Type;
#define PyNs3ParameterLogger_Type (*_PyNs3ParameterLogger_Type)

extern std::map<void*, PyObject*> *_PyNs3ParameterLogger_wrapper_registry;
#define PyNs3ParameterLogger_wrapper_registry (*_PyNs3ParameterLogger_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapFile *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFile;


extern PyTypeObject *_PyNs3PcapFile_Type;
#define PyNs3PcapFile_Type (*_PyNs3PcapFile_Type)

extern std::map<void*, PyObject*> *_PyNs3PcapFile_wrapper_registry;
#define PyNs3PcapFile_wrapper_registry (*_PyNs3PcapFile_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelper;


extern PyTypeObject *_PyNs3PcapHelper_Type;
#define PyNs3PcapHelper_Type (*_PyNs3PcapHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3PcapHelper_wrapper_registry;
#define PyNs3PcapHelper_wrapper_registry (*_PyNs3PcapHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForDevice;


extern PyTypeObject *_PyNs3PcapHelperForDevice_Type;
#define PyNs3PcapHelperForDevice_Type (*_PyNs3PcapHelperForDevice_Type)

class PyNs3PcapHelperForDevice__PythonHelper : public ns3::PcapHelperForDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3PcapHelperForDevice_wrapper_registry;
#define PyNs3PcapHelperForDevice_wrapper_registry (*_PyNs3PcapHelperForDevice_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForIpv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForIpv4;


extern PyTypeObject *_PyNs3PcapHelperForIpv4_Type;
#define PyNs3PcapHelperForIpv4_Type (*_PyNs3PcapHelperForIpv4_Type)

class PyNs3PcapHelperForIpv4__PythonHelper : public ns3::PcapHelperForIpv4
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForIpv4__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3PcapHelperForIpv4_wrapper_registry;
#define PyNs3PcapHelperForIpv4_wrapper_registry (*_PyNs3PcapHelperForIpv4_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForIpv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForIpv6;


extern PyTypeObject *_PyNs3PcapHelperForIpv6_Type;
#define PyNs3PcapHelperForIpv6_Type (*_PyNs3PcapHelperForIpv6_Type)

class PyNs3PcapHelperForIpv6__PythonHelper : public ns3::PcapHelperForIpv6
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForIpv6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3PcapHelperForIpv6_wrapper_registry;
#define PyNs3PcapHelperForIpv6_wrapper_registry (*_PyNs3PcapHelperForIpv6_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::QueueSize *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSize;


extern PyTypeObject *_PyNs3QueueSize_Type;
#define PyNs3QueueSize_Type (*_PyNs3QueueSize_Type)

extern std::map<void*, PyObject*> *_PyNs3QueueSize_wrapper_registry;
#define PyNs3QueueSize_wrapper_registry (*_PyNs3QueueSize_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SignalNoiseDbm *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SignalNoiseDbm;


extern PyTypeObject *_PyNs3SignalNoiseDbm_Type;
#define PyNs3SignalNoiseDbm_Type (*_PyNs3SignalNoiseDbm_Type)

extern std::map<void*, PyObject*> *_PyNs3SignalNoiseDbm_wrapper_registry;
#define PyNs3SignalNoiseDbm_wrapper_registry (*_PyNs3SignalNoiseDbm_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TimeWithUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeWithUnit;


extern PyTypeObject *_PyNs3TimeWithUnit_Type;
#define PyNs3TimeWithUnit_Type (*_PyNs3TimeWithUnit_Type)

extern std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;
#define PyNs3TimeWithUnit_wrapper_registry (*_PyNs3TimeWithUnit_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< unsigned int > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Unsigned_int;


extern PyTypeObject *_PyNs3TracedValue__Unsigned_int_Type;
#define PyNs3TracedValue__Unsigned_int_Type (*_PyNs3TracedValue__Unsigned_int_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_int_wrapper_registry;
#define PyNs3TracedValue__Unsigned_int_wrapper_registry (*_PyNs3TracedValue__Unsigned_int_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject *_PyNs3Vector2D_Type;
#define PyNs3Vector2D_Type (*_PyNs3Vector2D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;
#define PyNs3Vector2D_wrapper_registry (*_PyNs3Vector2D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject *_PyNs3Vector3D_Type;
#define PyNs3Vector3D_Type (*_PyNs3Vector3D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;
#define PyNs3Vector3D_wrapper_registry (*_PyNs3Vector3D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiHelper;


extern PyTypeObject *_PyNs3WifiHelper_Type;
#define PyNs3WifiHelper_Type (*_PyNs3WifiHelper_Type)

class PyNs3WifiHelper__PythonHelper : public ns3::WifiHelper
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3WifiHelper_wrapper_registry;
#define PyNs3WifiHelper_wrapper_registry (*_PyNs3WifiHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacHelper;


extern PyTypeObject *_PyNs3WifiMacHelper_Type;
#define PyNs3WifiMacHelper_Type (*_PyNs3WifiMacHelper_Type)

class PyNs3WifiMacHelper__PythonHelper : public ns3::WifiMacHelper
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3WifiMacHelper_wrapper_registry;
#define PyNs3WifiMacHelper_wrapper_registry (*_PyNs3WifiMacHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiMode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMode;


extern PyTypeObject *_PyNs3WifiMode_Type;
#define PyNs3WifiMode_Type (*_PyNs3WifiMode_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiMode_wrapper_registry;
#define PyNs3WifiMode_wrapper_registry (*_PyNs3WifiMode_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiModeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeFactory;


extern PyTypeObject *_PyNs3WifiModeFactory_Type;
#define PyNs3WifiModeFactory_Type (*_PyNs3WifiModeFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiModeFactory_wrapper_registry;
#define PyNs3WifiModeFactory_wrapper_registry (*_PyNs3WifiModeFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyHelper;


extern PyTypeObject *_PyNs3WifiPhyHelper_Type;
#define PyNs3WifiPhyHelper_Type (*_PyNs3WifiPhyHelper_Type)

class PyNs3WifiPhyHelper__PythonHelper : public ns3::WifiPhyHelper
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStation;


extern PyTypeObject *_PyNs3WifiRemoteStation_Type;
#define PyNs3WifiRemoteStation_Type (*_PyNs3WifiRemoteStation_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiRemoteStation_wrapper_registry;
#define PyNs3WifiRemoteStation_wrapper_registry (*_PyNs3WifiRemoteStation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationInfo;


extern PyTypeObject *_PyNs3WifiRemoteStationInfo_Type;
#define PyNs3WifiRemoteStationInfo_Type (*_PyNs3WifiRemoteStationInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiRemoteStationInfo_wrapper_registry;
#define PyNs3WifiRemoteStationInfo_wrapper_registry (*_PyNs3WifiRemoteStationInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationState *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationState;


extern PyTypeObject *_PyNs3WifiRemoteStationState_Type;
#define PyNs3WifiRemoteStationState_Type (*_PyNs3WifiRemoteStationState_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiRemoteStationState_wrapper_registry;
#define PyNs3WifiRemoteStationState_wrapper_registry (*_PyNs3WifiRemoteStationState_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumValue5MhzFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumValue5MhzFactory;


extern PyTypeObject *_PyNs3WifiSpectrumValue5MhzFactory_Type;
#define PyNs3WifiSpectrumValue5MhzFactory_Type (*_PyNs3WifiSpectrumValue5MhzFactory_Type)

class PyNs3WifiSpectrumValue5MhzFactory__PythonHelper : public ns3::WifiSpectrumValue5MhzFactory
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiSpectrumValue5MhzFactory__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry;
#define PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry (*_PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumValueHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumValueHelper;


extern PyTypeObject *_PyNs3WifiSpectrumValueHelper_Type;
#define PyNs3WifiSpectrumValueHelper_Type (*_PyNs3WifiSpectrumValueHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiSpectrumValueHelper_wrapper_registry;
#define PyNs3WifiSpectrumValueHelper_wrapper_registry (*_PyNs3WifiSpectrumValueHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiStandardInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiStandardInfo;


extern PyTypeObject *_PyNs3WifiStandardInfo_Type;
#define PyNs3WifiStandardInfo_Type (*_PyNs3WifiStandardInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiStandardInfo_wrapper_registry;
#define PyNs3WifiStandardInfo_wrapper_registry (*_PyNs3WifiStandardInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiTxVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiTxVector;


extern PyTypeObject *_PyNs3WifiTxVector_Type;
#define PyNs3WifiTxVector_Type (*_PyNs3WifiTxVector_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiTxVector_wrapper_registry;
#define PyNs3WifiTxVector_wrapper_registry (*_PyNs3WifiTxVector_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::YansWifiChannelHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiChannelHelper;


extern PyTypeObject *_PyNs3YansWifiChannelHelper_Type;
#define PyNs3YansWifiChannelHelper_Type (*_PyNs3YansWifiChannelHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3YansWifiChannelHelper_wrapper_registry;
#define PyNs3YansWifiChannelHelper_wrapper_registry (*_PyNs3YansWifiChannelHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::YansWifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiPhyHelper;


extern PyTypeObject *_PyNs3YansWifiPhyHelper_Type;
#define PyNs3YansWifiPhyHelper_Type (*_PyNs3YansWifiPhyHelper_Type)

class PyNs3YansWifiPhyHelper__PythonHelper : public ns3::YansWifiPhyHelper
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::HtSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HtSigHeader;


extern PyTypeObject *_PyNs3HtSigHeader_Type;
#define PyNs3HtSigHeader_Type (*_PyNs3HtSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::InternetStackHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3InternetStackHelper;


extern PyTypeObject *_PyNs3InternetStackHelper_Type;
#define PyNs3InternetStackHelper_Type (*_PyNs3InternetStackHelper_Type)

class PyNs3InternetStackHelper__PythonHelper : public ns3::InternetStackHelper
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3InternetStackHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Header;


extern PyTypeObject *_PyNs3Ipv4Header_Type;
#define PyNs3Ipv4Header_Type (*_PyNs3Ipv4Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Header;


extern PyTypeObject *_PyNs3Ipv6Header_Type;
#define PyNs3Ipv6Header_Type (*_PyNs3Ipv6Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::LSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LSigHeader;


extern PyTypeObject *_PyNs3LSigHeader_Type;
#define PyNs3LSigHeader_Type (*_PyNs3LSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapFileWrapper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFileWrapper;


extern PyTypeObject *_PyNs3PcapFileWrapper_Type;
#define PyNs3PcapFileWrapper_Type (*_PyNs3PcapFileWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueBase;


extern PyTypeObject *_PyNs3QueueBase_Type;
#define PyNs3QueueBase_Type (*_PyNs3QueueBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStream *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStream;


extern PyTypeObject *_PyNs3RandomVariableStream_Type;
#define PyNs3RandomVariableStream_Type (*_PyNs3RandomVariableStream_Type)

class PyNs3RandomVariableStream__PythonHelper : public ns3::RandomVariableStream
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomVariableStream__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SequentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialRandomVariable;


extern PyTypeObject *_PyNs3SequentialRandomVariable_Type;
#define PyNs3SequentialRandomVariable_Type (*_PyNs3SequentialRandomVariable_Type)

class PyNs3SequentialRandomVariable__PythonHelper : public ns3::SequentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SequentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type;
#define PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type (*_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type;
#define PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type (*_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type;
#define PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type (*_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type;
#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type;
#define PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type (*_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiMacQueueItem, ns3::empty, ns3::DefaultDeleter<ns3::WifiMacQueueItem> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type;
#define PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type (*_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiPpdu, ns3::empty, ns3::DefaultDeleter<ns3::WifiPpdu> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt___Type;
#define PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt___Type (*_PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiPsdu, ns3::empty, ns3::DefaultDeleter<ns3::WifiPsdu> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt___Type;
#define PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt___Type (*_PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Socket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Socket;


extern PyTypeObject *_PyNs3Socket_Type;
#define PyNs3Socket_Type (*_PyNs3Socket_Type)

class PyNs3Socket__PythonHelper : public ns3::Socket
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Socket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTosTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTosTag;


extern PyTypeObject *_PyNs3SocketIpTosTag_Type;
#define PyNs3SocketIpTosTag_Type (*_PyNs3SocketIpTosTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTtlTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTtlTag;


extern PyTypeObject *_PyNs3SocketIpTtlTag_Type;
#define PyNs3SocketIpTtlTag_Type (*_PyNs3SocketIpTtlTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6HopLimitTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6HopLimitTag;


extern PyTypeObject *_PyNs3SocketIpv6HopLimitTag_Type;
#define PyNs3SocketIpv6HopLimitTag_Type (*_PyNs3SocketIpv6HopLimitTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6TclassTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6TclassTag;


extern PyTypeObject *_PyNs3SocketIpv6TclassTag_Type;
#define PyNs3SocketIpv6TclassTag_Type (*_PyNs3SocketIpv6TclassTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketPriorityTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketPriorityTag;


extern PyTypeObject *_PyNs3SocketPriorityTag_Type;
#define PyNs3SocketPriorityTag_Type (*_PyNs3SocketPriorityTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketSetDontFragmentTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketSetDontFragmentTag;


extern PyTypeObject *_PyNs3SocketSetDontFragmentTag_Type;
#define PyNs3SocketSetDontFragmentTag_Type (*_PyNs3SocketSetDontFragmentTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumModel;


extern PyTypeObject *_PyNs3SpectrumModel_Type;
#define PyNs3SpectrumModel_Type (*_PyNs3SpectrumModel_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumValue;


extern PyTypeObject *_PyNs3SpectrumValue_Type;
#define PyNs3SpectrumValue_Type (*_PyNs3SpectrumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::TriangularRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularRandomVariable;


extern PyTypeObject *_PyNs3TriangularRandomVariable_Type;
#define PyNs3TriangularRandomVariable_Type (*_PyNs3TriangularRandomVariable_Type)

class PyNs3TriangularRandomVariable__PythonHelper : public ns3::TriangularRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TriangularRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Txop *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Txop;


extern PyTypeObject *_PyNs3Txop_Type;
#define PyNs3Txop_Type (*_PyNs3Txop_Type)

class PyNs3Txop__PythonHelper : public ns3::Txop
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Txop__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UniformRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformRandomVariable;


extern PyTypeObject *_PyNs3UniformRandomVariable_Type;
#define PyNs3UniformRandomVariable_Type (*_PyNs3UniformRandomVariable_Type)

class PyNs3UniformRandomVariable__PythonHelper : public ns3::UniformRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::VhtSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VhtSigHeader;


extern PyTypeObject *_PyNs3VhtSigHeader_Type;
#define PyNs3VhtSigHeader_Type (*_PyNs3VhtSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::WeibullRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullRandomVariable;


extern PyTypeObject *_PyNs3WeibullRandomVariable_Type;
#define PyNs3WeibullRandomVariable_Type (*_PyNs3WeibullRandomVariable_Type)

class PyNs3WeibullRandomVariable__PythonHelper : public ns3::WeibullRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WeibullRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WifiInformationElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiInformationElement;


extern PyTypeObject *_PyNs3WifiInformationElement_Type;
#define PyNs3WifiInformationElement_Type (*_PyNs3WifiInformationElement_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMac;


extern PyTypeObject *_PyNs3WifiMac_Type;
#define PyNs3WifiMac_Type (*_PyNs3WifiMac_Type)

class PyNs3WifiMac__PythonHelper : public ns3::WifiMac
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WifiMacHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacHeader;


extern PyTypeObject *_PyNs3WifiMacHeader_Type;
#define PyNs3WifiMacHeader_Type (*_PyNs3WifiMacHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiMacQueueItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacQueueItem;


extern PyTypeObject *_PyNs3WifiMacQueueItem_Type;
#define PyNs3WifiMacQueueItem_Type (*_PyNs3WifiMacQueueItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhy;


extern PyTypeObject *_PyNs3WifiPhy_Type;
#define PyNs3WifiPhy_Type (*_PyNs3WifiPhy_Type)

class PyNs3WifiPhy__PythonHelper : public ns3::WifiPhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WifiPhyStateHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyStateHelper;


extern PyTypeObject *_PyNs3WifiPhyStateHelper_Type;
#define PyNs3WifiPhyStateHelper_Type (*_PyNs3WifiPhyStateHelper_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiPpdu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPpdu;


extern PyTypeObject *_PyNs3WifiPpdu_Type;
#define PyNs3WifiPpdu_Type (*_PyNs3WifiPpdu_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiPsdu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPsdu;


extern PyTypeObject *_PyNs3WifiPsdu_Type;
#define PyNs3WifiPsdu_Type (*_PyNs3WifiPsdu_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationManager;


extern PyTypeObject *_PyNs3WifiRemoteStationManager_Type;
#define PyNs3WifiRemoteStationManager_Type (*_PyNs3WifiRemoteStationManager_Type)


typedef struct {
    PyObject_HEAD
    ns3::ZetaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaRandomVariable;


extern PyTypeObject *_PyNs3ZetaRandomVariable_Type;
#define PyNs3ZetaRandomVariable_Type (*_PyNs3ZetaRandomVariable_Type)

class PyNs3ZetaRandomVariable__PythonHelper : public ns3::ZetaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZetaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZipfRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfRandomVariable;


extern PyTypeObject *_PyNs3ZipfRandomVariable_Type;
#define PyNs3ZipfRandomVariable_Type (*_PyNs3ZipfRandomVariable_Type)

class PyNs3ZipfRandomVariable__PythonHelper : public ns3::ZipfRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZipfRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AmsduSubframeHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmsduSubframeHeader;


extern PyTypeObject *_PyNs3AmsduSubframeHeader_Type;
#define PyNs3AmsduSubframeHeader_Type (*_PyNs3AmsduSubframeHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::Application *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Application;


extern PyTypeObject *_PyNs3Application_Type;
#define PyNs3Application_Type (*_PyNs3Application_Type)

class PyNs3Application__PythonHelper : public ns3::Application
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Application__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BlockAckManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckManager;


extern PyTypeObject *_PyNs3BlockAckManager_Type;
#define PyNs3BlockAckManager_Type (*_PyNs3BlockAckManager_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject *_PyNs3BooleanChecker_Type;
#define PyNs3BooleanChecker_Type (*_PyNs3BooleanChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject *_PyNs3BooleanValue_Type;
#define PyNs3BooleanValue_Type (*_PyNs3BooleanValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject *_PyNs3Channel_Type;
#define PyNs3Channel_Type (*_PyNs3Channel_Type)

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ChannelAccessManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelAccessManager;


extern PyTypeObject *_PyNs3ChannelAccessManager_Type;
#define PyNs3ChannelAccessManager_Type (*_PyNs3ChannelAccessManager_Type)

class PyNs3ChannelAccessManager__PythonHelper : public ns3::ChannelAccessManager
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ChannelAccessManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRandomVariable;


extern PyTypeObject *_PyNs3ConstantRandomVariable_Type;
#define PyNs3ConstantRandomVariable_Type (*_PyNs3ConstantRandomVariable_Type)

class PyNs3ConstantRandomVariable__PythonHelper : public ns3::ConstantRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataRateChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateChecker;


extern PyTypeObject *_PyNs3DataRateChecker_Type;
#define PyNs3DataRateChecker_Type (*_PyNs3DataRateChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataRateValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateValue;


extern PyTypeObject *_PyNs3DataRateValue_Type;
#define PyNs3DataRateValue_Type (*_PyNs3DataRateValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DeterministicRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicRandomVariable;


extern PyTypeObject *_PyNs3DeterministicRandomVariable_Type;
#define PyNs3DeterministicRandomVariable_Type (*_PyNs3DeterministicRandomVariable_Type)

class PyNs3DeterministicRandomVariable__PythonHelper : public ns3::DeterministicRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeterministicRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject *_PyNs3DoubleValue_Type;
#define PyNs3DoubleValue_Type (*_PyNs3DoubleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DsssSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsssSigHeader;


extern PyTypeObject *_PyNs3DsssSigHeader_Type;
#define PyNs3DsssSigHeader_Type (*_PyNs3DsssSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalRandomVariable;


extern PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;
#define PyNs3EmpiricalRandomVariable_Type (*_PyNs3EmpiricalRandomVariable_Type)

class PyNs3EmpiricalRandomVariable__PythonHelper : public ns3::EmpiricalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmpiricalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeAccessor;


extern PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;
#define PyNs3EmptyAttributeAccessor_Type (*_PyNs3EmptyAttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeChecker;


extern PyTypeObject *_PyNs3EmptyAttributeChecker_Type;
#define PyNs3EmptyAttributeChecker_Type (*_PyNs3EmptyAttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject *_PyNs3EnumChecker_Type;
#define PyNs3EnumChecker_Type (*_PyNs3EnumChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject *_PyNs3EnumValue_Type;
#define PyNs3EnumValue_Type (*_PyNs3EnumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ErlangRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangRandomVariable;


extern PyTypeObject *_PyNs3ErlangRandomVariable_Type;
#define PyNs3ErlangRandomVariable_Type (*_PyNs3ErlangRandomVariable_Type)

class PyNs3ErlangRandomVariable__PythonHelper : public ns3::ErlangRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErlangRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErrorModel;


extern PyTypeObject *_PyNs3ErrorModel_Type;
#define PyNs3ErrorModel_Type (*_PyNs3ErrorModel_Type)

class PyNs3ErrorModel__PythonHelper : public ns3::ErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Event *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Event;


extern PyTypeObject *_PyNs3Event_Type;
#define PyNs3Event_Type (*_PyNs3Event_Type)


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialRandomVariable;


extern PyTypeObject *_PyNs3ExponentialRandomVariable_Type;
#define PyNs3ExponentialRandomVariable_Type (*_PyNs3ExponentialRandomVariable_Type)

class PyNs3ExponentialRandomVariable__PythonHelper : public ns3::ExponentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ExponentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::GammaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaRandomVariable;


extern PyTypeObject *_PyNs3GammaRandomVariable_Type;
#define PyNs3GammaRandomVariable_Type (*_PyNs3GammaRandomVariable_Type)

class PyNs3GammaRandomVariable__PythonHelper : public ns3::GammaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GammaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::HeCapabilities *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeCapabilities;


extern PyTypeObject *_PyNs3HeCapabilities_Type;
#define PyNs3HeCapabilities_Type (*_PyNs3HeCapabilities_Type)


typedef struct {
    PyObject_HEAD
    ns3::HeSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeSigHeader;


extern PyTypeObject *_PyNs3HeSigHeader_Type;
#define PyNs3HeSigHeader_Type (*_PyNs3HeSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::HtCapabilities *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HtCapabilities;


extern PyTypeObject *_PyNs3HtCapabilities_Type;
#define PyNs3HtCapabilities_Type (*_PyNs3HtCapabilities_Type)


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject *_PyNs3IntegerValue_Type;
#define PyNs3IntegerValue_Type (*_PyNs3IntegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4;


extern PyTypeObject *_PyNs3Ipv4_Type;
#define PyNs3Ipv4_Type (*_PyNs3Ipv4_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4L3Protocol;


extern PyTypeObject *_PyNs3Ipv4L3Protocol_Type;
#define PyNs3Ipv4L3Protocol_Type (*_PyNs3Ipv4L3Protocol_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MulticastRoute *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MulticastRoute;


extern PyTypeObject *_PyNs3Ipv4MulticastRoute_Type;
#define PyNs3Ipv4MulticastRoute_Type (*_PyNs3Ipv4MulticastRoute_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Route *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Route;


extern PyTypeObject *_PyNs3Ipv4Route_Type;
#define PyNs3Ipv4Route_Type (*_PyNs3Ipv4Route_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingProtocol;


extern PyTypeObject *_PyNs3Ipv4RoutingProtocol_Type;
#define PyNs3Ipv4RoutingProtocol_Type (*_PyNs3Ipv4RoutingProtocol_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6;


extern PyTypeObject *_PyNs3Ipv6_Type;
#define PyNs3Ipv6_Type (*_PyNs3Ipv6_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6L3Protocol;


extern PyTypeObject *_PyNs3Ipv6L3Protocol_Type;
#define PyNs3Ipv6L3Protocol_Type (*_PyNs3Ipv6L3Protocol_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PmtuCache *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PmtuCache;


extern PyTypeObject *_PyNs3Ipv6PmtuCache_Type;
#define PyNs3Ipv6PmtuCache_Type (*_PyNs3Ipv6PmtuCache_Type)

class PyNs3Ipv6PmtuCache__PythonHelper : public ns3::Ipv6PmtuCache
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6PmtuCache__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ListErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ListErrorModel;


extern PyTypeObject *_PyNs3ListErrorModel_Type;
#define PyNs3ListErrorModel_Type (*_PyNs3ListErrorModel_Type)

class PyNs3ListErrorModel__PythonHelper : public ns3::ListErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ListErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LogNormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalRandomVariable;


extern PyTypeObject *_PyNs3LogNormalRandomVariable_Type;
#define PyNs3LogNormalRandomVariable_Type (*_PyNs3LogNormalRandomVariable_Type)

class PyNs3LogNormalRandomVariable__PythonHelper : public ns3::LogNormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogNormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject *_PyNs3Mac48AddressChecker_Type;
#define PyNs3Mac48AddressChecker_Type (*_PyNs3Mac48AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject *_PyNs3Mac48AddressValue_Type;
#define PyNs3Mac48AddressValue_Type (*_PyNs3Mac48AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::MacLow *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLow;


extern PyTypeObject *_PyNs3MacLow_Type;
#define PyNs3MacLow_Type (*_PyNs3MacLow_Type)

class PyNs3MacLow__PythonHelper : public ns3::MacLow
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLow__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::MobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityModel;


extern PyTypeObject *_PyNs3MobilityModel_Type;
#define PyNs3MobilityModel_Type (*_PyNs3MobilityModel_Type)

class PyNs3MobilityModel__PythonHelper : public ns3::MobilityModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::MpduAggregator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MpduAggregator;


extern PyTypeObject *_PyNs3MpduAggregator_Type;
#define PyNs3MpduAggregator_Type (*_PyNs3MpduAggregator_Type)


typedef struct {
    PyObject_HEAD
    ns3::MsduAggregator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MsduAggregator;


extern PyTypeObject *_PyNs3MsduAggregator_Type;
#define PyNs3MsduAggregator_Type (*_PyNs3MsduAggregator_Type)


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)

class PyNs3NetDevice__PythonHelper : public ns3::NetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalRandomVariable;


extern PyTypeObject *_PyNs3NormalRandomVariable_Type;
#define PyNs3NormalRandomVariable_Type (*_PyNs3NormalRandomVariable_Type)

class PyNs3NormalRandomVariable__PythonHelper : public ns3::NormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::OutputStreamWrapper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OutputStreamWrapper;


extern PyTypeObject *_PyNs3OutputStreamWrapper_Type;
#define PyNs3OutputStreamWrapper_Type (*_PyNs3OutputStreamWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::ParetoRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoRandomVariable;


extern PyTypeObject *_PyNs3ParetoRandomVariable_Type;
#define PyNs3ParetoRandomVariable_Type (*_PyNs3ParetoRandomVariable_Type)

class PyNs3ParetoRandomVariable__PythonHelper : public ns3::ParetoRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ParetoRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PointerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerChecker;


extern PyTypeObject *_PyNs3PointerChecker_Type;
#define PyNs3PointerChecker_Type (*_PyNs3PointerChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::PointerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerValue;


extern PyTypeObject *_PyNs3PointerValue_Type;
#define PyNs3PointerValue_Type (*_PyNs3PointerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::QosTxop *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QosTxop;


extern PyTypeObject *_PyNs3QosTxop_Type;
#define PyNs3QosTxop_Type (*_PyNs3QosTxop_Type)

class PyNs3QosTxop__PythonHelper : public ns3::QosTxop
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QosTxop__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Queue< ns3::Packet > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Queue__Ns3Packet;


extern PyTypeObject *_PyNs3Queue__Ns3Packet_Type;
#define PyNs3Queue__Ns3Packet_Type (*_PyNs3Queue__Ns3Packet_Type)

class PyNs3Queue__Ns3Packet__PythonHelper : public ns3::Queue< ns3::Packet >
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Queue__Ns3Packet__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Queue< ns3::QueueDiscItem > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Queue__Ns3QueueDiscItem;


extern PyTypeObject *_PyNs3Queue__Ns3QueueDiscItem_Type;
#define PyNs3Queue__Ns3QueueDiscItem_Type (*_PyNs3Queue__Ns3QueueDiscItem_Type)

class PyNs3Queue__Ns3QueueDiscItem__PythonHelper : public ns3::Queue< ns3::QueueDiscItem >
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Queue__Ns3QueueDiscItem__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Queue< ns3::WifiMacQueueItem > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Queue__Ns3WifiMacQueueItem;


extern PyTypeObject *_PyNs3Queue__Ns3WifiMacQueueItem_Type;
#define PyNs3Queue__Ns3WifiMacQueueItem_Type (*_PyNs3Queue__Ns3WifiMacQueueItem_Type)

class PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper : public ns3::Queue< ns3::WifiMacQueueItem >
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueItem;


extern PyTypeObject *_PyNs3QueueItem_Type;
#define PyNs3QueueItem_Type (*_PyNs3QueueItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueSizeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSizeChecker;


extern PyTypeObject *_PyNs3QueueSizeChecker_Type;
#define PyNs3QueueSizeChecker_Type (*_PyNs3QueueSizeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueSizeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSizeValue;


extern PyTypeObject *_PyNs3QueueSizeValue_Type;
#define PyNs3QueueSizeValue_Type (*_PyNs3QueueSizeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::RateErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RateErrorModel;


extern PyTypeObject *_PyNs3RateErrorModel_Type;
#define PyNs3RateErrorModel_Type (*_PyNs3RateErrorModel_Type)

class PyNs3RateErrorModel__PythonHelper : public ns3::RateErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RateErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ReceiveListErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ReceiveListErrorModel;


extern PyTypeObject *_PyNs3ReceiveListErrorModel_Type;
#define PyNs3ReceiveListErrorModel_Type (*_PyNs3ReceiveListErrorModel_Type)

class PyNs3ReceiveListErrorModel__PythonHelper : public ns3::ReceiveListErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ReceiveListErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RegularWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RegularWifiMac;


extern PyTypeObject *_PyNs3RegularWifiMac_Type;
#define PyNs3RegularWifiMac_Type (*_PyNs3RegularWifiMac_Type)

class PyNs3RegularWifiMac__PythonHelper : public ns3::RegularWifiMac
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RegularWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Ssid *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ssid;


extern PyTypeObject *_PyNs3Ssid_Type;
#define PyNs3Ssid_Type (*_PyNs3Ssid_Type)


typedef struct {
    PyObject_HEAD
    ns3::SsidChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsidChecker;


extern PyTypeObject *_PyNs3SsidChecker_Type;
#define PyNs3SsidChecker_Type (*_PyNs3SsidChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::SsidValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsidValue;


extern PyTypeObject *_PyNs3SsidValue_Type;
#define PyNs3SsidValue_Type (*_PyNs3SsidValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject *_PyNs3Vector2DChecker_Type;
#define PyNs3Vector2DChecker_Type (*_PyNs3Vector2DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject *_PyNs3Vector2DValue_Type;
#define PyNs3Vector2DValue_Type (*_PyNs3Vector2DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject *_PyNs3Vector3DChecker_Type;
#define PyNs3Vector3DChecker_Type (*_PyNs3Vector3DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject *_PyNs3Vector3DValue_Type;
#define PyNs3Vector3DValue_Type (*_PyNs3Vector3DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::VhtCapabilities *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VhtCapabilities;


extern PyTypeObject *_PyNs3VhtCapabilities_Type;
#define PyNs3VhtCapabilities_Type (*_PyNs3VhtCapabilities_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiMacQueue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacQueue;


extern PyTypeObject *_PyNs3WifiMacQueue_Type;
#define PyNs3WifiMacQueue_Type (*_PyNs3WifiMacQueue_Type)

class PyNs3WifiMacQueue__PythonHelper : public ns3::WifiMacQueue
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiMacQueue__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WifiModeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeChecker;


extern PyTypeObject *_PyNs3WifiModeChecker_Type;
#define PyNs3WifiModeChecker_Type (*_PyNs3WifiModeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiModeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeValue;


extern PyTypeObject *_PyNs3WifiModeValue_Type;
#define PyNs3WifiModeValue_Type (*_PyNs3WifiModeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiNetDevice;


extern PyTypeObject *_PyNs3WifiNetDevice_Type;
#define PyNs3WifiNetDevice_Type (*_PyNs3WifiNetDevice_Type)

class PyNs3WifiNetDevice__PythonHelper : public ns3::WifiNetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::YansWifiChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiChannel;


extern PyTypeObject *_PyNs3YansWifiChannel_Type;
#define PyNs3YansWifiChannel_Type (*_PyNs3YansWifiChannel_Type)

class PyNs3YansWifiChannel__PythonHelper : public ns3::YansWifiChannel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BinaryErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BinaryErrorModel;


extern PyTypeObject *_PyNs3BinaryErrorModel_Type;
#define PyNs3BinaryErrorModel_Type (*_PyNs3BinaryErrorModel_Type)

class PyNs3BinaryErrorModel__PythonHelper : public ns3::BinaryErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BinaryErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::BurstErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BurstErrorModel;


extern PyTypeObject *_PyNs3BurstErrorModel_Type;
#define PyNs3BurstErrorModel_Type (*_PyNs3BurstErrorModel_Type)

class PyNs3BurstErrorModel__PythonHelper : public ns3::BurstErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BurstErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< bool, ns3::Ptr<const ns3::Packet>, const ns3::Address &, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Bool_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Bool_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< bool, ns3::Ptr<ns3::WifiMac>, const ns3::OrganizationIdentifier &, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3WifiMac__gt___Const_ns3OrganizationIdentifier___amp___Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3WifiMac__gt___Const_ns3OrganizationIdentifier___amp___Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3WifiMac__gt___Const_ns3OrganizationIdentifier___amp___Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3WifiMac__gt___Const_ns3OrganizationIdentifier___amp___Ns3Ptr__lt__const_ns3Packet__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv6L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3Ipv6Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Address, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Address_Ns3Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Address_Ns3Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Address_Ns3Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Address_Ns3Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::HePreambleParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv6__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiPhyRxfailureReason, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, std::map<std::pair<unsigned int, unsigned int>, double, std::less<std::pair<unsigned int, unsigned int> >, std::allocator<std::pair<const std::pair<unsigned int, unsigned int>, double> > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, unsigned short, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::QueueDiscItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::WifiPsdu>, double, ns3::WifiTxVector, std::vector<bool, std::allocator<bool> >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::WifiPsdu>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::Mac48Address, unsigned char, ns3::OriginatorBlockAckAgreement::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Mac48Address_Unsigned_char_Ns3OriginatorBlockAckAgreementState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Mac48Address_Unsigned_char_Ns3OriginatorBlockAckAgreementState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Time_Ns3Mac48Address_Unsigned_char_Ns3OriginatorBlockAckAgreementState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Time_Ns3Mac48Address_Unsigned_char_Ns3OriginatorBlockAckAgreementState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::Time, WifiPhyState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::WifiTxVector, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, std::unordered_map<unsigned short, ns3::Ptr<const ns3::WifiPsdu>, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Ptr<const ns3::WifiPsdu> > > >, ns3::WifiTxVector, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueDiscItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDiscItem;


extern PyTypeObject *_PyNs3QueueDiscItem_Type;
#define PyNs3QueueDiscItem_Type (*_PyNs3QueueDiscItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::ChannelCoordinationListener > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3ChannelCoordinationListener;


extern PyTypeObject PyNs3DefaultDeleter__Ns3ChannelCoordinationListener_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3ChannelCoordinationListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EdcaParameter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EdcaParameter;


extern PyTypeObject PyNs3EdcaParameter_Type;

extern std::map<void*, PyObject*> PyNs3EdcaParameter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OrganizationIdentifier *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OrganizationIdentifier;


extern PyTypeObject PyNs3OrganizationIdentifier_Type;

extern std::map<void*, PyObject*> PyNs3OrganizationIdentifier_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SchInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SchInfo;


extern PyTypeObject PyNs3SchInfo_Type;

extern std::map<void*, PyObject*> PyNs3SchInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TxInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TxInfo;


extern PyTypeObject PyNs3TxInfo_Type;

extern std::map<void*, PyObject*> PyNs3TxInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TxProfile *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TxProfile;


extern PyTypeObject PyNs3TxProfile_Type;

extern std::map<void*, PyObject*> PyNs3TxProfile_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::VendorSpecificContentManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VendorSpecificContentManager;


extern PyTypeObject PyNs3VendorSpecificContentManager_Type;

extern std::map<void*, PyObject*> PyNs3VendorSpecificContentManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::VsaInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VsaInfo;


extern PyTypeObject PyNs3VsaInfo_Type;

extern std::map<void*, PyObject*> PyNs3VsaInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WaveBsmHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaveBsmHelper;


extern PyTypeObject PyNs3WaveBsmHelper_Type;

extern std::map<void*, PyObject*> PyNs3WaveBsmHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WaveHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaveHelper;


extern PyTypeObject PyNs3WaveHelper_Type;

class PyNs3WaveHelper__PythonHelper : public ns3::WaveHelper
{
public:
    PyObject *m_pyself;
    PyNs3WaveHelper__PythonHelper(ns3::WaveHelper const & arg0)
        : ns3::WaveHelper(arg0), m_pyself(NULL)
        {}

    PyNs3WaveHelper__PythonHelper()
        : ns3::WaveHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WaveHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> PyNs3WaveHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HigherLayerTxVectorTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HigherLayerTxVectorTag;


extern PyTypeObject PyNs3HigherLayerTxVectorTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::NqosWaveMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NqosWaveMacHelper;


extern PyTypeObject PyNs3NqosWaveMacHelper_Type;

class PyNs3NqosWaveMacHelper__PythonHelper : public ns3::NqosWaveMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3NqosWaveMacHelper__PythonHelper(ns3::NqosWaveMacHelper const & arg0)
        : ns3::NqosWaveMacHelper(arg0), m_pyself(NULL)
        {}

    PyNs3NqosWaveMacHelper__PythonHelper()
        : ns3::NqosWaveMacHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NqosWaveMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create(ns3::Ptr< ns3::NetDevice > device) const;
};


typedef struct {
    PyObject_HEAD
    ns3::QosWaveMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QosWaveMacHelper;


extern PyTypeObject PyNs3QosWaveMacHelper_Type;

class PyNs3QosWaveMacHelper__PythonHelper : public ns3::QosWaveMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3QosWaveMacHelper__PythonHelper(ns3::QosWaveMacHelper const & arg0)
        : ns3::QosWaveMacHelper(arg0), m_pyself(NULL)
        {}

    PyNs3QosWaveMacHelper__PythonHelper()
        : ns3::QosWaveMacHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QosWaveMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create(ns3::Ptr< ns3::NetDevice > device) const;
};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ChannelCoordinationListener, ns3::empty, ns3::DefaultDeleter<ns3::ChannelCoordinationListener> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3ChannelCoordinationListener_Ns3Empty_Ns3DefaultDeleter__lt__ns3ChannelCoordinationListener__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3ChannelCoordinationListener_Ns3Empty_Ns3DefaultDeleter__lt__ns3ChannelCoordinationListener__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3ChannelCoordinationListener_Ns3Empty_Ns3DefaultDeleter__lt__ns3ChannelCoordinationListener__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::VendorSpecificActionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VendorSpecificActionHeader;


extern PyTypeObject PyNs3VendorSpecificActionHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::VsaManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VsaManager;


extern PyTypeObject PyNs3VsaManager_Type;

class PyNs3VsaManager__PythonHelper : public ns3::VsaManager
{
public:
    PyObject *m_pyself;
    PyNs3VsaManager__PythonHelper(ns3::VsaManager const & arg0)
        : ns3::VsaManager(arg0), m_pyself(NULL)
        {}

    PyNs3VsaManager__PythonHelper()
        : ns3::VsaManager(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3VsaManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNewAggregate(PyNs3VsaManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3VsaManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3VsaManager__PythonHelper")
        .SetParent< ns3::VsaManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3VsaManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WaveBsmStats *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaveBsmStats;


extern PyTypeObject PyNs3WaveBsmStats_Type;


typedef struct {
    PyObject_HEAD
    ns3::Wifi80211pHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Wifi80211pHelper;


extern PyTypeObject PyNs3Wifi80211pHelper_Type;

class PyNs3Wifi80211pHelper__PythonHelper : public ns3::Wifi80211pHelper
{
public:
    PyObject *m_pyself;
    PyNs3Wifi80211pHelper__PythonHelper(ns3::Wifi80211pHelper const & arg0)
        : ns3::Wifi80211pHelper(arg0), m_pyself(NULL)
        {}

    PyNs3Wifi80211pHelper__PythonHelper()
        : ns3::Wifi80211pHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Wifi80211pHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void SetStandard(ns3::WifiStandard standard);

    virtual void SetStandard(ns3::WifiPhyStandard standard);
};


typedef struct {
    PyObject_HEAD
    ns3::YansWavePhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWavePhyHelper;


extern PyTypeObject PyNs3YansWavePhyHelper_Type;

class PyNs3YansWavePhyHelper__PythonHelper : public ns3::YansWavePhyHelper
{
public:
    PyObject *m_pyself;
    PyNs3YansWavePhyHelper__PythonHelper()
        : ns3::YansWavePhyHelper(), m_pyself(NULL)
        {}

    PyNs3YansWavePhyHelper__PythonHelper(ns3::YansWavePhyHelper const & arg0)
        : ns3::YansWavePhyHelper(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWavePhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);

    virtual ns3::Ptr< ns3::WifiPhy > Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::NetDevice > device) const;
};


typedef struct {
    PyObject_HEAD
    ns3::BsmApplication *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BsmApplication;


extern PyTypeObject PyNs3BsmApplication_Type;
extern PyTypeObject PyNs3BsmApplicationMeta_Type;

class PyNs3BsmApplication__PythonHelper : public ns3::BsmApplication
{
public:
    PyObject *m_pyself;
    PyNs3BsmApplication__PythonHelper(ns3::BsmApplication const & arg0)
        : ns3::BsmApplication(arg0), m_pyself(NULL)
        {}

    PyNs3BsmApplication__PythonHelper()
        : ns3::BsmApplication(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BsmApplication__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3BsmApplication *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::BsmApplication::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3BsmApplication *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Application::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3BsmApplication *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3BsmApplication *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3BsmApplication__PythonHelper")
        .SetParent< ns3::BsmApplication > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3BsmApplication__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ChannelCoordinationListener *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelCoordinationListener;


extern PyTypeObject PyNs3ChannelCoordinationListener_Type;


typedef struct {
    PyObject_HEAD
    ns3::ChannelCoordinator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelCoordinator;


extern PyTypeObject PyNs3ChannelCoordinator_Type;

class PyNs3ChannelCoordinator__PythonHelper : public ns3::ChannelCoordinator
{
public:
    PyObject *m_pyself;
    PyNs3ChannelCoordinator__PythonHelper(ns3::ChannelCoordinator const & arg0)
        : ns3::ChannelCoordinator(arg0), m_pyself(NULL)
        {}

    PyNs3ChannelCoordinator__PythonHelper()
        : ns3::ChannelCoordinator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ChannelCoordinator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNewAggregate(PyNs3ChannelCoordinator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ChannelCoordinator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ChannelCoordinator__PythonHelper")
        .SetParent< ns3::ChannelCoordinator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ChannelCoordinator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ChannelManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelManager;


extern PyTypeObject PyNs3ChannelManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::ChannelScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelScheduler;


extern PyTypeObject PyNs3ChannelScheduler_Type;

class PyNs3ChannelScheduler__PythonHelper : public ns3::ChannelScheduler
{
public:
    PyObject *m_pyself;
    PyNs3ChannelScheduler__PythonHelper(ns3::ChannelScheduler const & arg0)
        : ns3::ChannelScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3ChannelScheduler__PythonHelper()
        : ns3::ChannelScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ChannelScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3ChannelScheduler *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::ChannelScheduler::DoInitialize(); }

    static PyObject * _wrap_DoDispose(PyNs3ChannelScheduler *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ChannelScheduler *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ChannelScheduler *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::ChannelAccess GetAssignedAccessType(uint32_t channelNumber) const;

    virtual void SetWaveNetDevice(ns3::Ptr< ns3::WaveNetDevice > device);

    virtual bool AssignAlternatingAccess(uint32_t channelNumber, bool immediate);

    virtual bool AssignContinuousAccess(uint32_t channelNumber, bool immediate);

    virtual bool AssignDefaultCchAccess();

    virtual bool AssignExtendedAccess(uint32_t channelNumber, uint32_t extends, bool immediate);

    virtual void DoInitialize();

    virtual bool ReleaseAccess(uint32_t channelNumber);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ChannelScheduler__PythonHelper")
        .SetParent< ns3::ChannelScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ChannelScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DefaultChannelScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultChannelScheduler;


extern PyTypeObject PyNs3DefaultChannelScheduler_Type;

class PyNs3DefaultChannelScheduler__PythonHelper : public ns3::DefaultChannelScheduler
{
public:
    PyObject *m_pyself;
    PyNs3DefaultChannelScheduler__PythonHelper(ns3::DefaultChannelScheduler const & arg0)
        : ns3::DefaultChannelScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3DefaultChannelScheduler__PythonHelper()
        : ns3::DefaultChannelScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DefaultChannelScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNewAggregate(PyNs3DefaultChannelScheduler *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DefaultChannelScheduler *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::ChannelAccess GetAssignedAccessType(uint32_t channelNumber) const;

    virtual void SetWaveNetDevice(ns3::Ptr< ns3::WaveNetDevice > device);

    virtual bool AssignAlternatingAccess(uint32_t channelNumber, bool immediate);

    virtual bool AssignContinuousAccess(uint32_t channelNumber, bool immediate);

    virtual bool AssignDefaultCchAccess();

    virtual bool AssignExtendedAccess(uint32_t channelNumber, uint32_t extends, bool immediate);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual bool ReleaseAccess(uint32_t channelNumber);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DefaultChannelScheduler__PythonHelper")
        .SetParent< ns3::DefaultChannelScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DefaultChannelScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::OrganizationIdentifierChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OrganizationIdentifierChecker;


extern PyTypeObject PyNs3OrganizationIdentifierChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::OrganizationIdentifierValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OrganizationIdentifierValue;


extern PyTypeObject PyNs3OrganizationIdentifierValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::WaveMacLow *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaveMacLow;


extern PyTypeObject PyNs3WaveMacLow_Type;

class PyNs3WaveMacLow__PythonHelper : public ns3::WaveMacLow
{
public:
    PyObject *m_pyself;
    PyNs3WaveMacLow__PythonHelper(ns3::WaveMacLow const & arg0)
        : ns3::WaveMacLow(arg0), m_pyself(NULL)
        {}

    PyNs3WaveMacLow__PythonHelper()
        : ns3::WaveMacLow(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WaveMacLow__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3WaveMacLow *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WaveMacLow *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WaveMacLow *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void StartTransmission(ns3::Ptr< ns3::WifiMacQueueItem > mpdu, ns3::MacLowTransmissionParameters parameters, ns3::Ptr< ns3::Txop > txop);

    virtual ns3::WifiTxVector GetDataTxVector(ns3::Ptr< ns3::WifiMacQueueItem const > item) const;

    virtual bool IsCfPeriod() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WaveMacLow__PythonHelper")
        .SetParent< ns3::WaveMacLow > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WaveMacLow__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::OcbWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OcbWifiMac;


extern PyTypeObject PyNs3OcbWifiMac_Type;

class PyNs3OcbWifiMac__PythonHelper : public ns3::OcbWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3OcbWifiMac__PythonHelper()
        : ns3::OcbWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OcbWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3OcbWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::RegularWifiMac::DoInitialize(); }

    static PyObject * _wrap_DoDispose(PyNs3OcbWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::RegularWifiMac::DoDispose(); }

    static PyObject * _wrap_TxOk(PyNs3OcbWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxOk__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxOk(hdr); }

    static PyObject * _wrap_TxFailed(PyNs3OcbWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxFailed__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxFailed(hdr); }

    static PyObject * _wrap_DeaggregateAmsduAndForward(PyNs3OcbWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > mpdu)
    { ns3::RegularWifiMac::DeaggregateAmsduAndForward(mpdu); }

    static PyObject * _wrap_SetQosSupported(PyNs3OcbWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SetQosSupported__parent_caller(bool enable)
    { ns3::RegularWifiMac::SetQosSupported(enable); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3OcbWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3OcbWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::Ssid GetSsid() const;

    virtual void SetSsid(ns3::Ssid ssid);

    virtual void SetBssid(ns3::Mac48Address bssid);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to);

    virtual void ConfigureStandard(ns3::WifiStandard standard);

    virtual void Receive(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void SetShortSlotTimeSupported(bool enable);

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetPromisc();

    virtual bool GetShortSlotTimeSupported() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void ResetWifiPhy();

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void DoInitialize();

    virtual void DoDispose();

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void SetQosSupported(bool enable);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3OcbWifiMac__PythonHelper")
        .SetParent< ns3::OcbWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3OcbWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WaveNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaveNetDevice;


extern PyTypeObject PyNs3WaveNetDevice_Type;

class PyNs3WaveNetDevice__PythonHelper : public ns3::WaveNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3WaveNetDevice__PythonHelper()
        : ns3::WaveNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WaveNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNewAggregate(PyNs3WaveNetDevice *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WaveNetDevice *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetIfIndex(uint32_t const index);

    virtual uint32_t GetIfIndex() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetAddress() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual uint16_t GetMtu() const;

    virtual bool IsLinkUp() const;

    virtual bool IsBroadcast() const;

    virtual ns3::Address GetBroadcast() const;

    virtual bool IsMulticast() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual bool IsPointToPoint() const;

    virtual bool IsBridge() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool NeedsArp() const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WaveNetDevice__PythonHelper")
        .SetParent< ns3::WaveNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WaveNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    std::map< std::string, ns3::LogComponent * > *obj;
} Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__ *container;
    std::map< std::string, ns3::LogComponent * >::iterator *iterator;
} Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__Iter;


extern PyTypeObject Pystd__map__lt___std__string__ns3__LogComponent___star_____gt___Type;
extern PyTypeObject Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__ns3__LogComponent___star_____gt__(PyObject *arg, std::map< std::string, ns3::LogComponent * > *container);

typedef struct {
    PyObject_HEAD
    ns3::EdcaParameters *obj;
} Pyns3__EdcaParameters;


typedef struct {
    PyObject_HEAD
    Pyns3__EdcaParameters *container;
    ns3::EdcaParameters::iterator *iterator;
} Pyns3__EdcaParametersIter;


extern PyTypeObject Pyns3__EdcaParameters_Type;
extern PyTypeObject Pyns3__EdcaParametersIter_Type;

int _wrap_convert_py2c__ns3__EdcaParameters(PyObject *arg, ns3::EdcaParameters *container);

typedef struct {
    PyObject_HEAD
    std::vector< double > *obj;
} Pystd__vector__lt___double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___double___gt__ *container;
    std::vector< double >::iterator *iterator;
} Pystd__vector__lt___double___gt__Iter;


extern PyTypeObject Pystd__vector__lt___double___gt___Type;
extern PyTypeObject Pystd__vector__lt___double___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container);

typedef struct {
    PyObject_HEAD
    std::vector< int > *obj;
} Pystd__vector__lt___int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___int___gt__ *container;
    std::vector< int >::iterator *iterator;
} Pystd__vector__lt___int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___int___gt___Type;
extern PyTypeObject Pystd__vector__lt___int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector< int > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned int > *obj;
} Pystd__vector__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_int___gt__ *container;
    std::vector< unsigned int >::iterator *iterator;
} Pystd__vector__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(PyObject *arg, std::vector< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    ns3::WifiModeList *obj;
} Pyns3__WifiModeList;


typedef struct {
    PyObject_HEAD
    Pyns3__WifiModeList *container;
    ns3::WifiModeList::iterator *iterator;
} Pyns3__WifiModeListIter;


extern PyTypeObject Pyns3__WifiModeList_Type;
extern PyTypeObject Pyns3__WifiModeListIter_Type;

int _wrap_convert_py2c__ns3__WifiModeList(PyObject *arg, ns3::WifiModeList *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned short, ns3::HeMuUserInfo > *obj;
} Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__ *container;
    std::map< unsigned short, ns3::HeMuUserInfo >::iterator *iterator;
} Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__(PyObject *arg, std::map< unsigned short, ns3::HeMuUserInfo > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ipv6Address > *obj;
} Pystd__vector__lt___ns3__Ipv6Address___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ipv6Address___gt__ *container;
    std::vector< ns3::Ipv6Address >::iterator *iterator;
} Pystd__vector__lt___ns3__Ipv6Address___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ipv6Address___gt__(PyObject *arg, std::vector< ns3::Ipv6Address > *container);

typedef struct {
    PyObject_HEAD
    ns3::Bands *obj;
} Pyns3__Bands;


typedef struct {
    PyObject_HEAD
    Pyns3__Bands *container;
    ns3::Bands::iterator *iterator;
} Pyns3__BandsIter;


extern PyTypeObject Pyns3__Bands_Type;
extern PyTypeObject Pyns3__BandsIter_Type;

int _wrap_convert_py2c__ns3__Bands(PyObject *arg, ns3::Bands *container);

typedef struct {
    PyObject_HEAD
    ns3::WifiConstPsduMap *obj;
} Pyns3__WifiConstPsduMap;


typedef struct {
    PyObject_HEAD
    Pyns3__WifiConstPsduMap *container;
    ns3::WifiConstPsduMap::iterator *iterator;
} Pyns3__WifiConstPsduMapIter;


extern PyTypeObject Pyns3__WifiConstPsduMap_Type;
extern PyTypeObject Pyns3__WifiConstPsduMapIter_Type;

int _wrap_convert_py2c__ns3__WifiConstPsduMap(PyObject *arg, ns3::WifiConstPsduMap *container);

typedef struct {
    PyObject_HEAD
    std::vector< bool > *obj;
} Pystd__vector__lt___bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___bool___gt__ *container;
    std::vector< bool >::iterator *iterator;
} Pystd__vector__lt___bool___gt__Iter;


extern PyTypeObject Pystd__vector__lt___bool___gt___Type;
extern PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned short > *obj;
} Pystd__vector__lt___unsigned_short___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_short___gt__ *container;
    std::vector< unsigned short >::iterator *iterator;
} Pystd__vector__lt___unsigned_short___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_short___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_short___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_short___gt__(PyObject *arg, std::vector< unsigned short > *container);

typedef struct {
    PyObject_HEAD
    std::unordered_map< unsigned short, ns3::Ptr< ns3::WifiPsdu const > > *obj;
} Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__ *container;
    std::unordered_map< unsigned short, ns3::Ptr< ns3::WifiPsdu const > >::iterator *iterator;
} Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__Iter;


extern PyTypeObject Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt___Type;
extern PyTypeObject Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__(PyObject *arg, std::unordered_map< unsigned short, ns3::Ptr< ns3::WifiPsdu const > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::WifiMacQueueItem > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::WifiMacQueueItem > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::WifiMacQueueItem > > *container);

typedef struct {
    PyObject_HEAD
    std::set< unsigned char > *obj;
} Pystd__set__lt___unsigned_char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt___unsigned_char___gt__ *container;
    std::set< unsigned char >::iterator *iterator;
} Pystd__set__lt___unsigned_char___gt__Iter;


extern PyTypeObject Pystd__set__lt___unsigned_char___gt___Type;
extern PyTypeObject Pystd__set__lt___unsigned_char___gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___unsigned_char___gt__(PyObject *arg, std::set< unsigned char > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::WifiRemoteStation * > *obj;
} Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt__ *container;
    std::vector< ns3::WifiRemoteStation * >::iterator *iterator;
} Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__WifiRemoteStation___star_____gt__(PyObject *arg, std::vector< ns3::WifiRemoteStation * > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::WifiRemoteStationState * > *obj;
} Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt__ *container;
    std::vector< ns3::WifiRemoteStationState * >::iterator *iterator;
} Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__WifiRemoteStationState___star_____gt__(PyObject *arg, std::vector< ns3::WifiRemoteStationState * > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, unsigned int > *obj;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__unsigned_int___gt__ *container;
    std::map< unsigned int, unsigned int >::iterator *iterator;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__unsigned_int___gt__(PyObject *arg, std::map< unsigned int, unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned int > *obj;
} Pystd__list__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_int___gt__ *container;
    std::list< unsigned int >::iterator *iterator;
} Pystd__list__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_int___gt__(PyObject *arg, std::list< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::map< ns3::AcIndex, ns3::Ptr< ns3::QosTxop > > *obj;
} Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__ *container;
    std::map< ns3::AcIndex, ns3::Ptr< ns3::QosTxop > >::iterator *iterator;
} Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__(PyObject *arg, std::map< ns3::AcIndex, ns3::Ptr< ns3::QosTxop > > *container);

typedef struct {
    PyObject_HEAD
    ns3::MpduAggregator::EdcaQueues *obj;
} Pyns3__MpduAggregator__EdcaQueues;


typedef struct {
    PyObject_HEAD
    Pyns3__MpduAggregator__EdcaQueues *container;
    ns3::MpduAggregator::EdcaQueues::iterator *iterator;
} Pyns3__MpduAggregator__EdcaQueuesIter;


extern PyTypeObject Pyns3__MpduAggregator__EdcaQueues_Type;
extern PyTypeObject Pyns3__MpduAggregator__EdcaQueuesIter_Type;

int _wrap_convert_py2c__ns3__MpduAggregator__EdcaQueues(PyObject *arg, ns3::MpduAggregator::EdcaQueues *container);

typedef struct {
    PyObject_HEAD
    ns3::MsduAggregator::EdcaQueues *obj;
} Pyns3__MsduAggregator__EdcaQueues;


typedef struct {
    PyObject_HEAD
    Pyns3__MsduAggregator__EdcaQueues *container;
    ns3::MsduAggregator::EdcaQueues::iterator *iterator;
} Pyns3__MsduAggregator__EdcaQueuesIter;


extern PyTypeObject Pyns3__MsduAggregator__EdcaQueues_Type;
extern PyTypeObject Pyns3__MsduAggregator__EdcaQueuesIter_Type;

int _wrap_convert_py2c__ns3__MsduAggregator__EdcaQueues(PyObject *arg, ns3::MsduAggregator::EdcaQueues *container);

typedef struct {
    PyObject_HEAD
    std::map< ns3::Mac48Address, bool > *obj;
} Pystd__map__lt___ns3__Mac48Address__bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___ns3__Mac48Address__bool___gt__ *container;
    std::map< ns3::Mac48Address, bool >::iterator *iterator;
} Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter;


extern PyTypeObject Pystd__map__lt___ns3__Mac48Address__bool___gt___Type;
extern PyTypeObject Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___ns3__Mac48Address__bool___gt__(PyObject *arg, std::map< ns3::Mac48Address, bool > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::WifiMacQueueItem > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::WifiMacQueueItem > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::WifiMacQueueItem > > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, ns3::Ptr< ns3::OcbWifiMac > > *obj;
} Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__OcbWifiMac___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__OcbWifiMac___gt_____gt__ *container;
    std::map< unsigned int, ns3::Ptr< ns3::OcbWifiMac > >::iterator *iterator;
} Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__OcbWifiMac___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__OcbWifiMac___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__OcbWifiMac___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__ns3__Ptr__lt___ns3__OcbWifiMac___gt_____gt__(PyObject *arg, std::map< unsigned int, ns3::Ptr< ns3::OcbWifiMac > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::WifiPhy > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiPhy___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiPhy___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::WifiPhy > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiPhy___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiPhy___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiPhy___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__WifiPhy___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::WifiPhy > > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject *_PyNs3HashImplementation_Type;
#define PyNs3HashImplementation_Type (*_PyNs3HashImplementation_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject *_PyNs3HashFunctionFnv1a_Type;
#define PyNs3HashFunctionFnv1a_Type (*_PyNs3HashFunctionFnv1a_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject *_PyNs3HashFunctionHash32_Type;
#define PyNs3HashFunctionHash32_Type (*_PyNs3HashFunctionHash32_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject *_PyNs3HashFunctionHash64_Type;
#define PyNs3HashFunctionHash64_Type (*_PyNs3HashFunctionHash64_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject *_PyNs3HashFunctionMurmur3_Type;
#define PyNs3HashFunctionMurmur3_Type (*_PyNs3HashFunctionMurmur3_Type)


class PythonCallbackImpl0 : public ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    ns3::ObjectBase *
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        ns3::ObjectBase *retval;
        PyObject *args;
        PyNs3ObjectBase *tmp_ObjectBase;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return NULL;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ObjectBase_Type, &tmp_ObjectBase)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return NULL;
        }
        // dangerous!
        retval = tmp_ObjectBase->obj;
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_NetDevice);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_Socket);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl8 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl8(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl8()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl8 *other = dynamic_cast<const PythonCallbackImpl8*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl9 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl9(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl9()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl9 *other = dynamic_cast<const PythonCallbackImpl9*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(NN)", py_Socket, PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl10 : public ns3::CallbackImpl<void, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl10(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl10()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl10 *other = dynamic_cast<const PythonCallbackImpl10*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned int arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(N)", PyLong_FromUnsignedLong(arg1));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl11 : public ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl11(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl11()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl11 *other = dynamic_cast<const PythonCallbackImpl11*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv4Header const & arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned int arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv4Header *py_Ipv4Header;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Header->obj = new ns3::Ipv4Header(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(NNN)", py_Ipv4Header, py_Packet, PyLong_FromUnsignedLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl12 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl12(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl12()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl12 *other = dynamic_cast<const PythonCallbackImpl12*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Ptr< ns3::Ipv4 > arg2, unsigned int arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv4 *py_Ipv4;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Ipv4 = NULL;
        } else {
            py_Ipv4 = (PyNs3Ipv4 *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Ipv4);
        }

        if (py_Ipv4 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg2))), &PyNs3Ipv4_Type);
            py_Ipv4 = PyObject_GC_New(PyNs3Ipv4, wrapper_type2);
            py_Ipv4->inst_dict = NULL;

            py_Ipv4->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg2))->Ref();
            py_Ipv4->obj = const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg2));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4->obj] = (PyObject *) py_Ipv4;
        }
        args = Py_BuildValue((char *) "(NNN)", py_Packet, py_Ipv4, PyLong_FromUnsignedLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl13 : public ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl13(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl13()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl13 *other = dynamic_cast<const PythonCallbackImpl13*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv4Header const & arg1, ns3::Ptr< ns3::Packet const > arg2, ns3::Ipv4L3Protocol::DropReason arg3, ns3::Ptr< ns3::Ipv4 > arg4, unsigned int arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv4Header *py_Ipv4Header;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv4 *py_Ipv4;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Header->obj = new ns3::Ipv4Header(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg4)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Ipv4 = NULL;
        } else {
            py_Ipv4 = (PyNs3Ipv4 *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Ipv4);
        }

        if (py_Ipv4 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg4))), &PyNs3Ipv4_Type);
            py_Ipv4 = PyObject_GC_New(PyNs3Ipv4, wrapper_type2);
            py_Ipv4->inst_dict = NULL;

            py_Ipv4->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg4))->Ref();
            py_Ipv4->obj = const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg4));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4->obj] = (PyObject *) py_Ipv4;
        }
        args = Py_BuildValue((char *) "(NNiNN)", py_Ipv4Header, py_Packet, arg3, py_Ipv4, PyLong_FromUnsignedLong(arg5));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl14 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl14(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl14()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl14 *other = dynamic_cast<const PythonCallbackImpl14*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Ptr< ns3::Ipv6 > arg2, unsigned int arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv6 *py_Ipv6;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Ipv6 *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Ipv6 = NULL;
        } else {
            py_Ipv6 = (PyNs3Ipv6 *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Ipv6);
        }

        if (py_Ipv6 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv6 *> (ns3::PeekPointer (arg2))), &PyNs3Ipv6_Type);
            py_Ipv6 = PyObject_GC_New(PyNs3Ipv6, wrapper_type2);
            py_Ipv6->inst_dict = NULL;

            py_Ipv6->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv6 *> (ns3::PeekPointer (arg2))->Ref();
            py_Ipv6->obj = const_cast<ns3::Ipv6 *> (ns3::PeekPointer (arg2));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv6->obj] = (PyObject *) py_Ipv6;
        }
        args = Py_BuildValue((char *) "(NNN)", py_Packet, py_Ipv6, PyLong_FromUnsignedLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl15 : public ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv6L3Protocol::DropReason, ns3::Ptr<ns3::Ipv6>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl15(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl15()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl15 *other = dynamic_cast<const PythonCallbackImpl15*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv6Header const & arg1, ns3::Ptr< ns3::Packet const > arg2, ns3::Ipv6L3Protocol::DropReason arg3, ns3::Ptr< ns3::Ipv6 > arg4, unsigned int arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv6Header *py_Ipv6Header;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv6 *py_Ipv6;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv6Header = PyObject_GC_New(PyNs3Ipv6Header, &PyNs3Ipv6Header_Type);
        py_Ipv6Header->inst_dict = NULL;
        py_Ipv6Header->inst_dict = NULL;
        py_Ipv6Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv6Header->obj = new ns3::Ipv6Header(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv6Header->obj] = (PyObject *) py_Ipv6Header;
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Ipv6 *> (ns3::PeekPointer (arg4)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Ipv6 = NULL;
        } else {
            py_Ipv6 = (PyNs3Ipv6 *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Ipv6);
        }

        if (py_Ipv6 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv6 *> (ns3::PeekPointer (arg4))), &PyNs3Ipv6_Type);
            py_Ipv6 = PyObject_GC_New(PyNs3Ipv6, wrapper_type2);
            py_Ipv6->inst_dict = NULL;

            py_Ipv6->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv6 *> (ns3::PeekPointer (arg4))->Ref();
            py_Ipv6->obj = const_cast<ns3::Ipv6 *> (ns3::PeekPointer (arg4));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv6->obj] = (PyObject *) py_Ipv6;
        }
        args = Py_BuildValue((char *) "(NNiNN)", py_Ipv6Header, py_Packet, arg3, py_Ipv6, PyLong_FromUnsignedLong(arg5));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl16 : public ns3::CallbackImpl<void, const ns3::Ipv6Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl16(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl16()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl16 *other = dynamic_cast<const PythonCallbackImpl16*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv6Header const & arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned int arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv6Header *py_Ipv6Header;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv6Header = PyObject_GC_New(PyNs3Ipv6Header, &PyNs3Ipv6Header_Type);
        py_Ipv6Header->inst_dict = NULL;
        py_Ipv6Header->inst_dict = NULL;
        py_Ipv6Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv6Header->obj = new ns3::Ipv6Header(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv6Header->obj] = (PyObject *) py_Ipv6Header;
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(NNN)", py_Ipv6Header, py_Packet, PyLong_FromUnsignedLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl17 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl17(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl17()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl17 *other = dynamic_cast<const PythonCallbackImpl17*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl19 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl19(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl19()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl19 *other = dynamic_cast<const PythonCallbackImpl19*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Mac48Address arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(NN)", py_Packet, py_Mac48Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl20 : public ns3::CallbackImpl<void, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl20(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl20()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl20 *other = dynamic_cast<const PythonCallbackImpl20*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(N)", py_Mac48Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl21 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl21(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl21()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl21 *other = dynamic_cast<const PythonCallbackImpl21*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Mac48Address arg2, ns3::Mac48Address arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Mac48Address *py_Mac48Address;
        PyNs3Mac48Address *py_Mac48Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address2->obj = new ns3::Mac48Address(arg3);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
        args = Py_BuildValue((char *) "(NNN)", py_Packet, py_Mac48Address, py_Mac48Address2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl22 : public ns3::CallbackImpl<void, ns3::Mac48Address, unsigned char, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl22(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl22()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl22 *other = dynamic_cast<const PythonCallbackImpl22*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1, unsigned char arg2, bool arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(NiN)", py_Mac48Address, (int) arg2, PyBool_FromLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl23 : public ns3::CallbackImpl<void, ns3::Mac48Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl23(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl23()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl23 *other = dynamic_cast<const PythonCallbackImpl23*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1, unsigned char arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(Ni)", py_Mac48Address, (int) arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl24 : public ns3::CallbackImpl<void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl24(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl24()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl24 *other = dynamic_cast<const PythonCallbackImpl24*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::WifiMacHeader const & arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiMacHeader *py_WifiMacHeader;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
        args = Py_BuildValue((char *) "(N)", py_WifiMacHeader);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl25 : public ns3::CallbackImpl<void, ns3::Time, ns3::Mac48Address, unsigned char, ns3::OriginatorBlockAckAgreement::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl25(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl25()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl25 *other = dynamic_cast<const PythonCallbackImpl25*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Time arg1, ns3::Mac48Address arg2, unsigned char arg3, ns3::OriginatorBlockAckAgreement::State arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Time *py_Time;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg1);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(NNii)", py_Time, py_Mac48Address, (int) arg3, arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl26 : public ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl26(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl26()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl26 *other = dynamic_cast<const PythonCallbackImpl26*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned int arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(NN)", PyLong_FromUnsignedLong(arg1), PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl27 : public ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl27(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl27()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl27 *other = dynamic_cast<const PythonCallbackImpl27*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Time arg1, ns3::Time arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Time *py_Time;
        PyNs3Time *py_Time2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg1);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        py_Time2 = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time2->obj = new ns3::Time(arg2);
        PyNs3Time_wrapper_registry[(void *) py_Time2->obj] = (PyObject *) py_Time2;
        args = Py_BuildValue((char *) "(NN)", py_Time, py_Time2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl28 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::QueueDiscItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl28(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl28()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl28 *other = dynamic_cast<const PythonCallbackImpl28*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::QueueDiscItem const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3QueueDiscItem *py_QueueDiscItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_QueueDiscItem = NULL;
        } else {
            py_QueueDiscItem = (PyNs3QueueDiscItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_QueueDiscItem);
        }

        if (py_QueueDiscItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1))), &PyNs3QueueDiscItem_Type);
            py_QueueDiscItem = PyObject_New(PyNs3QueueDiscItem, wrapper_type);

            py_QueueDiscItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1))->Ref();
            py_QueueDiscItem->obj = const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_QueueDiscItem->obj] = (PyObject *) py_QueueDiscItem;
        }
        args = Py_BuildValue((char *) "(N)", py_QueueDiscItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl29 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl29(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl29()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl29 *other = dynamic_cast<const PythonCallbackImpl29*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::WifiMacQueueItem const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_WifiMacQueueItem = NULL;
        } else {
            py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiMacQueueItem);
        }

        if (py_WifiMacQueueItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1))), &PyNs3WifiMacQueueItem_Type);
            py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);

            py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1))->Ref();
            py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
        }
        args = Py_BuildValue((char *) "(N)", py_WifiMacQueueItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl30 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::WifiMac>, const ns3::OrganizationIdentifier &, ns3::Ptr<const ns3::Packet>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl30(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl30()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl30 *other = dynamic_cast<const PythonCallbackImpl30*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::WifiMac > arg1, ns3::OrganizationIdentifier const & arg2, ns3::Ptr< ns3::Packet const > arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3WifiMac *py_WifiMac;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3OrganizationIdentifier *py_OrganizationIdentifier;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::WifiMac *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3WifiMac__PythonHelper).name())
        {
            py_WifiMac = (PyNs3WifiMac*) (((PyNs3WifiMac__PythonHelper*) const_cast<ns3::WifiMac *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_WifiMac->obj = const_cast<ns3::WifiMac *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_WifiMac);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiMac *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_WifiMac = NULL;
            } else {
                py_WifiMac = (PyNs3WifiMac *) wrapper_lookup_iter->second;
                Py_INCREF(py_WifiMac);
            }

            if (py_WifiMac == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiMac *> (ns3::PeekPointer (arg1))), &PyNs3WifiMac_Type);
                py_WifiMac = PyObject_GC_New(PyNs3WifiMac, wrapper_type);
                py_WifiMac->inst_dict = NULL;

                py_WifiMac->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::WifiMac *> (ns3::PeekPointer (arg1))->Ref();
                py_WifiMac->obj = const_cast<ns3::WifiMac *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMac->obj] = (PyObject *) py_WifiMac;
            }
        }
        py_OrganizationIdentifier = PyObject_New(PyNs3OrganizationIdentifier, &PyNs3OrganizationIdentifier_Type);
        py_OrganizationIdentifier->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_OrganizationIdentifier->obj = new ns3::OrganizationIdentifier(arg2);
        PyNs3OrganizationIdentifier_wrapper_registry[(void *) py_OrganizationIdentifier->obj] = (PyObject *) py_OrganizationIdentifier;
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg3)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg3))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg3))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg3));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNNN)", py_WifiMac, py_OrganizationIdentifier, py_Packet, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl31 : public ns3::CallbackImpl<bool, ns3::Ptr<const ns3::Packet>, const ns3::Address &, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl31(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl31()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl31 *other = dynamic_cast<const PythonCallbackImpl31*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Address const & arg2, unsigned int arg3, unsigned int arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNNN)", py_Packet, py_Address, PyLong_FromUnsignedLong(arg3), PyLong_FromUnsignedLong(arg4));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl32 : public ns3::CallbackImpl<void, ns3::Address, ns3::Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl32(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl32()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl32 *other = dynamic_cast<const PythonCallbackImpl32*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Address arg1, ns3::Address arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg1);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NN)", py_Address, py_Address2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl33 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl33(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl33()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl33 *other = dynamic_cast<const PythonCallbackImpl33*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::MobilityModel const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MobilityModel *py_MobilityModel;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_MobilityModel);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel = NULL;
            } else {
                py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
                Py_INCREF(py_MobilityModel);
            }

            if (py_MobilityModel == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))), &PyNs3MobilityModel_Type);
                py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
                py_MobilityModel->inst_dict = NULL;

                py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))->Ref();
                py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_MobilityModel);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl35 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::WifiPsdu>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl35(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl35()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl35 *other = dynamic_cast<const PythonCallbackImpl35*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::WifiPsdu > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiPsdu *py_WifiPsdu;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiPsdu *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_WifiPsdu = NULL;
        } else {
            py_WifiPsdu = (PyNs3WifiPsdu *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPsdu);
        }

        if (py_WifiPsdu == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPsdu *> (ns3::PeekPointer (arg1))), &PyNs3WifiPsdu_Type);
            py_WifiPsdu = PyObject_New(PyNs3WifiPsdu, wrapper_type);

            py_WifiPsdu->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPsdu *> (ns3::PeekPointer (arg1))->Ref();
            py_WifiPsdu->obj = const_cast<ns3::WifiPsdu *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_WifiPsdu->obj] = (PyObject *) py_WifiPsdu;
        }
        args = Py_BuildValue((char *) "(N)", py_WifiPsdu);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl37 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl37(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl37()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl37 *other = dynamic_cast<const PythonCallbackImpl37*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, double arg2, ns3::WifiMode arg3, ns3::WifiPreamble arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiMode *py_WifiMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
        py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMode->obj = new ns3::WifiMode(arg3);
        PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
        args = Py_BuildValue((char *) "(NdNi)", py_Packet, arg2, py_WifiMode, arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl38 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl38(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl38()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl38 *other = dynamic_cast<const PythonCallbackImpl38*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, double arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(Nd)", py_Packet, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl39 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl39(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl39()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl39 *other = dynamic_cast<const PythonCallbackImpl39*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::WifiMode arg2, ns3::WifiPreamble arg3, unsigned char arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiMode *py_WifiMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
        py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMode->obj = new ns3::WifiMode(arg2);
        PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
        args = Py_BuildValue((char *) "(NNii)", py_Packet, py_WifiMode, arg3, (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl42 : public ns3::CallbackImpl<void, ns3::WifiTxVector, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl42(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl42()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl42 *other = dynamic_cast<const PythonCallbackImpl42*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::WifiTxVector arg1, ns3::Time arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3Time *py_Time;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg1);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg2);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        args = Py_BuildValue((char *) "(NN)", py_WifiTxVector, py_Time);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl43 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::WifiPhyRxfailureReason, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl43(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl43()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl43 *other = dynamic_cast<const PythonCallbackImpl43*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::WifiPhyRxfailureReason arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(Ni)", py_Packet, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl44 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, unsigned short, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl44(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl44()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl44 *other = dynamic_cast<const PythonCallbackImpl44*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, unsigned short arg2, ns3::WifiTxVector arg3, ns3::MpduInfo arg4, ns3::SignalNoiseDbm arg5, unsigned short arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3MpduInfo *py_MpduInfo;
        PyNs3SignalNoiseDbm *py_SignalNoiseDbm;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg3);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_MpduInfo = PyObject_New(PyNs3MpduInfo, &PyNs3MpduInfo_Type);
        py_MpduInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_MpduInfo->obj = new ns3::MpduInfo(arg4);
        PyNs3MpduInfo_wrapper_registry[(void *) py_MpduInfo->obj] = (PyObject *) py_MpduInfo;
        py_SignalNoiseDbm = PyObject_New(PyNs3SignalNoiseDbm, &PyNs3SignalNoiseDbm_Type);
        py_SignalNoiseDbm->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_SignalNoiseDbm->obj = new ns3::SignalNoiseDbm(arg5);
        PyNs3SignalNoiseDbm_wrapper_registry[(void *) py_SignalNoiseDbm->obj] = (PyObject *) py_SignalNoiseDbm;
        args = Py_BuildValue((char *) "(NiNNNi)", py_Packet, (int) arg2, py_WifiTxVector, py_MpduInfo, py_SignalNoiseDbm, (int) arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl45 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl45(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl45()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl45 *other = dynamic_cast<const PythonCallbackImpl45*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, unsigned short arg2, ns3::WifiTxVector arg3, ns3::MpduInfo arg4, unsigned short arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3MpduInfo *py_MpduInfo;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg3);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_MpduInfo = PyObject_New(PyNs3MpduInfo, &PyNs3MpduInfo_Type);
        py_MpduInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_MpduInfo->obj = new ns3::MpduInfo(arg4);
        PyNs3MpduInfo_wrapper_registry[(void *) py_MpduInfo->obj] = (PyObject *) py_MpduInfo;
        args = Py_BuildValue((char *) "(NiNNi)", py_Packet, (int) arg2, py_WifiTxVector, py_MpduInfo, (int) arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl46 : public ns3::CallbackImpl<void, ns3::HePreambleParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl46(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl46()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl46 *other = dynamic_cast<const PythonCallbackImpl46*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::HePreambleParameters arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3HePreambleParameters *py_HePreambleParameters;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_HePreambleParameters = PyObject_New(PyNs3HePreambleParameters, &PyNs3HePreambleParameters_Type);
        py_HePreambleParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_HePreambleParameters->obj = new ns3::HePreambleParameters(arg1);
        PyNs3HePreambleParameters_wrapper_registry[(void *) py_HePreambleParameters->obj] = (PyObject *) py_HePreambleParameters;
        args = Py_BuildValue((char *) "(N)", py_HePreambleParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl47 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl47(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl47()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl47 *other = dynamic_cast<const PythonCallbackImpl47*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::WifiMacQueueItem > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_WifiMacQueueItem = NULL;
        } else {
            py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiMacQueueItem);
        }

        if (py_WifiMacQueueItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1))), &PyNs3WifiMacQueueItem_Type);
            py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);

            py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1))->Ref();
            py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
        }
        args = Py_BuildValue((char *) "(N)", py_WifiMacQueueItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


int _wrap_convert_py2c__ns3__LogComponent___star__(PyObject *value, ns3::LogComponent * *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__ns3__EdcaParameter(PyObject *value, ns3::EdcaParameter *address);


int _wrap_convert_py2c__ns3__AcIndex(PyObject *value, ns3::AcIndex *address);


int _wrap_convert_py2c__double(PyObject *value, double *address);


int _wrap_convert_py2c__int(PyObject *value, int *address);


int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address);


int _wrap_convert_py2c__ns3__WifiMode(PyObject *value, ns3::WifiMode *address);


int _wrap_convert_py2c__ns3__HeMuUserInfo(PyObject *value, ns3::HeMuUserInfo *address);


int _wrap_convert_py2c__short_unsigned_int(PyObject *value, short unsigned int *address);


int _wrap_convert_py2c__ns3__Ipv6Address(PyObject *value, ns3::Ipv6Address *address);


int _wrap_convert_py2c__ns3__BandInfo(PyObject *value, ns3::BandInfo *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__WifiPsdu_const___gt__(PyObject *value, ns3::Ptr< ns3::WifiPsdu const > *address);


int _wrap_convert_py2c__bool(PyObject *value, bool *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__WifiMacQueueItem___gt__(PyObject *value, ns3::Ptr< ns3::WifiMacQueueItem > *address);


int _wrap_convert_py2c__unsigned_char(PyObject *value, unsigned char *address);


int _wrap_convert_py2c__ns3__WifiRemoteStation___star__(PyObject *value, ns3::WifiRemoteStation * *address);


int _wrap_convert_py2c__ns3__WifiRemoteStationState___star__(PyObject *value, ns3::WifiRemoteStationState * *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__QosTxop___gt__(PyObject *value, ns3::Ptr< ns3::QosTxop > *address);


int _wrap_convert_py2c__ns3__Mac48Address(PyObject *value, ns3::Mac48Address *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__OcbWifiMac___gt__(PyObject *value, ns3::Ptr< ns3::OcbWifiMac > *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__WifiPhy___gt__(PyObject *value, ns3::Ptr< ns3::WifiPhy > *address);

