/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03050000
typedef PyAsyncMethods* cmpfunc;
#else
typedef void* cmpfunc;
#endif
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif

#if PY_VERSION_HEX >= 0x03070000 && !defined(PyEval_ThreadsInitialized)
#define PyEval_ThreadsInitialized() 1
#endif


#include "ns3/wifi-module.h"
#include "ns3/propagation-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Angles *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Angles;


extern PyTypeObject *_PyNs3Angles_Type;
#define PyNs3Angles_Type (*_PyNs3Angles_Type)

extern std::map<void*, PyObject*> *_PyNs3Angles_wrapper_registry;
#define PyNs3Angles_wrapper_registry (*_PyNs3Angles_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelper;


extern PyTypeObject *_PyNs3AsciiTraceHelper_Type;
#define PyNs3AsciiTraceHelper_Type (*_PyNs3AsciiTraceHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelper_wrapper_registry;
#define PyNs3AsciiTraceHelper_wrapper_registry (*_PyNs3AsciiTraceHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForDevice;


extern PyTypeObject *_PyNs3AsciiTraceHelperForDevice_Type;
#define PyNs3AsciiTraceHelperForDevice_Type (*_PyNs3AsciiTraceHelperForDevice_Type)

class PyNs3AsciiTraceHelperForDevice__PythonHelper : public ns3::AsciiTraceHelperForDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForDevice_wrapper_registry;
#define PyNs3AsciiTraceHelperForDevice_wrapper_registry (*_PyNs3AsciiTraceHelperForDevice_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BandInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BandInfo;


extern PyTypeObject *_PyNs3BandInfo_Type;
#define PyNs3BandInfo_Type (*_PyNs3BandInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3BandInfo_wrapper_registry;
#define PyNs3BandInfo_wrapper_registry (*_PyNs3BandInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DataRate *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRate;


extern PyTypeObject *_PyNs3DataRate_Type;
#define PyNs3DataRate_Type (*_PyNs3DataRate_Type)

extern std::map<void*, PyObject*> *_PyNs3DataRate_wrapper_registry;
#define PyNs3DataRate_wrapper_registry (*_PyNs3DataRate_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeAccessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeAccessor;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type;
#define PyNs3DefaultDeleter__Ns3AttributeAccessor_Type (*_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeChecker > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeChecker;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeChecker_Type;
#define PyNs3DefaultDeleter__Ns3AttributeChecker_Type (*_PyNs3DefaultDeleter__Ns3AttributeChecker_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeValue_Type;
#define PyNs3DefaultDeleter__Ns3AttributeValue_Type (*_PyNs3DefaultDeleter__Ns3AttributeValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::CallbackImplBase > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3CallbackImplBase;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type;
#define PyNs3DefaultDeleter__Ns3CallbackImplBase_Type (*_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry (*_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::EventImpl > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3EventImpl;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3EventImpl_Type;
#define PyNs3DefaultDeleter__Ns3EventImpl_Type (*_PyNs3DefaultDeleter__Ns3EventImpl_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry (*_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Hash::Implementation > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3HashImplementation;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3HashImplementation_Type;
#define PyNs3DefaultDeleter__Ns3HashImplementation_Type (*_PyNs3DefaultDeleter__Ns3HashImplementation_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry (*_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::NixVector > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3NixVector;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3NixVector_Type;
#define PyNs3DefaultDeleter__Ns3NixVector_Type (*_PyNs3DefaultDeleter__Ns3NixVector_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry (*_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::OutputStreamWrapper > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3OutputStreamWrapper;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_Type;
#define PyNs3DefaultDeleter__Ns3OutputStreamWrapper_Type (*_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry (*_PyNs3DefaultDeleter__Ns3OutputStreamWrapper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Packet > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3Packet;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3Packet_Type;
#define PyNs3DefaultDeleter__Ns3Packet_Type (*_PyNs3DefaultDeleter__Ns3Packet_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3Packet_wrapper_registry (*_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::QueueItem > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3QueueItem;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3QueueItem_Type;
#define PyNs3DefaultDeleter__Ns3QueueItem_Type (*_PyNs3DefaultDeleter__Ns3QueueItem_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry (*_PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumModel > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumModel;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumModel_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumModel_Type (*_PyNs3DefaultDeleter__Ns3SpectrumModel_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumSignalParameters > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumSignalParameters;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type (*_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumValue_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumValue_Type (*_PyNs3DefaultDeleter__Ns3SpectrumValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::TraceSourceAccessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3TraceSourceAccessor;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type;
#define PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type (*_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry (*_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DeviceEnergyModelContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeviceEnergyModelContainer;


extern PyTypeObject *_PyNs3DeviceEnergyModelContainer_Type;
#define PyNs3DeviceEnergyModelContainer_Type (*_PyNs3DeviceEnergyModelContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3DeviceEnergyModelContainer_wrapper_registry;
#define PyNs3DeviceEnergyModelContainer_wrapper_registry (*_PyNs3DeviceEnergyModelContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DeviceEnergyModelHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeviceEnergyModelHelper;


extern PyTypeObject *_PyNs3DeviceEnergyModelHelper_Type;
#define PyNs3DeviceEnergyModelHelper_Type (*_PyNs3DeviceEnergyModelHelper_Type)

class PyNs3DeviceEnergyModelHelper__PythonHelper : public ns3::DeviceEnergyModelHelper
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeviceEnergyModelHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3DeviceEnergyModelHelper_wrapper_registry;
#define PyNs3DeviceEnergyModelHelper_wrapper_registry (*_PyNs3DeviceEnergyModelHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EnergySourceHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnergySourceHelper;


extern PyTypeObject *_PyNs3EnergySourceHelper_Type;
#define PyNs3EnergySourceHelper_Type (*_PyNs3EnergySourceHelper_Type)

class PyNs3EnergySourceHelper__PythonHelper : public ns3::EnergySourceHelper
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnergySourceHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3EnergySourceHelper_wrapper_registry;
#define PyNs3EnergySourceHelper_wrapper_registry (*_PyNs3EnergySourceHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject *_PyNs3Hasher_Type;
#define PyNs3Hasher_Type (*_PyNs3Hasher_Type)

extern std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;
#define PyNs3Hasher_wrapper_registry (*_PyNs3Hasher_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogComponent *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogComponent;


extern PyTypeObject *_PyNs3LogComponent_Type;
#define PyNs3LogComponent_Type (*_PyNs3LogComponent_Type)

extern std::map<void*, PyObject*> *_PyNs3LogComponent_wrapper_registry;
#define PyNs3LogComponent_wrapper_registry (*_PyNs3LogComponent_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject *_PyNs3Mac48Address_Type;
#define PyNs3Mac48Address_Type (*_PyNs3Mac48Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;
#define PyNs3Mac48Address_wrapper_registry (*_PyNs3Mac48Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac8Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac8Address;


extern PyTypeObject *_PyNs3Mac8Address_Type;
#define PyNs3Mac8Address_Type (*_PyNs3Mac8Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac8Address_wrapper_registry;
#define PyNs3Mac8Address_wrapper_registry (*_PyNs3Mac8Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject *_PyNs3NetDeviceContainer_Type;
#define PyNs3NetDeviceContainer_Type (*_PyNs3NetDeviceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;
#define PyNs3NetDeviceContainer_wrapper_registry (*_PyNs3NetDeviceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ParameterLogger *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParameterLogger;


extern PyTypeObject *_PyNs3ParameterLogger_Type;
#define PyNs3ParameterLogger_Type (*_PyNs3ParameterLogger_Type)

extern std::map<void*, PyObject*> *_PyNs3ParameterLogger_wrapper_registry;
#define PyNs3ParameterLogger_wrapper_registry (*_PyNs3ParameterLogger_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapFile *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFile;


extern PyTypeObject *_PyNs3PcapFile_Type;
#define PyNs3PcapFile_Type (*_PyNs3PcapFile_Type)

extern std::map<void*, PyObject*> *_PyNs3PcapFile_wrapper_registry;
#define PyNs3PcapFile_wrapper_registry (*_PyNs3PcapFile_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelper;


extern PyTypeObject *_PyNs3PcapHelper_Type;
#define PyNs3PcapHelper_Type (*_PyNs3PcapHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3PcapHelper_wrapper_registry;
#define PyNs3PcapHelper_wrapper_registry (*_PyNs3PcapHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForDevice;


extern PyTypeObject *_PyNs3PcapHelperForDevice_Type;
#define PyNs3PcapHelperForDevice_Type (*_PyNs3PcapHelperForDevice_Type)

class PyNs3PcapHelperForDevice__PythonHelper : public ns3::PcapHelperForDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3PcapHelperForDevice_wrapper_registry;
#define PyNs3PcapHelperForDevice_wrapper_registry (*_PyNs3PcapHelperForDevice_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PropagationCache< ns3::JakesProcess > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationCache__Ns3JakesProcess;


extern PyTypeObject *_PyNs3PropagationCache__Ns3JakesProcess_Type;
#define PyNs3PropagationCache__Ns3JakesProcess_Type (*_PyNs3PropagationCache__Ns3JakesProcess_Type)

extern std::map<void*, PyObject*> *_PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry;
#define PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry (*_PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::QueueSize *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSize;


extern PyTypeObject *_PyNs3QueueSize_Type;
#define PyNs3QueueSize_Type (*_PyNs3QueueSize_Type)

extern std::map<void*, PyObject*> *_PyNs3QueueSize_wrapper_registry;
#define PyNs3QueueSize_wrapper_registry (*_PyNs3QueueSize_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TimeWithUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeWithUnit;


extern PyTypeObject *_PyNs3TimeWithUnit_Type;
#define PyNs3TimeWithUnit_Type (*_PyNs3TimeWithUnit_Type)

extern std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;
#define PyNs3TimeWithUnit_wrapper_registry (*_PyNs3TimeWithUnit_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< double > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Double;


extern PyTypeObject *_PyNs3TracedValue__Double_Type;
#define PyNs3TracedValue__Double_Type (*_PyNs3TracedValue__Double_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Double_wrapper_registry;
#define PyNs3TracedValue__Double_wrapper_registry (*_PyNs3TracedValue__Double_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< unsigned int > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Unsigned_int;


extern PyTypeObject *_PyNs3TracedValue__Unsigned_int_Type;
#define PyNs3TracedValue__Unsigned_int_Type (*_PyNs3TracedValue__Unsigned_int_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_int_wrapper_registry;
#define PyNs3TracedValue__Unsigned_int_wrapper_registry (*_PyNs3TracedValue__Unsigned_int_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< unsigned long > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Unsigned_long;


extern PyTypeObject *_PyNs3TracedValue__Unsigned_long_Type;
#define PyNs3TracedValue__Unsigned_long_Type (*_PyNs3TracedValue__Unsigned_long_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_long_wrapper_registry;
#define PyNs3TracedValue__Unsigned_long_wrapper_registry (*_PyNs3TracedValue__Unsigned_long_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject *_PyNs3Vector2D_Type;
#define PyNs3Vector2D_Type (*_PyNs3Vector2D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;
#define PyNs3Vector2D_wrapper_registry (*_PyNs3Vector2D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject *_PyNs3Vector3D_Type;
#define PyNs3Vector3D_Type (*_PyNs3Vector3D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;
#define PyNs3Vector3D_wrapper_registry (*_PyNs3Vector3D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumValue5MhzFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumValue5MhzFactory;


extern PyTypeObject *_PyNs3WifiSpectrumValue5MhzFactory_Type;
#define PyNs3WifiSpectrumValue5MhzFactory_Type (*_PyNs3WifiSpectrumValue5MhzFactory_Type)

class PyNs3WifiSpectrumValue5MhzFactory__PythonHelper : public ns3::WifiSpectrumValue5MhzFactory
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiSpectrumValue5MhzFactory__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry;
#define PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry (*_PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumValueHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumValueHelper;


extern PyTypeObject *_PyNs3WifiSpectrumValueHelper_Type;
#define PyNs3WifiSpectrumValueHelper_Type (*_PyNs3WifiSpectrumValueHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiSpectrumValueHelper_wrapper_registry;
#define PyNs3WifiSpectrumValueHelper_wrapper_registry (*_PyNs3WifiSpectrumValueHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapFileWrapper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFileWrapper;


extern PyTypeObject *_PyNs3PcapFileWrapper_Type;
#define PyNs3PcapFileWrapper_Type (*_PyNs3PcapFileWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::PropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationDelayModel;


extern PyTypeObject *_PyNs3PropagationDelayModel_Type;
#define PyNs3PropagationDelayModel_Type (*_PyNs3PropagationDelayModel_Type)

class PyNs3PropagationDelayModel__PythonHelper : public ns3::PropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationLossModel;


extern PyTypeObject *_PyNs3PropagationLossModel_Type;
#define PyNs3PropagationLossModel_Type (*_PyNs3PropagationLossModel_Type)

class PyNs3PropagationLossModel__PythonHelper : public ns3::PropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueBase;


extern PyTypeObject *_PyNs3QueueBase_Type;
#define PyNs3QueueBase_Type (*_PyNs3QueueBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationDelayModel;


extern PyTypeObject *_PyNs3RandomPropagationDelayModel_Type;
#define PyNs3RandomPropagationDelayModel_Type (*_PyNs3RandomPropagationDelayModel_Type)

class PyNs3RandomPropagationDelayModel__PythonHelper : public ns3::RandomPropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationLossModel;


extern PyTypeObject *_PyNs3RandomPropagationLossModel_Type;
#define PyNs3RandomPropagationLossModel_Type (*_PyNs3RandomPropagationLossModel_Type)

class PyNs3RandomPropagationLossModel__PythonHelper : public ns3::RandomPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStream *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStream;


extern PyTypeObject *_PyNs3RandomVariableStream_Type;
#define PyNs3RandomVariableStream_Type (*_PyNs3RandomVariableStream_Type)

class PyNs3RandomVariableStream__PythonHelper : public ns3::RandomVariableStream
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomVariableStream__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RangePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RangePropagationLossModel;


extern PyTypeObject *_PyNs3RangePropagationLossModel_Type;
#define PyNs3RangePropagationLossModel_Type (*_PyNs3RangePropagationLossModel_Type)

class PyNs3RangePropagationLossModel__PythonHelper : public ns3::RangePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RangePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SequentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialRandomVariable;


extern PyTypeObject *_PyNs3SequentialRandomVariable_Type;
#define PyNs3SequentialRandomVariable_Type (*_PyNs3SequentialRandomVariable_Type)

class PyNs3SequentialRandomVariable__PythonHelper : public ns3::SequentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SequentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type;
#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumModel;


extern PyTypeObject *_PyNs3SpectrumModel_Type;
#define PyNs3SpectrumModel_Type (*_PyNs3SpectrumModel_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPhy;


extern PyTypeObject *_PyNs3SpectrumPhy_Type;
#define PyNs3SpectrumPhy_Type (*_PyNs3SpectrumPhy_Type)

class PyNs3SpectrumPhy__PythonHelper : public ns3::SpectrumPhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPropagationLossModel;


extern PyTypeObject *_PyNs3SpectrumPropagationLossModel_Type;
#define PyNs3SpectrumPropagationLossModel_Type (*_PyNs3SpectrumPropagationLossModel_Type)

class PyNs3SpectrumPropagationLossModel__PythonHelper : public ns3::SpectrumPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumSignalParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumSignalParameters;


extern PyTypeObject *_PyNs3SpectrumSignalParameters_Type;
#define PyNs3SpectrumSignalParameters_Type (*_PyNs3SpectrumSignalParameters_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumValue;


extern PyTypeObject *_PyNs3SpectrumValue_Type;
#define PyNs3SpectrumValue_Type (*_PyNs3SpectrumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppPropagationLossModel;


extern PyTypeObject *_PyNs3ThreeGppPropagationLossModel_Type;
#define PyNs3ThreeGppPropagationLossModel_Type (*_PyNs3ThreeGppPropagationLossModel_Type)

class PyNs3ThreeGppPropagationLossModel__PythonHelper : public ns3::ThreeGppPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppRmaPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppRmaPropagationLossModel;


extern PyTypeObject *_PyNs3ThreeGppRmaPropagationLossModel_Type;
#define PyNs3ThreeGppRmaPropagationLossModel_Type (*_PyNs3ThreeGppRmaPropagationLossModel_Type)

class PyNs3ThreeGppRmaPropagationLossModel__PythonHelper : public ns3::ThreeGppRmaPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppRmaPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppUmaPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppUmaPropagationLossModel;


extern PyTypeObject *_PyNs3ThreeGppUmaPropagationLossModel_Type;
#define PyNs3ThreeGppUmaPropagationLossModel_Type (*_PyNs3ThreeGppUmaPropagationLossModel_Type)

class PyNs3ThreeGppUmaPropagationLossModel__PythonHelper : public ns3::ThreeGppUmaPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppUmaPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppUmiStreetCanyonPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppUmiStreetCanyonPropagationLossModel;


extern PyTypeObject *_PyNs3ThreeGppUmiStreetCanyonPropagationLossModel_Type;
#define PyNs3ThreeGppUmiStreetCanyonPropagationLossModel_Type (*_PyNs3ThreeGppUmiStreetCanyonPropagationLossModel_Type)

class PyNs3ThreeGppUmiStreetCanyonPropagationLossModel__PythonHelper : public ns3::ThreeGppUmiStreetCanyonPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppUmiStreetCanyonPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppV2vUrbanPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppV2vUrbanPropagationLossModel;


extern PyTypeObject *_PyNs3ThreeGppV2vUrbanPropagationLossModel_Type;
#define PyNs3ThreeGppV2vUrbanPropagationLossModel_Type (*_PyNs3ThreeGppV2vUrbanPropagationLossModel_Type)

class PyNs3ThreeGppV2vUrbanPropagationLossModel__PythonHelper : public ns3::ThreeGppV2vUrbanPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppV2vUrbanPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeLogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeLogDistancePropagationLossModel;


extern PyTypeObject *_PyNs3ThreeLogDistancePropagationLossModel_Type;
#define PyNs3ThreeLogDistancePropagationLossModel_Type (*_PyNs3ThreeLogDistancePropagationLossModel_Type)

class PyNs3ThreeLogDistancePropagationLossModel__PythonHelper : public ns3::ThreeLogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeLogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::TriangularRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularRandomVariable;


extern PyTypeObject *_PyNs3TriangularRandomVariable_Type;
#define PyNs3TriangularRandomVariable_Type (*_PyNs3TriangularRandomVariable_Type)

class PyNs3TriangularRandomVariable__PythonHelper : public ns3::TriangularRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TriangularRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TwoRayGroundPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TwoRayGroundPropagationLossModel;


extern PyTypeObject *_PyNs3TwoRayGroundPropagationLossModel_Type;
#define PyNs3TwoRayGroundPropagationLossModel_Type (*_PyNs3TwoRayGroundPropagationLossModel_Type)

class PyNs3TwoRayGroundPropagationLossModel__PythonHelper : public ns3::TwoRayGroundPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TwoRayGroundPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UniformRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformRandomVariable;


extern PyTypeObject *_PyNs3UniformRandomVariable_Type;
#define PyNs3UniformRandomVariable_Type (*_PyNs3UniformRandomVariable_Type)

class PyNs3UniformRandomVariable__PythonHelper : public ns3::UniformRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WeibullRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullRandomVariable;


extern PyTypeObject *_PyNs3WeibullRandomVariable_Type;
#define PyNs3WeibullRandomVariable_Type (*_PyNs3WeibullRandomVariable_Type)

class PyNs3WeibullRandomVariable__PythonHelper : public ns3::WeibullRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WeibullRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZetaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaRandomVariable;


extern PyTypeObject *_PyNs3ZetaRandomVariable_Type;
#define PyNs3ZetaRandomVariable_Type (*_PyNs3ZetaRandomVariable_Type)

class PyNs3ZetaRandomVariable__PythonHelper : public ns3::ZetaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZetaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZipfRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfRandomVariable;


extern PyTypeObject *_PyNs3ZipfRandomVariable_Type;
#define PyNs3ZipfRandomVariable_Type (*_PyNs3ZipfRandomVariable_Type)

class PyNs3ZipfRandomVariable__PythonHelper : public ns3::ZipfRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZipfRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AntennaModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AntennaModel;


extern PyTypeObject *_PyNs3AntennaModel_Type;
#define PyNs3AntennaModel_Type (*_PyNs3AntennaModel_Type)

class PyNs3AntennaModel__PythonHelper : public ns3::AntennaModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AntennaModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject *_PyNs3BooleanChecker_Type;
#define PyNs3BooleanChecker_Type (*_PyNs3BooleanChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject *_PyNs3BooleanValue_Type;
#define PyNs3BooleanValue_Type (*_PyNs3BooleanValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject *_PyNs3Channel_Type;
#define PyNs3Channel_Type (*_PyNs3Channel_Type)

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ChannelCondition *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelCondition;


extern PyTypeObject *_PyNs3ChannelCondition_Type;
#define PyNs3ChannelCondition_Type (*_PyNs3ChannelCondition_Type)


typedef struct {
    PyObject_HEAD
    ns3::ChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelConditionModel;


extern PyTypeObject *_PyNs3ChannelConditionModel_Type;
#define PyNs3ChannelConditionModel_Type (*_PyNs3ChannelConditionModel_Type)

class PyNs3ChannelConditionModel__PythonHelper : public ns3::ChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRandomVariable;


extern PyTypeObject *_PyNs3ConstantRandomVariable_Type;
#define PyNs3ConstantRandomVariable_Type (*_PyNs3ConstantRandomVariable_Type)

class PyNs3ConstantRandomVariable__PythonHelper : public ns3::ConstantRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantSpeedPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantSpeedPropagationDelayModel;


extern PyTypeObject *_PyNs3ConstantSpeedPropagationDelayModel_Type;
#define PyNs3ConstantSpeedPropagationDelayModel_Type (*_PyNs3ConstantSpeedPropagationDelayModel_Type)

class PyNs3ConstantSpeedPropagationDelayModel__PythonHelper : public ns3::ConstantSpeedPropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantSpeedPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Cost231PropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Cost231PropagationLossModel;


extern PyTypeObject *_PyNs3Cost231PropagationLossModel_Type;
#define PyNs3Cost231PropagationLossModel_Type (*_PyNs3Cost231PropagationLossModel_Type)

class PyNs3Cost231PropagationLossModel__PythonHelper : public ns3::Cost231PropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Cost231PropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataRateChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateChecker;


extern PyTypeObject *_PyNs3DataRateChecker_Type;
#define PyNs3DataRateChecker_Type (*_PyNs3DataRateChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataRateValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateValue;


extern PyTypeObject *_PyNs3DataRateValue_Type;
#define PyNs3DataRateValue_Type (*_PyNs3DataRateValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DeterministicRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicRandomVariable;


extern PyTypeObject *_PyNs3DeterministicRandomVariable_Type;
#define PyNs3DeterministicRandomVariable_Type (*_PyNs3DeterministicRandomVariable_Type)

class PyNs3DeterministicRandomVariable__PythonHelper : public ns3::DeterministicRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeterministicRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DeviceEnergyModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeviceEnergyModel;


extern PyTypeObject *_PyNs3DeviceEnergyModel_Type;
#define PyNs3DeviceEnergyModel_Type (*_PyNs3DeviceEnergyModel_Type)

class PyNs3DeviceEnergyModel__PythonHelper : public ns3::DeviceEnergyModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeviceEnergyModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject *_PyNs3DoubleValue_Type;
#define PyNs3DoubleValue_Type (*_PyNs3DoubleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalRandomVariable;


extern PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;
#define PyNs3EmpiricalRandomVariable_Type (*_PyNs3EmpiricalRandomVariable_Type)

class PyNs3EmpiricalRandomVariable__PythonHelper : public ns3::EmpiricalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmpiricalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeAccessor;


extern PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;
#define PyNs3EmptyAttributeAccessor_Type (*_PyNs3EmptyAttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeChecker;


extern PyTypeObject *_PyNs3EmptyAttributeChecker_Type;
#define PyNs3EmptyAttributeChecker_Type (*_PyNs3EmptyAttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnergyHarvester *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnergyHarvester;


extern PyTypeObject *_PyNs3EnergyHarvester_Type;
#define PyNs3EnergyHarvester_Type (*_PyNs3EnergyHarvester_Type)

class PyNs3EnergyHarvester__PythonHelper : public ns3::EnergyHarvester
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnergyHarvester__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EnergySource *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnergySource;


extern PyTypeObject *_PyNs3EnergySource_Type;
#define PyNs3EnergySource_Type (*_PyNs3EnergySource_Type)

class PyNs3EnergySource__PythonHelper : public ns3::EnergySource
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnergySource__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EnergySourceContainer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnergySourceContainer;


extern PyTypeObject *_PyNs3EnergySourceContainer_Type;
#define PyNs3EnergySourceContainer_Type (*_PyNs3EnergySourceContainer_Type)

class PyNs3EnergySourceContainer__PythonHelper : public ns3::EnergySourceContainer
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnergySourceContainer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject *_PyNs3EnumChecker_Type;
#define PyNs3EnumChecker_Type (*_PyNs3EnumChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject *_PyNs3EnumValue_Type;
#define PyNs3EnumValue_Type (*_PyNs3EnumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ErlangRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangRandomVariable;


extern PyTypeObject *_PyNs3ErlangRandomVariable_Type;
#define PyNs3ErlangRandomVariable_Type (*_PyNs3ErlangRandomVariable_Type)

class PyNs3ErlangRandomVariable__PythonHelper : public ns3::ErlangRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErlangRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErrorModel;


extern PyTypeObject *_PyNs3ErrorModel_Type;
#define PyNs3ErrorModel_Type (*_PyNs3ErrorModel_Type)

class PyNs3ErrorModel__PythonHelper : public ns3::ErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialRandomVariable;


extern PyTypeObject *_PyNs3ExponentialRandomVariable_Type;
#define PyNs3ExponentialRandomVariable_Type (*_PyNs3ExponentialRandomVariable_Type)

class PyNs3ExponentialRandomVariable__PythonHelper : public ns3::ExponentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ExponentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::FixedRssLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FixedRssLossModel;


extern PyTypeObject *_PyNs3FixedRssLossModel_Type;
#define PyNs3FixedRssLossModel_Type (*_PyNs3FixedRssLossModel_Type)

class PyNs3FixedRssLossModel__PythonHelper : public ns3::FixedRssLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FixedRssLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::FriisPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FriisPropagationLossModel;


extern PyTypeObject *_PyNs3FriisPropagationLossModel_Type;
#define PyNs3FriisPropagationLossModel_Type (*_PyNs3FriisPropagationLossModel_Type)

class PyNs3FriisPropagationLossModel__PythonHelper : public ns3::FriisPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FriisPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::GammaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaRandomVariable;


extern PyTypeObject *_PyNs3GammaRandomVariable_Type;
#define PyNs3GammaRandomVariable_Type (*_PyNs3GammaRandomVariable_Type)

class PyNs3GammaRandomVariable__PythonHelper : public ns3::GammaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GammaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject *_PyNs3IntegerValue_Type;
#define PyNs3IntegerValue_Type (*_PyNs3IntegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ItuR1411LosPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ItuR1411LosPropagationLossModel;


extern PyTypeObject *_PyNs3ItuR1411LosPropagationLossModel_Type;
#define PyNs3ItuR1411LosPropagationLossModel_Type (*_PyNs3ItuR1411LosPropagationLossModel_Type)

class PyNs3ItuR1411LosPropagationLossModel__PythonHelper : public ns3::ItuR1411LosPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ItuR1411LosPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ItuR1411NlosOverRooftopPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ItuR1411NlosOverRooftopPropagationLossModel;


extern PyTypeObject *_PyNs3ItuR1411NlosOverRooftopPropagationLossModel_Type;
#define PyNs3ItuR1411NlosOverRooftopPropagationLossModel_Type (*_PyNs3ItuR1411NlosOverRooftopPropagationLossModel_Type)

class PyNs3ItuR1411NlosOverRooftopPropagationLossModel__PythonHelper : public ns3::ItuR1411NlosOverRooftopPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ItuR1411NlosOverRooftopPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::JakesProcess *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3JakesProcess;


extern PyTypeObject *_PyNs3JakesProcess_Type;
#define PyNs3JakesProcess_Type (*_PyNs3JakesProcess_Type)

class PyNs3JakesProcess__PythonHelper : public ns3::JakesProcess
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3JakesProcess__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::JakesPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3JakesPropagationLossModel;


extern PyTypeObject *_PyNs3JakesPropagationLossModel_Type;
#define PyNs3JakesPropagationLossModel_Type (*_PyNs3JakesPropagationLossModel_Type)

class PyNs3JakesPropagationLossModel__PythonHelper : public ns3::JakesPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3JakesPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Kun2600MhzPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Kun2600MhzPropagationLossModel;


extern PyTypeObject *_PyNs3Kun2600MhzPropagationLossModel_Type;
#define PyNs3Kun2600MhzPropagationLossModel_Type (*_PyNs3Kun2600MhzPropagationLossModel_Type)

class PyNs3Kun2600MhzPropagationLossModel__PythonHelper : public ns3::Kun2600MhzPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Kun2600MhzPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ListErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ListErrorModel;


extern PyTypeObject *_PyNs3ListErrorModel_Type;
#define PyNs3ListErrorModel_Type (*_PyNs3ListErrorModel_Type)

class PyNs3ListErrorModel__PythonHelper : public ns3::ListErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ListErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogDistancePropagationLossModel;


extern PyTypeObject *_PyNs3LogDistancePropagationLossModel_Type;
#define PyNs3LogDistancePropagationLossModel_Type (*_PyNs3LogDistancePropagationLossModel_Type)

class PyNs3LogDistancePropagationLossModel__PythonHelper : public ns3::LogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LogNormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalRandomVariable;


extern PyTypeObject *_PyNs3LogNormalRandomVariable_Type;
#define PyNs3LogNormalRandomVariable_Type (*_PyNs3LogNormalRandomVariable_Type)

class PyNs3LogNormalRandomVariable__PythonHelper : public ns3::LogNormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogNormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject *_PyNs3Mac48AddressChecker_Type;
#define PyNs3Mac48AddressChecker_Type (*_PyNs3Mac48AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject *_PyNs3Mac48AddressValue_Type;
#define PyNs3Mac48AddressValue_Type (*_PyNs3Mac48AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::MatrixPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MatrixPropagationLossModel;


extern PyTypeObject *_PyNs3MatrixPropagationLossModel_Type;
#define PyNs3MatrixPropagationLossModel_Type (*_PyNs3MatrixPropagationLossModel_Type)

class PyNs3MatrixPropagationLossModel__PythonHelper : public ns3::MatrixPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MatrixPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::MobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityModel;


extern PyTypeObject *_PyNs3MobilityModel_Type;
#define PyNs3MobilityModel_Type (*_PyNs3MobilityModel_Type)

class PyNs3MobilityModel__PythonHelper : public ns3::MobilityModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NakagamiPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NakagamiPropagationLossModel;


extern PyTypeObject *_PyNs3NakagamiPropagationLossModel_Type;
#define PyNs3NakagamiPropagationLossModel_Type (*_PyNs3NakagamiPropagationLossModel_Type)

class PyNs3NakagamiPropagationLossModel__PythonHelper : public ns3::NakagamiPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NakagamiPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)

class PyNs3NetDevice__PythonHelper : public ns3::NetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NeverLosChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NeverLosChannelConditionModel;


extern PyTypeObject *_PyNs3NeverLosChannelConditionModel_Type;
#define PyNs3NeverLosChannelConditionModel_Type (*_PyNs3NeverLosChannelConditionModel_Type)

class PyNs3NeverLosChannelConditionModel__PythonHelper : public ns3::NeverLosChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NeverLosChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NeverLosVehicleChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NeverLosVehicleChannelConditionModel;


extern PyTypeObject *_PyNs3NeverLosVehicleChannelConditionModel_Type;
#define PyNs3NeverLosVehicleChannelConditionModel_Type (*_PyNs3NeverLosVehicleChannelConditionModel_Type)

class PyNs3NeverLosVehicleChannelConditionModel__PythonHelper : public ns3::NeverLosVehicleChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NeverLosVehicleChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalRandomVariable;


extern PyTypeObject *_PyNs3NormalRandomVariable_Type;
#define PyNs3NormalRandomVariable_Type (*_PyNs3NormalRandomVariable_Type)

class PyNs3NormalRandomVariable__PythonHelper : public ns3::NormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::OkumuraHataPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OkumuraHataPropagationLossModel;


extern PyTypeObject *_PyNs3OkumuraHataPropagationLossModel_Type;
#define PyNs3OkumuraHataPropagationLossModel_Type (*_PyNs3OkumuraHataPropagationLossModel_Type)

class PyNs3OkumuraHataPropagationLossModel__PythonHelper : public ns3::OkumuraHataPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OkumuraHataPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::OutputStreamWrapper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OutputStreamWrapper;


extern PyTypeObject *_PyNs3OutputStreamWrapper_Type;
#define PyNs3OutputStreamWrapper_Type (*_PyNs3OutputStreamWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::ParetoRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoRandomVariable;


extern PyTypeObject *_PyNs3ParetoRandomVariable_Type;
#define PyNs3ParetoRandomVariable_Type (*_PyNs3ParetoRandomVariable_Type)

class PyNs3ParetoRandomVariable__PythonHelper : public ns3::ParetoRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ParetoRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Queue< ns3::Packet > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Queue__Ns3Packet;


extern PyTypeObject *_PyNs3Queue__Ns3Packet_Type;
#define PyNs3Queue__Ns3Packet_Type (*_PyNs3Queue__Ns3Packet_Type)

class PyNs3Queue__Ns3Packet__PythonHelper : public ns3::Queue< ns3::Packet >
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Queue__Ns3Packet__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Queue< ns3::QueueDiscItem > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Queue__Ns3QueueDiscItem;


extern PyTypeObject *_PyNs3Queue__Ns3QueueDiscItem_Type;
#define PyNs3Queue__Ns3QueueDiscItem_Type (*_PyNs3Queue__Ns3QueueDiscItem_Type)

class PyNs3Queue__Ns3QueueDiscItem__PythonHelper : public ns3::Queue< ns3::QueueDiscItem >
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Queue__Ns3QueueDiscItem__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueItem;


extern PyTypeObject *_PyNs3QueueItem_Type;
#define PyNs3QueueItem_Type (*_PyNs3QueueItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueSizeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSizeChecker;


extern PyTypeObject *_PyNs3QueueSizeChecker_Type;
#define PyNs3QueueSizeChecker_Type (*_PyNs3QueueSizeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueSizeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSizeValue;


extern PyTypeObject *_PyNs3QueueSizeValue_Type;
#define PyNs3QueueSizeValue_Type (*_PyNs3QueueSizeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::RateErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RateErrorModel;


extern PyTypeObject *_PyNs3RateErrorModel_Type;
#define PyNs3RateErrorModel_Type (*_PyNs3RateErrorModel_Type)

class PyNs3RateErrorModel__PythonHelper : public ns3::RateErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RateErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ReceiveListErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ReceiveListErrorModel;


extern PyTypeObject *_PyNs3ReceiveListErrorModel_Type;
#define PyNs3ReceiveListErrorModel_Type (*_PyNs3ReceiveListErrorModel_Type)

class PyNs3ReceiveListErrorModel__PythonHelper : public ns3::ReceiveListErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ReceiveListErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumChannel;


extern PyTypeObject *_PyNs3SpectrumChannel_Type;
#define PyNs3SpectrumChannel_Type (*_PyNs3SpectrumChannel_Type)

class PyNs3SpectrumChannel__PythonHelper : public ns3::SpectrumChannel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppChannelConditionModel;


extern PyTypeObject *_PyNs3ThreeGppChannelConditionModel_Type;
#define PyNs3ThreeGppChannelConditionModel_Type (*_PyNs3ThreeGppChannelConditionModel_Type)

class PyNs3ThreeGppChannelConditionModel__PythonHelper : public ns3::ThreeGppChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppIndoorMixedOfficeChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppIndoorMixedOfficeChannelConditionModel;


extern PyTypeObject *_PyNs3ThreeGppIndoorMixedOfficeChannelConditionModel_Type;
#define PyNs3ThreeGppIndoorMixedOfficeChannelConditionModel_Type (*_PyNs3ThreeGppIndoorMixedOfficeChannelConditionModel_Type)

class PyNs3ThreeGppIndoorMixedOfficeChannelConditionModel__PythonHelper : public ns3::ThreeGppIndoorMixedOfficeChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppIndoorMixedOfficeChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppIndoorOfficePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppIndoorOfficePropagationLossModel;


extern PyTypeObject *_PyNs3ThreeGppIndoorOfficePropagationLossModel_Type;
#define PyNs3ThreeGppIndoorOfficePropagationLossModel_Type (*_PyNs3ThreeGppIndoorOfficePropagationLossModel_Type)

class PyNs3ThreeGppIndoorOfficePropagationLossModel__PythonHelper : public ns3::ThreeGppIndoorOfficePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppIndoorOfficePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppIndoorOpenOfficeChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppIndoorOpenOfficeChannelConditionModel;


extern PyTypeObject *_PyNs3ThreeGppIndoorOpenOfficeChannelConditionModel_Type;
#define PyNs3ThreeGppIndoorOpenOfficeChannelConditionModel_Type (*_PyNs3ThreeGppIndoorOpenOfficeChannelConditionModel_Type)

class PyNs3ThreeGppIndoorOpenOfficeChannelConditionModel__PythonHelper : public ns3::ThreeGppIndoorOpenOfficeChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppIndoorOpenOfficeChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppRmaChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppRmaChannelConditionModel;


extern PyTypeObject *_PyNs3ThreeGppRmaChannelConditionModel_Type;
#define PyNs3ThreeGppRmaChannelConditionModel_Type (*_PyNs3ThreeGppRmaChannelConditionModel_Type)

class PyNs3ThreeGppRmaChannelConditionModel__PythonHelper : public ns3::ThreeGppRmaChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppRmaChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppUmaChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppUmaChannelConditionModel;


extern PyTypeObject *_PyNs3ThreeGppUmaChannelConditionModel_Type;
#define PyNs3ThreeGppUmaChannelConditionModel_Type (*_PyNs3ThreeGppUmaChannelConditionModel_Type)

class PyNs3ThreeGppUmaChannelConditionModel__PythonHelper : public ns3::ThreeGppUmaChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppUmaChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppUmiStreetCanyonChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppUmiStreetCanyonChannelConditionModel;


extern PyTypeObject *_PyNs3ThreeGppUmiStreetCanyonChannelConditionModel_Type;
#define PyNs3ThreeGppUmiStreetCanyonChannelConditionModel_Type (*_PyNs3ThreeGppUmiStreetCanyonChannelConditionModel_Type)

class PyNs3ThreeGppUmiStreetCanyonChannelConditionModel__PythonHelper : public ns3::ThreeGppUmiStreetCanyonChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppUmiStreetCanyonChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ThreeGppV2vHighwayPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeGppV2vHighwayPropagationLossModel;


extern PyTypeObject *_PyNs3ThreeGppV2vHighwayPropagationLossModel_Type;
#define PyNs3ThreeGppV2vHighwayPropagationLossModel_Type (*_PyNs3ThreeGppV2vHighwayPropagationLossModel_Type)

class PyNs3ThreeGppV2vHighwayPropagationLossModel__PythonHelper : public ns3::ThreeGppV2vHighwayPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeGppV2vHighwayPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject *_PyNs3Vector2DChecker_Type;
#define PyNs3Vector2DChecker_Type (*_PyNs3Vector2DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject *_PyNs3Vector2DValue_Type;
#define PyNs3Vector2DValue_Type (*_PyNs3Vector2DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject *_PyNs3Vector3DChecker_Type;
#define PyNs3Vector3DChecker_Type (*_PyNs3Vector3DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject *_PyNs3Vector3DValue_Type;
#define PyNs3Vector3DValue_Type (*_PyNs3Vector3DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AlwaysLosChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AlwaysLosChannelConditionModel;


extern PyTypeObject *_PyNs3AlwaysLosChannelConditionModel_Type;
#define PyNs3AlwaysLosChannelConditionModel_Type (*_PyNs3AlwaysLosChannelConditionModel_Type)

class PyNs3AlwaysLosChannelConditionModel__PythonHelper : public ns3::AlwaysLosChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AlwaysLosChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::BinaryErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BinaryErrorModel;


extern PyTypeObject *_PyNs3BinaryErrorModel_Type;
#define PyNs3BinaryErrorModel_Type (*_PyNs3BinaryErrorModel_Type)

class PyNs3BinaryErrorModel__PythonHelper : public ns3::BinaryErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BinaryErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::BurstErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BurstErrorModel;


extern PyTypeObject *_PyNs3BurstErrorModel_Type;
#define PyNs3BurstErrorModel_Type (*_PyNs3BurstErrorModel_Type)

class PyNs3BurstErrorModel__PythonHelper : public ns3::BurstErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BurstErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, bool, unsigned int, double, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Bool_Unsigned_int_Double_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Bool_Unsigned_int_Double_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Bool_Unsigned_int_Double_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Bool_Unsigned_int_Double_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3WifiMacHeader___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, double, double, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Double_Double_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Double_Double_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Double_Double_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Double_Double_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::DataRate, ns3::DataRate, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3DataRate_Ns3DataRate_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3DataRate_Ns3DataRate_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3DataRate_Ns3DataRate_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3DataRate_Ns3DataRate_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Mac48Address_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, std::map<std::pair<unsigned int, unsigned int>, double, std::less<std::pair<unsigned int, unsigned int> >, std::allocator<std::pair<const std::pair<unsigned int, unsigned int>, double> > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::QueueDiscItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiMacQueueItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::WifiPsdu>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned char, double, bool, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_char_Double_Bool_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_char_Double_Bool_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_char_Double_Bool_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_char_Double_Bool_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::ProbabilisticV2vHighwayChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ProbabilisticV2vHighwayChannelConditionModel;


extern PyTypeObject *_PyNs3ProbabilisticV2vHighwayChannelConditionModel_Type;
#define PyNs3ProbabilisticV2vHighwayChannelConditionModel_Type (*_PyNs3ProbabilisticV2vHighwayChannelConditionModel_Type)

class PyNs3ProbabilisticV2vHighwayChannelConditionModel__PythonHelper : public ns3::ProbabilisticV2vHighwayChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ProbabilisticV2vHighwayChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ProbabilisticV2vUrbanChannelConditionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ProbabilisticV2vUrbanChannelConditionModel;


extern PyTypeObject *_PyNs3ProbabilisticV2vUrbanChannelConditionModel_Type;
#define PyNs3ProbabilisticV2vUrbanChannelConditionModel_Type (*_PyNs3ProbabilisticV2vUrbanChannelConditionModel_Type)

class PyNs3ProbabilisticV2vUrbanChannelConditionModel__PythonHelper : public ns3::ProbabilisticV2vUrbanChannelConditionModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ProbabilisticV2vUrbanChannelConditionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueDiscItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDiscItem;


extern PyTypeObject *_PyNs3QueueDiscItem_Type;
#define PyNs3QueueDiscItem_Type (*_PyNs3QueueDiscItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::ApInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ApInfo;


extern PyTypeObject PyNs3ApInfo_Type;

extern std::map<void*, PyObject*> PyNs3ApInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AthstatsHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AthstatsHelper;


extern PyTypeObject PyNs3AthstatsHelper_Type;

extern std::map<void*, PyObject*> PyNs3AthstatsHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Bar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Bar;


extern PyTypeObject PyNs3Bar_Type;

extern std::map<void*, PyObject*> PyNs3Bar_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BlockAckAgreement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckAgreement;


extern PyTypeObject PyNs3BlockAckAgreement_Type;

extern std::map<void*, PyObject*> PyNs3BlockAckAgreement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BlockAckCache *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckCache;


extern PyTypeObject PyNs3BlockAckCache_Type;

extern std::map<void*, PyObject*> PyNs3BlockAckCache_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BlockAckWindow *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckWindow;


extern PyTypeObject PyNs3BlockAckWindow_Type;

extern std::map<void*, PyObject*> PyNs3BlockAckWindow_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CapabilityInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CapabilityInformation;


extern PyTypeObject PyNs3CapabilityInformation_Type;

extern std::map<void*, PyObject*> PyNs3CapabilityInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Event > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3Event;


extern PyTypeObject PyNs3DefaultDeleter__Ns3Event_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3Event_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::MacRxMiddle > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MacRxMiddle;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MacRxMiddle_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MacRxMiddle_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::MacTxMiddle > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MacTxMiddle;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MacTxMiddle_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MacTxMiddle_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::QosBlockedDestinations > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3QosBlockedDestinations;


extern PyTypeObject PyNs3DefaultDeleter__Ns3QosBlockedDestinations_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3QosBlockedDestinations_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiInformationElement > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiInformationElement;


extern PyTypeObject PyNs3DefaultDeleter__Ns3WifiInformationElement_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3WifiInformationElement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiMacQueueItem > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiMacQueueItem;


extern PyTypeObject PyNs3DefaultDeleter__Ns3WifiMacQueueItem_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3WifiMacQueueItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiPpdu > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiPpdu;


extern PyTypeObject PyNs3DefaultDeleter__Ns3WifiPpdu_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3WifiPpdu_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiPsdu > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiPsdu;


extern PyTypeObject PyNs3DefaultDeleter__Ns3WifiPsdu_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3WifiPsdu_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DsssErrorRateModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsssErrorRateModel;


extern PyTypeObject PyNs3DsssErrorRateModel_Type;

extern std::map<void*, PyObject*> PyNs3DsssErrorRateModel_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GroupInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GroupInfo;


extern PyTypeObject PyNs3GroupInfo_Type;

extern std::map<void*, PyObject*> PyNs3GroupInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HeMuUserInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeMuUserInfo;


extern PyTypeObject PyNs3HeMuUserInfo_Type;

extern std::map<void*, PyObject*> PyNs3HeMuUserInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HePreambleParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HePreambleParameters;


extern PyTypeObject PyNs3HePreambleParameters_Type;

extern std::map<void*, PyObject*> PyNs3HePreambleParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HeRu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeRu;


extern PyTypeObject PyNs3HeRu_Type;

extern std::map<void*, PyObject*> PyNs3HeRu_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HeRu::RuSpec *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeRuRuSpec;


extern PyTypeObject PyNs3HeRuRuSpec_Type;

extern std::map<void*, PyObject*> PyNs3HeRuRuSpec_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HtRateInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HtRateInfo;


extern PyTypeObject PyNs3HtRateInfo_Type;

extern std::map<void*, PyObject*> PyNs3HtRateInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelper;


extern PyTypeObject PyNs3InterferenceHelper_Type;

extern std::map<void*, PyObject*> PyNs3InterferenceHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper::SnrPer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelperSnrPer;


extern PyTypeObject PyNs3InterferenceHelperSnrPer_Type;

extern std::map<void*, PyObject*> PyNs3InterferenceHelperSnrPer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowTransmissionParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowTransmissionParameters;


extern PyTypeObject PyNs3MacLowTransmissionParameters_Type;

extern std::map<void*, PyObject*> PyNs3MacLowTransmissionParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::McsGroup *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3McsGroup;


extern PyTypeObject PyNs3McsGroup_Type;

extern std::map<void*, PyObject*> PyNs3McsGroup_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MpduInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MpduInfo;


extern PyTypeObject PyNs3MpduInfo_Type;

extern std::map<void*, PyObject*> PyNs3MpduInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OriginatorBlockAckAgreement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OriginatorBlockAckAgreement;


extern PyTypeObject PyNs3OriginatorBlockAckAgreement_Type;


typedef struct {
    PyObject_HEAD
    ns3::RateInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RateInfo;


extern PyTypeObject PyNs3RateInfo_Type;

extern std::map<void*, PyObject*> PyNs3RateInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SignalNoiseDbm *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SignalNoiseDbm;


extern PyTypeObject PyNs3SignalNoiseDbm_Type;

extern std::map<void*, PyObject*> PyNs3SignalNoiseDbm_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::StatusCode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StatusCode;


extern PyTypeObject PyNs3StatusCode_Type;

extern std::map<void*, PyObject*> PyNs3StatusCode_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiHelper;


extern PyTypeObject PyNs3WifiHelper_Type;

class PyNs3WifiHelper__PythonHelper : public ns3::WifiHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiHelper__PythonHelper(ns3::WifiHelper const & arg0)
        : ns3::WifiHelper(arg0), m_pyself(NULL)
        {}

    PyNs3WifiHelper__PythonHelper()
        : ns3::WifiHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void SetStandard(ns3::WifiStandard standard);

    virtual void SetStandard(ns3::WifiPhyStandard standard);
};

extern std::map<void*, PyObject*> PyNs3WifiHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacHelper;


extern PyTypeObject PyNs3WifiMacHelper_Type;

class PyNs3WifiMacHelper__PythonHelper : public ns3::WifiMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiMacHelper__PythonHelper(ns3::WifiMacHelper const & arg0)
        : ns3::WifiMacHelper(arg0), m_pyself(NULL)
        {}

    PyNs3WifiMacHelper__PythonHelper()
        : ns3::WifiMacHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create(ns3::Ptr< ns3::NetDevice > device) const;
};

extern std::map<void*, PyObject*> PyNs3WifiMacHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiMode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMode;


extern PyTypeObject PyNs3WifiMode_Type;

extern std::map<void*, PyObject*> PyNs3WifiMode_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiModeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeFactory;


extern PyTypeObject PyNs3WifiModeFactory_Type;

extern std::map<void*, PyObject*> PyNs3WifiModeFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyHelper;


extern PyTypeObject PyNs3WifiPhyHelper_Type;

class PyNs3WifiPhyHelper__PythonHelper : public ns3::WifiPhyHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiPhyHelper__PythonHelper(ns3::WifiPhyHelper const & arg0)
        : ns3::WifiPhyHelper(arg0), m_pyself(NULL)
        {}

    PyNs3WifiPhyHelper__PythonHelper()
        : ns3::WifiPhyHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_PcapSniffRxEvent(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs);
    inline void PcapSniffRxEvent__parent_caller(ns3::Ptr< ns3::PcapFileWrapper > file, ns3::Ptr< ns3::Packet const > packet, uint16_t channelFreqMhz, ns3::WifiTxVector txVector, ns3::MpduInfo aMpdu, ns3::SignalNoiseDbm signalNoise, uint16_t staId)
    { ns3::WifiPhyHelper::PcapSniffRxEvent(file, packet, channelFreqMhz, txVector, aMpdu, signalNoise, staId); }

    static PyObject * _wrap_PcapSniffTxEvent(PyNs3WifiPhyHelper *self, PyObject *args, PyObject *kwargs);
    inline void PcapSniffTxEvent__parent_caller(ns3::Ptr< ns3::PcapFileWrapper > file, ns3::Ptr< ns3::Packet const > packet, uint16_t channelFreqMhz, ns3::WifiTxVector txVector, ns3::MpduInfo aMpdu, uint16_t staId)
    { ns3::WifiPhyHelper::PcapSniffTxEvent(file, packet, channelFreqMhz, txVector, aMpdu, staId); }

    virtual ns3::Ptr< ns3::WifiPhy > Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::NetDevice > device) const;

    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::WifiPhyListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyListener;


extern PyTypeObject PyNs3WifiPhyListener_Type;

class PyNs3WifiPhyListener__PythonHelper : public ns3::WifiPhyListener
{
public:
    PyObject *m_pyself;
    PyNs3WifiPhyListener__PythonHelper()
        : ns3::WifiPhyListener(), m_pyself(NULL)
        {}

    PyNs3WifiPhyListener__PythonHelper(ns3::WifiPhyListener const & arg0)
        : ns3::WifiPhyListener(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhyListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void NotifyMaybeCcaBusyStart(ns3::Time duration);

    virtual void NotifyOff();

    virtual void NotifyOn();

    virtual void NotifyRxEndError();

    virtual void NotifyRxEndOk();

    virtual void NotifyRxStart(ns3::Time duration);

    virtual void NotifySleep();

    virtual void NotifySwitchingStart(ns3::Time duration);

    virtual void NotifyTxStart(ns3::Time duration, double txPowerDbm);

    virtual void NotifyWakeup();
};

extern std::map<void*, PyObject*> PyNs3WifiPhyListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRadioEnergyModelHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRadioEnergyModelHelper;


extern PyTypeObject PyNs3WifiRadioEnergyModelHelper_Type;

class PyNs3WifiRadioEnergyModelHelper__PythonHelper : public ns3::WifiRadioEnergyModelHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiRadioEnergyModelHelper__PythonHelper(ns3::WifiRadioEnergyModelHelper const & arg0)
        : ns3::WifiRadioEnergyModelHelper(arg0), m_pyself(NULL)
        {}

    PyNs3WifiRadioEnergyModelHelper__PythonHelper()
        : ns3::WifiRadioEnergyModelHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiRadioEnergyModelHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::DeviceEnergyModel > DoInstall(ns3::Ptr< ns3::NetDevice > device, ns3::Ptr< ns3::EnergySource > source) const;
};


typedef struct {
    PyObject_HEAD
    ns3::WifiRadioEnergyModelPhyListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRadioEnergyModelPhyListener;


extern PyTypeObject PyNs3WifiRadioEnergyModelPhyListener_Type;

class PyNs3WifiRadioEnergyModelPhyListener__PythonHelper : public ns3::WifiRadioEnergyModelPhyListener
{
public:
    PyObject *m_pyself;
    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper(ns3::WifiRadioEnergyModelPhyListener const & arg0)
        : ns3::WifiRadioEnergyModelPhyListener(arg0), m_pyself(NULL)
        {}

    PyNs3WifiRadioEnergyModelPhyListener__PythonHelper()
        : ns3::WifiRadioEnergyModelPhyListener(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiRadioEnergyModelPhyListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void NotifyMaybeCcaBusyStart(ns3::Time duration);

    virtual void NotifyOff();

    virtual void NotifyOn();

    virtual void NotifyRxEndError();

    virtual void NotifyRxEndOk();

    virtual void NotifyRxStart(ns3::Time duration);

    virtual void NotifySleep();

    virtual void NotifySwitchingStart(ns3::Time duration);

    virtual void NotifyTxStart(ns3::Time duration, double txPowerDbm);

    virtual void NotifyWakeup();
};


typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStation;


extern PyTypeObject PyNs3WifiRemoteStation_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationInfo;


extern PyTypeObject PyNs3WifiRemoteStationInfo_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStationInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationState *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationState;


extern PyTypeObject PyNs3WifiRemoteStationState_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStationState_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRraaThresholds *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRraaThresholds;


extern PyTypeObject PyNs3WifiRraaThresholds_Type;

extern std::map<void*, PyObject*> PyNs3WifiRraaThresholds_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRrpaaThresholds *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRrpaaThresholds;


extern PyTypeObject PyNs3WifiRrpaaThresholds_Type;

extern std::map<void*, PyObject*> PyNs3WifiRrpaaThresholds_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiStandardInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiStandardInfo;


extern PyTypeObject PyNs3WifiStandardInfo_Type;

extern std::map<void*, PyObject*> PyNs3WifiStandardInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiTxVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiTxVector;


extern PyTypeObject PyNs3WifiTxVector_Type;

extern std::map<void*, PyObject*> PyNs3WifiTxVector_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::YansWifiChannelHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiChannelHelper;


extern PyTypeObject PyNs3YansWifiChannelHelper_Type;

extern std::map<void*, PyObject*> PyNs3YansWifiChannelHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::YansWifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiPhyHelper;


extern PyTypeObject PyNs3YansWifiPhyHelper_Type;

class PyNs3YansWifiPhyHelper__PythonHelper : public ns3::YansWifiPhyHelper
{
public:
    PyObject *m_pyself;
    PyNs3YansWifiPhyHelper__PythonHelper(ns3::YansWifiPhyHelper const & arg0)
        : ns3::YansWifiPhyHelper(arg0), m_pyself(NULL)
        {}

    PyNs3YansWifiPhyHelper__PythonHelper()
        : ns3::YansWifiPhyHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiPhy > Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::NetDevice > device) const;

    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::AmpduTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmpduTag;


extern PyTypeObject PyNs3AmpduTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::HtSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HtSigHeader;


extern PyTypeObject PyNs3HtSigHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::LSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LSigHeader;


extern PyTypeObject PyNs3LSigHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtAddBaRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAddBaRequestHeader;


extern PyTypeObject PyNs3MgtAddBaRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtAddBaResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAddBaResponseHeader;


extern PyTypeObject PyNs3MgtAddBaResponseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtAssocRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAssocRequestHeader;


extern PyTypeObject PyNs3MgtAssocRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtAssocResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAssocResponseHeader;


extern PyTypeObject PyNs3MgtAssocResponseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtDelBaHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtDelBaHeader;


extern PyTypeObject PyNs3MgtDelBaHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtProbeRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtProbeRequestHeader;


extern PyTypeObject PyNs3MgtProbeRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtProbeResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtProbeResponseHeader;


extern PyTypeObject PyNs3MgtProbeResponseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtReassocRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtReassocRequestHeader;


extern PyTypeObject PyNs3MgtReassocRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MinstrelWifiRemoteStation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinstrelWifiRemoteStation;


extern PyTypeObject PyNs3MinstrelWifiRemoteStation_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObssPdAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObssPdAlgorithm;


extern PyTypeObject PyNs3ObssPdAlgorithm_Type;

class PyNs3ObssPdAlgorithm__PythonHelper : public ns3::ObssPdAlgorithm
{
public:
    PyObject *m_pyself;
    PyNs3ObssPdAlgorithm__PythonHelper()
        : ns3::ObssPdAlgorithm(), m_pyself(NULL)
        {}

    PyNs3ObssPdAlgorithm__PythonHelper(ns3::ObssPdAlgorithm const & arg0)
        : ns3::ObssPdAlgorithm(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObssPdAlgorithm__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3ObssPdAlgorithm *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::ObssPdAlgorithm::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3ObssPdAlgorithm *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ObssPdAlgorithm *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ObssPdAlgorithm *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void ReceiveHeSig(ns3::HePreambleParameters params);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ObssPdAlgorithm__PythonHelper")
        .SetParent< ns3::ObssPdAlgorithm > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ObssPdAlgorithm__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PreambleDetectionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PreambleDetectionModel;


extern PyTypeObject PyNs3PreambleDetectionModel_Type;

class PyNs3PreambleDetectionModel__PythonHelper : public ns3::PreambleDetectionModel
{
public:
    PyObject *m_pyself;
    PyNs3PreambleDetectionModel__PythonHelper()
        : ns3::PreambleDetectionModel(), m_pyself(NULL)
        {}

    PyNs3PreambleDetectionModel__PythonHelper(ns3::PreambleDetectionModel const & arg0)
        : ns3::PreambleDetectionModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PreambleDetectionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3PreambleDetectionModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3PreambleDetectionModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PreambleDetectionModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PreambleDetectionModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual bool IsPreambleDetected(double rssi, double snr, double channelWidth) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PreambleDetectionModel__PythonHelper")
        .SetParent< ns3::PreambleDetectionModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PreambleDetectionModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::MacRxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacRxMiddle> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MacRxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacRxMiddle__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::MacTxMiddle, ns3::empty, ns3::DefaultDeleter<ns3::MacTxMiddle> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MacTxMiddle_Ns3Empty_Ns3DefaultDeleter__lt__ns3MacTxMiddle__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::QosBlockedDestinations, ns3::empty, ns3::DefaultDeleter<ns3::QosBlockedDestinations> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3QosBlockedDestinations_Ns3Empty_Ns3DefaultDeleter__lt__ns3QosBlockedDestinations__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiMacQueueItem, ns3::empty, ns3::DefaultDeleter<ns3::WifiMacQueueItem> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiPpdu, ns3::empty, ns3::DefaultDeleter<ns3::WifiPpdu> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiPsdu, ns3::empty, ns3::DefaultDeleter<ns3::WifiPsdu> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SnrTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SnrTag;


extern PyTypeObject PyNs3SnrTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::SpectrumWifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumWifiPhyHelper;


extern PyTypeObject PyNs3SpectrumWifiPhyHelper_Type;

class PyNs3SpectrumWifiPhyHelper__PythonHelper : public ns3::SpectrumWifiPhyHelper
{
public:
    PyObject *m_pyself;
    PyNs3SpectrumWifiPhyHelper__PythonHelper(ns3::SpectrumWifiPhyHelper const & arg0)
        : ns3::SpectrumWifiPhyHelper(arg0), m_pyself(NULL)
        {}

    PyNs3SpectrumWifiPhyHelper__PythonHelper()
        : ns3::SpectrumWifiPhyHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumWifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiPhy > Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::NetDevice > device) const;

    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::ThresholdPreambleDetectionModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThresholdPreambleDetectionModel;


extern PyTypeObject PyNs3ThresholdPreambleDetectionModel_Type;

class PyNs3ThresholdPreambleDetectionModel__PythonHelper : public ns3::ThresholdPreambleDetectionModel
{
public:
    PyObject *m_pyself;
    PyNs3ThresholdPreambleDetectionModel__PythonHelper(ns3::ThresholdPreambleDetectionModel const & arg0)
        : ns3::ThresholdPreambleDetectionModel(arg0), m_pyself(NULL)
        {}

    PyNs3ThresholdPreambleDetectionModel__PythonHelper()
        : ns3::ThresholdPreambleDetectionModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThresholdPreambleDetectionModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3ThresholdPreambleDetectionModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3ThresholdPreambleDetectionModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ThresholdPreambleDetectionModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ThresholdPreambleDetectionModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual bool IsPreambleDetected(double rssi, double snr, double channelWidth) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ThresholdPreambleDetectionModel__PythonHelper")
        .SetParent< ns3::ThresholdPreambleDetectionModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ThresholdPreambleDetectionModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Txop *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Txop;


extern PyTypeObject PyNs3Txop_Type;

class PyNs3Txop__PythonHelper : public ns3::Txop
{
public:
    PyObject *m_pyself;
    PyNs3Txop__PythonHelper(ns3::Txop const & arg0)
        : ns3::Txop(arg0), m_pyself(NULL)
        {}

    PyNs3Txop__PythonHelper()
        : ns3::Txop(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Txop__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Txop::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Txop::DoInitialize(); }

    static PyObject * _wrap_GenerateBackoff(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void GenerateBackoff__parent_caller()
    { ns3::Txop::GenerateBackoff(); }

    static PyObject * _wrap_GetBackoffSlots(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline uint32_t GetBackoffSlots__parent_caller()
    { return ns3::Txop::GetBackoffSlots(); }

    static PyObject * _wrap_GetBackoffStart(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline ns3::Time GetBackoffStart__parent_caller()
    { return ns3::Txop::GetBackoffStart(); }

    static PyObject * _wrap_GetCw(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline uint32_t GetCw__parent_caller()
    { return ns3::Txop::GetCw(); }

    static PyObject * _wrap_GetFragmentOffset(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline uint32_t GetFragmentOffset__parent_caller()
    { return ns3::Txop::GetFragmentOffset(); }

    static PyObject * _wrap_GetFragmentSize(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline uint32_t GetFragmentSize__parent_caller()
    { return ns3::Txop::GetFragmentSize(); }

    static PyObject * _wrap_GetNextFragmentSize(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline uint32_t GetNextFragmentSize__parent_caller()
    { return ns3::Txop::GetNextFragmentSize(); }

    static PyObject * _wrap_HasFramesToTransmit(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool HasFramesToTransmit__parent_caller()
    { return ns3::Txop::HasFramesToTransmit(); }

    static PyObject * _wrap_IsLastFragment(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool IsLastFragment__parent_caller()
    { return ns3::Txop::IsLastFragment(); }

    static PyObject * _wrap_NeedDataRetransmission(PyNs3Txop *self, PyObject *args, PyObject *kwargs);
    inline bool NeedDataRetransmission__parent_caller(ns3::Ptr< ns3::Packet const > packet, ns3::WifiMacHeader const & hdr)
    { return ns3::Txop::NeedDataRetransmission(packet, hdr); }

    static PyObject * _wrap_NeedFragmentation(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool NeedFragmentation__parent_caller()
    { return ns3::Txop::NeedFragmentation(); }

    static PyObject * _wrap_NeedRtsRetransmission(PyNs3Txop *self, PyObject *args, PyObject *kwargs);
    inline bool NeedRtsRetransmission__parent_caller(ns3::Ptr< ns3::Packet const > packet, ns3::WifiMacHeader const & hdr)
    { return ns3::Txop::NeedRtsRetransmission(packet, hdr); }

    static PyObject * _wrap_NextFragment(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NextFragment__parent_caller()
    { ns3::Txop::NextFragment(); }

    static PyObject * _wrap_NotifyAccessGranted(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyAccessGranted__parent_caller()
    { ns3::Txop::NotifyAccessGranted(); }

    static PyObject * _wrap_NotifyAccessRequested(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyAccessRequested__parent_caller()
    { ns3::Txop::NotifyAccessRequested(); }

    static PyObject * _wrap_NotifyInternalCollision(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyInternalCollision__parent_caller()
    { ns3::Txop::NotifyInternalCollision(); }

    static PyObject * _wrap_ResetCw(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void ResetCw__parent_caller()
    { ns3::Txop::ResetCw(); }

    static PyObject * _wrap_RestartAccessIfNeeded(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void RestartAccessIfNeeded__parent_caller()
    { ns3::Txop::RestartAccessIfNeeded(); }

    static PyObject * _wrap_StartAccessIfNeeded(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void StartAccessIfNeeded__parent_caller()
    { ns3::Txop::StartAccessIfNeeded(); }

    static PyObject * _wrap_TxDroppedPacket(PyNs3Txop *self, PyObject *args, PyObject *kwargs);
    inline void TxDroppedPacket__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem const > item)
    { ns3::Txop::TxDroppedPacket(item); }

    static PyObject * _wrap_UpdateBackoffSlotsNow(PyNs3Txop *self, PyObject *args, PyObject *kwargs);
    inline void UpdateBackoffSlotsNow__parent_caller(uint32_t nSlots, ns3::Time backoffUpdateBound)
    { ns3::Txop::UpdateBackoffSlotsNow(nSlots, backoffUpdateBound); }

    static PyObject * _wrap_UpdateFailedCw(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void UpdateFailedCw__parent_caller()
    { ns3::Txop::UpdateFailedCw(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Txop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Cancel();

    virtual void EndTxNoAck();

    virtual ns3::Time GetTxopRemaining() const;

    virtual void GotAck();

    virtual void GotBlockAck(ns3::CtrlBAckResponseHeader const *blockAck, ns3::Mac48Address recipient, double rxSnr, double dataSnr, ns3::WifiTxVector dataTxVector);

    virtual bool IsAccessRequested() const;

    virtual bool IsQosTxop() const;

    virtual void MissedAck();

    virtual void MissedBlockAck(uint8_t nMpdus);

    virtual void MissedCts();

    virtual void NotifyChannelSwitching();

    virtual void NotifyOff();

    virtual void NotifyOn();

    virtual void NotifySleep();

    virtual void NotifyWakeUp();

    virtual void Queue(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const & hdr);

    virtual void StartNextFragment();

    virtual void StartNextPacket();

    virtual void TerminateTxop();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void GenerateBackoff();

    virtual uint32_t GetFragmentOffset() const;

    virtual uint32_t GetFragmentSize() const;

    virtual uint32_t GetNextFragmentSize() const;

    virtual bool HasFramesToTransmit();

    virtual bool IsLastFragment() const;

    virtual bool NeedFragmentation() const;

    virtual void NotifyAccessGranted();

    virtual void NotifyAccessRequested();

    virtual void NotifyInternalCollision();

    virtual void RestartAccessIfNeeded();

    virtual void StartAccessIfNeeded();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Txop__PythonHelper")
        .SetParent< ns3::Txop > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Txop__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::VhtConfiguration *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VhtConfiguration;


extern PyTypeObject PyNs3VhtConfiguration_Type;


typedef struct {
    PyObject_HEAD
    ns3::VhtSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VhtSigHeader;


extern PyTypeObject PyNs3VhtSigHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiAckPolicySelector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiAckPolicySelector;


extern PyTypeObject PyNs3WifiAckPolicySelector_Type;

class PyNs3WifiAckPolicySelector__PythonHelper : public ns3::WifiAckPolicySelector
{
public:
    PyObject *m_pyself;
    PyNs3WifiAckPolicySelector__PythonHelper()
        : ns3::WifiAckPolicySelector(), m_pyself(NULL)
        {}

    PyNs3WifiAckPolicySelector__PythonHelper(ns3::WifiAckPolicySelector const & arg0)
        : ns3::WifiAckPolicySelector(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiAckPolicySelector__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3WifiAckPolicySelector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiAckPolicySelector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiAckPolicySelector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void UpdateTxParams(ns3::Ptr< ns3::WifiPsdu > psdu, ns3::MacLowTransmissionParameters & params);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiAckPolicySelector__PythonHelper")
        .SetParent< ns3::WifiAckPolicySelector > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiAckPolicySelector__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WifiActionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiActionHeader;


extern PyTypeObject PyNs3WifiActionHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiActionHeader::ActionValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiActionHeaderActionValue;


extern PyTypeObject PyNs3WifiActionHeaderActionValue_Type;

extern std::map<void*, PyObject*> PyNs3WifiActionHeaderActionValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiInformationElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiInformationElement;


extern PyTypeObject PyNs3WifiInformationElement_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiInformationElementVector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiInformationElementVector;


extern PyTypeObject PyNs3WifiInformationElementVector_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMac;


extern PyTypeObject PyNs3WifiMac_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMacHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacHeader;


extern PyTypeObject PyNs3WifiMacHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMacQueueItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacQueueItem;


extern PyTypeObject PyNs3WifiMacQueueItem_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMacTrailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacTrailer;


extern PyTypeObject PyNs3WifiMacTrailer_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhy;


extern PyTypeObject PyNs3WifiPhy_Type;

class PyNs3WifiPhy__PythonHelper : public ns3::WifiPhy
{
public:
    PyObject *m_pyself;
    PyNs3WifiPhy__PythonHelper(ns3::WifiPhy const & arg0)
        : ns3::WifiPhy(arg0), m_pyself(NULL)
        {}

    PyNs3WifiPhy__PythonHelper()
        : ns3::WifiPhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoChannelSwitch(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs);
    inline bool DoChannelSwitch__parent_caller(uint8_t id)
    { return ns3::WifiPhy::DoChannelSwitch(id); }

    static PyObject * _wrap_DoDispose(PyNs3WifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::WifiPhy::DoDispose(); }

    static PyObject * _wrap_DoFrequencySwitch(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs);
    inline bool DoFrequencySwitch__parent_caller(uint16_t frequency)
    { return ns3::WifiPhy::DoFrequencySwitch(frequency); }

    static PyObject * _wrap_DoInitialize(PyNs3WifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::WifiPhy::DoInitialize(); }

    static PyObject * _wrap_GetStaId(PyNs3WifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline uint16_t GetStaId__parent_caller()
    { return ns3::WifiPhy::GetStaId(); }

    static PyObject * _wrap_SwitchMaybeToCcaBusy(PyNs3WifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void SwitchMaybeToCcaBusy__parent_caller()
    { ns3::WifiPhy::SwitchMaybeToCcaBusy(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual int64_t AssignStreams(int64_t stream);

    virtual void ConfigureStandardAndBand(ns3::WifiPhyStandard standard, ns3::WifiPhyBand band);

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual void SetChannelNumber(uint8_t id);

    virtual void SetChannelWidth(uint16_t channelWidth);

    virtual void SetFrequency(uint16_t freq);

    virtual void StartTx(ns3::Ptr< ns3::WifiPpdu > ppdu);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual uint16_t GetStaId() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiPhy__PythonHelper")
        .SetParent< ns3::WifiPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WifiPhyStateHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyStateHelper;


extern PyTypeObject PyNs3WifiPhyStateHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiPpdu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPpdu;


extern PyTypeObject PyNs3WifiPpdu_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiPsdu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPsdu;


extern PyTypeObject PyNs3WifiPsdu_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationManager;


extern PyTypeObject PyNs3WifiRemoteStationManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumPhyInterface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumPhyInterface;


extern PyTypeObject PyNs3WifiSpectrumPhyInterface_Type;

class PyNs3WifiSpectrumPhyInterface__PythonHelper : public ns3::WifiSpectrumPhyInterface
{
public:
    PyObject *m_pyself;
    PyNs3WifiSpectrumPhyInterface__PythonHelper()
        : ns3::WifiSpectrumPhyInterface(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiSpectrumPhyInterface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3WifiSpectrumPhyInterface *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiSpectrumPhyInterface *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiSpectrumPhyInterface *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice() const;

    virtual ns3::Ptr< ns3::MobilityModel > GetMobility();

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual ns3::Ptr< ns3::AntennaModel > GetRxAntenna();

    virtual void StartRx(ns3::Ptr< ns3::SpectrumSignalParameters > params);

    virtual void DoDispose();

    virtual void SetDevice(ns3::Ptr< ns3::NetDevice > d);

    virtual void SetMobility(ns3::Ptr< ns3::MobilityModel > m);

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiSpectrumPhyInterface__PythonHelper")
        .SetParent< ns3::WifiSpectrumPhyInterface > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiSpectrumPhyInterface__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumSignalParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumSignalParameters;


extern PyTypeObject PyNs3WifiSpectrumSignalParameters_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiTxCurrentModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiTxCurrentModel;


extern PyTypeObject PyNs3WifiTxCurrentModel_Type;

class PyNs3WifiTxCurrentModel__PythonHelper : public ns3::WifiTxCurrentModel
{
public:
    PyObject *m_pyself;
    PyNs3WifiTxCurrentModel__PythonHelper(ns3::WifiTxCurrentModel const & arg0)
        : ns3::WifiTxCurrentModel(arg0), m_pyself(NULL)
        {}

    PyNs3WifiTxCurrentModel__PythonHelper()
        : ns3::WifiTxCurrentModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiTxCurrentModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3WifiTxCurrentModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3WifiTxCurrentModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiTxCurrentModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiTxCurrentModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double CalcTxCurrent(double txPowerDbm) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiTxCurrentModel__PythonHelper")
        .SetParent< ns3::WifiTxCurrentModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiTxCurrentModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::YansWifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiPhy;


extern PyTypeObject PyNs3YansWifiPhy_Type;

class PyNs3YansWifiPhy__PythonHelper : public ns3::YansWifiPhy
{
public:
    PyObject *m_pyself;
    PyNs3YansWifiPhy__PythonHelper(ns3::YansWifiPhy const & arg0)
        : ns3::YansWifiPhy(arg0), m_pyself(NULL)
        {}

    PyNs3YansWifiPhy__PythonHelper()
        : ns3::YansWifiPhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3YansWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::YansWifiPhy::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3YansWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::WifiPhy::DoInitialize(); }

    static PyObject * _wrap_GetStaId(PyNs3YansWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline uint16_t GetStaId__parent_caller()
    { return ns3::WifiPhy::GetStaId(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3YansWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3YansWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual void StartTx(ns3::Ptr< ns3::WifiPpdu > ppdu);

    virtual void DoDispose();

    virtual int64_t AssignStreams(int64_t stream);

    virtual void ConfigureStandardAndBand(ns3::WifiPhyStandard standard, ns3::WifiPhyBand band);

    virtual void SetChannelNumber(uint8_t id);

    virtual void SetChannelWidth(uint16_t channelWidth);

    virtual void SetFrequency(uint16_t freq);

    virtual void DoInitialize();

    virtual uint16_t GetStaId() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3YansWifiPhy__PythonHelper")
        .SetParent< ns3::YansWifiPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3YansWifiPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AarfWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AarfWifiManager;


extern PyTypeObject PyNs3AarfWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AarfcdWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AarfcdWifiManager;


extern PyTypeObject PyNs3AarfcdWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AmpduSubframeHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmpduSubframeHeader;


extern PyTypeObject PyNs3AmpduSubframeHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::AmrrWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmrrWifiManager;


extern PyTypeObject PyNs3AmrrWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AmsduSubframeHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmsduSubframeHeader;


extern PyTypeObject PyNs3AmsduSubframeHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::AparfWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AparfWifiManager;


extern PyTypeObject PyNs3AparfWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::ArfWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArfWifiManager;


extern PyTypeObject PyNs3ArfWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AthstatsWifiTraceSink *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AthstatsWifiTraceSink;


extern PyTypeObject PyNs3AthstatsWifiTraceSink_Type;


typedef struct {
    PyObject_HEAD
    ns3::BlockAckManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckManager;


extern PyTypeObject PyNs3BlockAckManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::CaraWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CaraWifiManager;


extern PyTypeObject PyNs3CaraWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::CfParameterSet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CfParameterSet;


extern PyTypeObject PyNs3CfParameterSet_Type;


typedef struct {
    PyObject_HEAD
    ns3::ChannelAccessManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelAccessManager;


extern PyTypeObject PyNs3ChannelAccessManager_Type;

class PyNs3ChannelAccessManager__PythonHelper : public ns3::ChannelAccessManager
{
public:
    PyObject *m_pyself;
    PyNs3ChannelAccessManager__PythonHelper(ns3::ChannelAccessManager const & arg0)
        : ns3::ChannelAccessManager(arg0), m_pyself(NULL)
        {}

    PyNs3ChannelAccessManager__PythonHelper()
        : ns3::ChannelAccessManager(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ChannelAccessManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3ChannelAccessManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::ChannelAccessManager::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3ChannelAccessManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ChannelAccessManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ChannelAccessManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetSlot() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ChannelAccessManager__PythonHelper")
        .SetParent< ns3::ChannelAccessManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ChannelAccessManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ConstantObssPdAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantObssPdAlgorithm;


extern PyTypeObject PyNs3ConstantObssPdAlgorithm_Type;

class PyNs3ConstantObssPdAlgorithm__PythonHelper : public ns3::ConstantObssPdAlgorithm
{
public:
    PyObject *m_pyself;
    PyNs3ConstantObssPdAlgorithm__PythonHelper(ns3::ConstantObssPdAlgorithm const & arg0)
        : ns3::ConstantObssPdAlgorithm(arg0), m_pyself(NULL)
        {}

    PyNs3ConstantObssPdAlgorithm__PythonHelper()
        : ns3::ConstantObssPdAlgorithm(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantObssPdAlgorithm__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3ConstantObssPdAlgorithm *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::ObssPdAlgorithm::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3ConstantObssPdAlgorithm *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ConstantObssPdAlgorithm *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConstantObssPdAlgorithm *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void ReceiveHeSig(ns3::HePreambleParameters params);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ConstantObssPdAlgorithm__PythonHelper")
        .SetParent< ns3::ConstantObssPdAlgorithm > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ConstantObssPdAlgorithm__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ConstantRateWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRateWifiManager;


extern PyTypeObject PyNs3ConstantRateWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::ConstantWifiAckPolicySelector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantWifiAckPolicySelector;


extern PyTypeObject PyNs3ConstantWifiAckPolicySelector_Type;

class PyNs3ConstantWifiAckPolicySelector__PythonHelper : public ns3::ConstantWifiAckPolicySelector
{
public:
    PyObject *m_pyself;
    PyNs3ConstantWifiAckPolicySelector__PythonHelper(ns3::ConstantWifiAckPolicySelector const & arg0)
        : ns3::ConstantWifiAckPolicySelector(arg0), m_pyself(NULL)
        {}

    PyNs3ConstantWifiAckPolicySelector__PythonHelper()
        : ns3::ConstantWifiAckPolicySelector(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantWifiAckPolicySelector__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3ConstantWifiAckPolicySelector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ConstantWifiAckPolicySelector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConstantWifiAckPolicySelector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void UpdateTxParams(ns3::Ptr< ns3::WifiPsdu > psdu, ns3::MacLowTransmissionParameters & params);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ConstantWifiAckPolicySelector__PythonHelper")
        .SetParent< ns3::ConstantWifiAckPolicySelector > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ConstantWifiAckPolicySelector__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::CtrlBAckRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CtrlBAckRequestHeader;


extern PyTypeObject PyNs3CtrlBAckRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::CtrlBAckResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CtrlBAckResponseHeader;


extern PyTypeObject PyNs3CtrlBAckResponseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::DsssParameterSet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsssParameterSet;


extern PyTypeObject PyNs3DsssParameterSet_Type;


typedef struct {
    PyObject_HEAD
    ns3::DsssSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsssSigHeader;


extern PyTypeObject PyNs3DsssSigHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::EdcaParameterSet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EdcaParameterSet;


extern PyTypeObject PyNs3EdcaParameterSet_Type;


typedef struct {
    PyObject_HEAD
    ns3::ErpInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErpInformation;


extern PyTypeObject PyNs3ErpInformation_Type;


typedef struct {
    PyObject_HEAD
    ns3::ErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErrorRateModel;


extern PyTypeObject PyNs3ErrorRateModel_Type;

class PyNs3ErrorRateModel__PythonHelper : public ns3::ErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3ErrorRateModel__PythonHelper()
        : ns3::ErrorRateModel(), m_pyself(NULL)
        {}

    PyNs3ErrorRateModel__PythonHelper(ns3::ErrorRateModel const & arg0)
        : ns3::ErrorRateModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3ErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3ErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double DoGetChunkSuccessRate(ns3::WifiMode mode, ns3::WifiTxVector txVector, double snr, uint64_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ErrorRateModel__PythonHelper")
        .SetParent< ns3::ErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Event *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Event;


extern PyTypeObject PyNs3Event_Type;


typedef struct {
    PyObject_HEAD
    ns3::ExtendedCapabilities *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExtendedCapabilities;


extern PyTypeObject PyNs3ExtendedCapabilities_Type;


typedef struct {
    PyObject_HEAD
    ns3::ExtendedSupportedRatesIE *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExtendedSupportedRatesIE;


extern PyTypeObject PyNs3ExtendedSupportedRatesIE_Type;


typedef struct {
    PyObject_HEAD
    ns3::FrameCaptureModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FrameCaptureModel;


extern PyTypeObject PyNs3FrameCaptureModel_Type;

class PyNs3FrameCaptureModel__PythonHelper : public ns3::FrameCaptureModel
{
public:
    PyObject *m_pyself;
    PyNs3FrameCaptureModel__PythonHelper()
        : ns3::FrameCaptureModel(), m_pyself(NULL)
        {}

    PyNs3FrameCaptureModel__PythonHelper(ns3::FrameCaptureModel const & arg0)
        : ns3::FrameCaptureModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FrameCaptureModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3FrameCaptureModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3FrameCaptureModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3FrameCaptureModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FrameCaptureModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual bool CaptureNewFrame(ns3::Ptr< ns3::Event > currentEvent, ns3::Ptr< ns3::Event > newEvent) const;

    virtual bool IsInCaptureWindow(ns3::Time timePreambleDetected) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3FrameCaptureModel__PythonHelper")
        .SetParent< ns3::FrameCaptureModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3FrameCaptureModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::HeCapabilities *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeCapabilities;


extern PyTypeObject PyNs3HeCapabilities_Type;


typedef struct {
    PyObject_HEAD
    ns3::HeConfiguration *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeConfiguration;


extern PyTypeObject PyNs3HeConfiguration_Type;


typedef struct {
    PyObject_HEAD
    ns3::HeOperation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeOperation;


extern PyTypeObject PyNs3HeOperation_Type;


typedef struct {
    PyObject_HEAD
    ns3::HeSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeSigHeader;


extern PyTypeObject PyNs3HeSigHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::HtCapabilities *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HtCapabilities;


extern PyTypeObject PyNs3HtCapabilities_Type;


typedef struct {
    PyObject_HEAD
    ns3::HtConfiguration *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HtConfiguration;


extern PyTypeObject PyNs3HtConfiguration_Type;


typedef struct {
    PyObject_HEAD
    ns3::HtOperation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HtOperation;


extern PyTypeObject PyNs3HtOperation_Type;


typedef struct {
    PyObject_HEAD
    ns3::IdealWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3IdealWifiManager;


extern PyTypeObject PyNs3IdealWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::LinearWifiTxCurrentModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LinearWifiTxCurrentModel;


extern PyTypeObject PyNs3LinearWifiTxCurrentModel_Type;

class PyNs3LinearWifiTxCurrentModel__PythonHelper : public ns3::LinearWifiTxCurrentModel
{
public:
    PyObject *m_pyself;
    PyNs3LinearWifiTxCurrentModel__PythonHelper(ns3::LinearWifiTxCurrentModel const & arg0)
        : ns3::LinearWifiTxCurrentModel(arg0), m_pyself(NULL)
        {}

    PyNs3LinearWifiTxCurrentModel__PythonHelper()
        : ns3::LinearWifiTxCurrentModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LinearWifiTxCurrentModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3LinearWifiTxCurrentModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3LinearWifiTxCurrentModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LinearWifiTxCurrentModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LinearWifiTxCurrentModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double CalcTxCurrent(double txPowerDbm) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LinearWifiTxCurrentModel__PythonHelper")
        .SetParent< ns3::LinearWifiTxCurrentModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LinearWifiTxCurrentModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MacLow *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLow;


extern PyTypeObject PyNs3MacLow_Type;

class PyNs3MacLow__PythonHelper : public ns3::MacLow
{
public:
    PyObject *m_pyself;
    PyNs3MacLow__PythonHelper(ns3::MacLow const & arg0)
        : ns3::MacLow(arg0), m_pyself(NULL)
        {}

    PyNs3MacLow__PythonHelper()
        : ns3::MacLow(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLow__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MacLow *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MacLow *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MacLow *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::WifiTxVector GetDataTxVector(ns3::Ptr< ns3::WifiMacQueueItem const > item) const;

    virtual bool IsCfPeriod() const;

    virtual void StartTransmission(ns3::Ptr< ns3::WifiMacQueueItem > mpdu, ns3::MacLowTransmissionParameters parameters, ns3::Ptr< ns3::Txop > txop);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MacLow__PythonHelper")
        .SetParent< ns3::MacLow > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MacLow__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MacRxMiddle *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacRxMiddle;


extern PyTypeObject PyNs3MacRxMiddle_Type;


typedef struct {
    PyObject_HEAD
    ns3::MacTxMiddle *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacTxMiddle;


extern PyTypeObject PyNs3MacTxMiddle_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtBeaconHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtBeaconHeader;


extern PyTypeObject PyNs3MgtBeaconHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MinstrelHtWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinstrelHtWifiManager;


extern PyTypeObject PyNs3MinstrelHtWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::MinstrelWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinstrelWifiManager;


extern PyTypeObject PyNs3MinstrelWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::MpduAggregator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MpduAggregator;


extern PyTypeObject PyNs3MpduAggregator_Type;


typedef struct {
    PyObject_HEAD
    ns3::MsduAggregator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MsduAggregator;


extern PyTypeObject PyNs3MsduAggregator_Type;


typedef struct {
    PyObject_HEAD
    ns3::NistErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NistErrorRateModel;


extern PyTypeObject PyNs3NistErrorRateModel_Type;

class PyNs3NistErrorRateModel__PythonHelper : public ns3::NistErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3NistErrorRateModel__PythonHelper(ns3::NistErrorRateModel const & arg0)
        : ns3::NistErrorRateModel(arg0), m_pyself(NULL)
        {}

    PyNs3NistErrorRateModel__PythonHelper()
        : ns3::NistErrorRateModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NistErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3NistErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3NistErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NistErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NistErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double DoGetChunkSuccessRate(ns3::WifiMode mode, ns3::WifiTxVector txVector, double snr, uint64_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NistErrorRateModel__PythonHelper")
        .SetParent< ns3::NistErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NistErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::OnoeWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OnoeWifiManager;


extern PyTypeObject PyNs3OnoeWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::ParfWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParfWifiManager;


extern PyTypeObject PyNs3ParfWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::QosBlockedDestinations *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QosBlockedDestinations;


extern PyTypeObject PyNs3QosBlockedDestinations_Type;


typedef struct {
    PyObject_HEAD
    ns3::QosTxop *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QosTxop;


extern PyTypeObject PyNs3QosTxop_Type;

class PyNs3QosTxop__PythonHelper : public ns3::QosTxop
{
public:
    PyObject *m_pyself;
    PyNs3QosTxop__PythonHelper(ns3::QosTxop const & arg0)
        : ns3::QosTxop(arg0), m_pyself(NULL)
        {}

    PyNs3QosTxop__PythonHelper()
        : ns3::QosTxop(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QosTxop__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_GenerateBackoff(PyNs3QosTxop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void GenerateBackoff__parent_caller()
    { ns3::Txop::GenerateBackoff(); }

    static PyObject * _wrap_NotifyAccessRequested(PyNs3QosTxop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyAccessRequested__parent_caller()
    { ns3::Txop::NotifyAccessRequested(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3QosTxop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3QosTxop *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void EndTxNoAck();

    virtual ns3::Time GetTxopRemaining() const;

    virtual void GotAck();

    virtual void GotBlockAck(ns3::CtrlBAckResponseHeader const *blockAck, ns3::Mac48Address recipient, double rxSnr, double dataSnr, ns3::WifiTxVector dataTxVector);

    virtual bool HasFramesToTransmit();

    virtual bool IsQosTxop() const;

    virtual void MissedAck();

    virtual void MissedBlockAck(uint8_t nMpdus);

    virtual bool NeedFragmentation() const;

    virtual void NotifyAccessGranted();

    virtual void NotifyInternalCollision();

    virtual void RestartAccessIfNeeded();

    virtual void StartAccessIfNeeded();

    virtual void StartNextPacket();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual uint32_t GetFragmentOffset() const;

    virtual uint32_t GetFragmentSize() const;

    virtual uint32_t GetNextFragmentSize() const;

    virtual bool IsLastFragment() const;

    virtual void TerminateTxop();

    virtual void Cancel();

    virtual bool IsAccessRequested() const;

    virtual void MissedCts();

    virtual void NotifyChannelSwitching();

    virtual void NotifyOff();

    virtual void NotifyOn();

    virtual void NotifySleep();

    virtual void NotifyWakeUp();

    virtual void Queue(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const & hdr);

    virtual void StartNextFragment();

    virtual void GenerateBackoff();

    virtual void NotifyAccessRequested();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3QosTxop__PythonHelper")
        .SetParent< ns3::QosTxop > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3QosTxop__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Queue< ns3::WifiMacQueueItem > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Queue__Ns3WifiMacQueueItem;


extern PyTypeObject PyNs3Queue__Ns3WifiMacQueueItem_Type;

class PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper : public ns3::Queue< ns3::WifiMacQueueItem >
{
public:
    PyObject *m_pyself;
    PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper()
        : ns3::Queue< ns3::WifiMacQueueItem >(), m_pyself(NULL)
        {}

    PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper(ns3::Queue< ns3::WifiMacQueueItem > const & arg0)
        : ns3::Queue< ns3::WifiMacQueueItem >(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DropBeforeEnqueue(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs);
    inline void DropBeforeEnqueue__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > item)
    { ns3::Queue< ns3::WifiMacQueueItem >::DropBeforeEnqueue(item); }

    static PyObject * _wrap_DropAfterDequeue(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *args, PyObject *kwargs);
    inline void DropAfterDequeue__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > item)
    { ns3::Queue< ns3::WifiMacQueueItem >::DropAfterDequeue(item); }

    static PyObject * _wrap_DoDispose(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Queue__Ns3WifiMacQueueItem *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual bool Enqueue(ns3::Ptr< ns3::WifiMacQueueItem > item);

    virtual ns3::Ptr< ns3::WifiMacQueueItem > Dequeue();

    virtual ns3::Ptr< ns3::WifiMacQueueItem > Remove();

    virtual ns3::Ptr< ns3::WifiMacQueueItem const > Peek() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper")
        .SetParent< ns3::Queue< ns3::WifiMacQueueItem > > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Queue__Ns3WifiMacQueueItem__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RegularWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RegularWifiMac;


extern PyTypeObject PyNs3RegularWifiMac_Type;

class PyNs3RegularWifiMac__PythonHelper : public ns3::RegularWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3RegularWifiMac__PythonHelper()
        : ns3::RegularWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RegularWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::RegularWifiMac::DoInitialize(); }

    static PyObject * _wrap_DoDispose(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::RegularWifiMac::DoDispose(); }

    static PyObject * _wrap_GetTxop(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline ns3::Ptr< ns3::Txop > GetTxop__parent_caller()
    { return ns3::RegularWifiMac::GetTxop(); }

    static PyObject * _wrap_GetVOQueue(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline ns3::Ptr< ns3::QosTxop > GetVOQueue__parent_caller()
    { return ns3::RegularWifiMac::GetVOQueue(); }

    static PyObject * _wrap_GetVIQueue(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline ns3::Ptr< ns3::QosTxop > GetVIQueue__parent_caller()
    { return ns3::RegularWifiMac::GetVIQueue(); }

    static PyObject * _wrap_GetBEQueue(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline ns3::Ptr< ns3::QosTxop > GetBEQueue__parent_caller()
    { return ns3::RegularWifiMac::GetBEQueue(); }

    static PyObject * _wrap_GetBKQueue(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline ns3::Ptr< ns3::QosTxop > GetBKQueue__parent_caller()
    { return ns3::RegularWifiMac::GetBKQueue(); }

    static PyObject * _wrap_ConfigureContentionWindow(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void ConfigureContentionWindow__parent_caller(uint32_t cwMin, uint32_t cwMax)
    { ns3::RegularWifiMac::ConfigureContentionWindow(cwMin, cwMax); }

    static PyObject * _wrap_SetTypeOfStation(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SetTypeOfStation__parent_caller(ns3::TypeOfStation type)
    { ns3::RegularWifiMac::SetTypeOfStation(type); }

    static PyObject * _wrap_Receive(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void Receive__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > mpdu)
    { ns3::RegularWifiMac::Receive(mpdu); }

    static PyObject * _wrap_TxOk(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxOk__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxOk(hdr); }

    static PyObject * _wrap_TxFailed(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxFailed__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxFailed(hdr); }

    static PyObject * _wrap_ForwardUp(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void ForwardUp__parent_caller(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address from, ns3::Mac48Address to)
    { ns3::RegularWifiMac::ForwardUp(packet, from, to); }

    static PyObject * _wrap_DeaggregateAmsduAndForward(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > mpdu)
    { ns3::RegularWifiMac::DeaggregateAmsduAndForward(mpdu); }

    static PyObject * _wrap_SendAddBaResponse(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SendAddBaResponse__parent_caller(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator)
    { ns3::RegularWifiMac::SendAddBaResponse(reqHdr, originator); }

    static PyObject * _wrap_SetQosSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SetQosSupported__parent_caller(bool enable)
    { ns3::RegularWifiMac::SetQosSupported(enable); }

    static PyObject * _wrap_GetQosSupported(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool GetQosSupported__parent_caller()
    { return ns3::RegularWifiMac::GetQosSupported(); }

    static PyObject * _wrap_GetHtSupported(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool GetHtSupported__parent_caller()
    { return ns3::RegularWifiMac::GetHtSupported(); }

    static PyObject * _wrap_GetVhtSupported(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool GetVhtSupported__parent_caller()
    { return ns3::RegularWifiMac::GetVhtSupported(); }

    static PyObject * _wrap_SetErpSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SetErpSupported__parent_caller(bool enable)
    { ns3::RegularWifiMac::SetErpSupported(enable); }

    static PyObject * _wrap_GetErpSupported(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool GetErpSupported__parent_caller()
    { return ns3::RegularWifiMac::GetErpSupported(); }

    static PyObject * _wrap_SetDsssSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SetDsssSupported__parent_caller(bool enable)
    { ns3::RegularWifiMac::SetDsssSupported(enable); }

    static PyObject * _wrap_GetDsssSupported(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool GetDsssSupported__parent_caller()
    { return ns3::RegularWifiMac::GetDsssSupported(); }

    static PyObject * _wrap_GetHeSupported(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline bool GetHeSupported__parent_caller()
    { return ns3::RegularWifiMac::GetHeSupported(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RegularWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void SetShortSlotTimeSupported(bool enable);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetPromisc();

    virtual bool GetShortSlotTimeSupported() const;

    virtual ns3::Ssid GetSsid() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Mac48Address GetBssid() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void ResetWifiPhy();

    virtual void ConfigureStandard(ns3::WifiStandard standard);

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to);

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void DoInitialize();

    virtual void DoDispose();

    virtual void Receive(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void SetQosSupported(bool enable);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RegularWifiMac__PythonHelper")
        .SetParent< ns3::RegularWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RegularWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RraaWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RraaWifiManager;


extern PyTypeObject PyNs3RraaWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrpaaWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrpaaWifiManager;


extern PyTypeObject PyNs3RrpaaWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::SimpleFrameCaptureModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleFrameCaptureModel;


extern PyTypeObject PyNs3SimpleFrameCaptureModel_Type;

class PyNs3SimpleFrameCaptureModel__PythonHelper : public ns3::SimpleFrameCaptureModel
{
public:
    PyObject *m_pyself;
    PyNs3SimpleFrameCaptureModel__PythonHelper(ns3::SimpleFrameCaptureModel const & arg0)
        : ns3::SimpleFrameCaptureModel(arg0), m_pyself(NULL)
        {}

    PyNs3SimpleFrameCaptureModel__PythonHelper()
        : ns3::SimpleFrameCaptureModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SimpleFrameCaptureModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3SimpleFrameCaptureModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3SimpleFrameCaptureModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SimpleFrameCaptureModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SimpleFrameCaptureModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual bool CaptureNewFrame(ns3::Ptr< ns3::Event > currentEvent, ns3::Ptr< ns3::Event > newEvent) const;

    virtual bool IsInCaptureWindow(ns3::Time timePreambleDetected) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SimpleFrameCaptureModel__PythonHelper")
        .SetParent< ns3::SimpleFrameCaptureModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SimpleFrameCaptureModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SpectrumWifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumWifiPhy;


extern PyTypeObject PyNs3SpectrumWifiPhy_Type;

class PyNs3SpectrumWifiPhy__PythonHelper : public ns3::SpectrumWifiPhy
{
public:
    PyObject *m_pyself;
    PyNs3SpectrumWifiPhy__PythonHelper(ns3::SpectrumWifiPhy const & arg0)
        : ns3::SpectrumWifiPhy(arg0), m_pyself(NULL)
        {}

    PyNs3SpectrumWifiPhy__PythonHelper()
        : ns3::SpectrumWifiPhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumWifiPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3SpectrumWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::SpectrumWifiPhy::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3SpectrumWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::SpectrumWifiPhy::DoInitialize(); }

    static PyObject * _wrap_GetStaId(PyNs3SpectrumWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline uint16_t GetStaId__parent_caller()
    { return ns3::WifiPhy::GetStaId(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SpectrumWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SpectrumWifiPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void ConfigureStandardAndBand(ns3::WifiPhyStandard standard, ns3::WifiPhyBand band);

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual void SetChannelNumber(uint8_t id);

    virtual void SetChannelWidth(uint16_t channelwidth);

    virtual void SetFrequency(uint16_t freq);

    virtual void StartTx(ns3::Ptr< ns3::WifiPpdu > ppdu);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual int64_t AssignStreams(int64_t stream);

    virtual uint16_t GetStaId() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SpectrumWifiPhy__PythonHelper")
        .SetParent< ns3::SpectrumWifiPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SpectrumWifiPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ssid *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ssid;


extern PyTypeObject PyNs3Ssid_Type;


typedef struct {
    PyObject_HEAD
    ns3::SsidChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsidChecker;


extern PyTypeObject PyNs3SsidChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::SsidValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsidValue;


extern PyTypeObject PyNs3SsidValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::SupportedRates *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SupportedRates;


extern PyTypeObject PyNs3SupportedRates_Type;
extern PyTypeObject PyNs3SupportedRatesMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::TableBasedErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TableBasedErrorRateModel;


extern PyTypeObject PyNs3TableBasedErrorRateModel_Type;

class PyNs3TableBasedErrorRateModel__PythonHelper : public ns3::TableBasedErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3TableBasedErrorRateModel__PythonHelper(ns3::TableBasedErrorRateModel const & arg0)
        : ns3::TableBasedErrorRateModel(arg0), m_pyself(NULL)
        {}

    PyNs3TableBasedErrorRateModel__PythonHelper()
        : ns3::TableBasedErrorRateModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TableBasedErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3TableBasedErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3TableBasedErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TableBasedErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TableBasedErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double DoGetChunkSuccessRate(ns3::WifiMode mode, ns3::WifiTxVector txVector, double snr, uint64_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TableBasedErrorRateModel__PythonHelper")
        .SetParent< ns3::TableBasedErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TableBasedErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::VhtCapabilities *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VhtCapabilities;


extern PyTypeObject PyNs3VhtCapabilities_Type;


typedef struct {
    PyObject_HEAD
    ns3::VhtOperation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VhtOperation;


extern PyTypeObject PyNs3VhtOperation_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMacQueue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacQueue;


extern PyTypeObject PyNs3WifiMacQueue_Type;

class PyNs3WifiMacQueue__PythonHelper : public ns3::WifiMacQueue
{
public:
    PyObject *m_pyself;
    PyNs3WifiMacQueue__PythonHelper()
        : ns3::WifiMacQueue(), m_pyself(NULL)
        {}

    PyNs3WifiMacQueue__PythonHelper(ns3::WifiMacQueue const & arg0)
        : ns3::WifiMacQueue(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiMacQueue__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3WifiMacQueue *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3WifiMacQueue *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiMacQueue *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiMacQueue *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual bool Enqueue(ns3::Ptr< ns3::WifiMacQueueItem > item);

    virtual ns3::Ptr< ns3::WifiMacQueueItem > Dequeue();

    virtual ns3::Ptr< ns3::WifiMacQueueItem const > Peek() const;

    virtual ns3::Ptr< ns3::WifiMacQueueItem > Remove();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiMacQueue__PythonHelper")
        .SetParent< ns3::WifiMacQueue > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiMacQueue__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WifiModeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeChecker;


extern PyTypeObject PyNs3WifiModeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiModeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeValue;


extern PyTypeObject PyNs3WifiModeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiNetDevice;


extern PyTypeObject PyNs3WifiNetDevice_Type;

class PyNs3WifiNetDevice__PythonHelper : public ns3::WifiNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3WifiNetDevice__PythonHelper()
        : ns3::WifiNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3WifiNetDevice *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::WifiNetDevice::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3WifiNetDevice *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::WifiNetDevice::DoInitialize(); }

    static PyObject * _wrap_ForwardUp(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void ForwardUp__parent_caller(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address from, ns3::Mac48Address to)
    { ns3::WifiNetDevice::ForwardUp(packet, from, to); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiNetDevice *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiNetDevice *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void SetIfIndex(uint32_t const index);

    virtual uint32_t GetIfIndex() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetAddress() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual uint16_t GetMtu() const;

    virtual bool IsLinkUp() const;

    virtual bool IsBroadcast() const;

    virtual ns3::Address GetBroadcast() const;

    virtual bool IsMulticast() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual bool IsPointToPoint() const;

    virtual bool IsBridge() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool NeedsArp() const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiNetDevice__PythonHelper")
        .SetParent< ns3::WifiNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WifiRadioEnergyModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRadioEnergyModel;


extern PyTypeObject PyNs3WifiRadioEnergyModel_Type;

class PyNs3WifiRadioEnergyModel__PythonHelper : public ns3::WifiRadioEnergyModel
{
public:
    PyObject *m_pyself;
    PyNs3WifiRadioEnergyModel__PythonHelper(ns3::WifiRadioEnergyModel const & arg0)
        : ns3::WifiRadioEnergyModel(arg0), m_pyself(NULL)
        {}

    PyNs3WifiRadioEnergyModel__PythonHelper()
        : ns3::WifiRadioEnergyModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiRadioEnergyModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3WifiRadioEnergyModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiRadioEnergyModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiRadioEnergyModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void ChangeState(int newState);

    virtual double GetTotalEnergyConsumption() const;

    virtual void HandleEnergyChanged();

    virtual void HandleEnergyDepletion();

    virtual void HandleEnergyRecharged();

    virtual void DoDispose();

    virtual double DoGetCurrentA() const;

    virtual void SetEnergySource(ns3::Ptr< ns3::EnergySource > source);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiRadioEnergyModel__PythonHelper")
        .SetParent< ns3::WifiRadioEnergyModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiRadioEnergyModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::YansErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansErrorRateModel;


extern PyTypeObject PyNs3YansErrorRateModel_Type;

class PyNs3YansErrorRateModel__PythonHelper : public ns3::YansErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3YansErrorRateModel__PythonHelper(ns3::YansErrorRateModel const & arg0)
        : ns3::YansErrorRateModel(arg0), m_pyself(NULL)
        {}

    PyNs3YansErrorRateModel__PythonHelper()
        : ns3::YansErrorRateModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3YansErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3YansErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3YansErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3YansErrorRateModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double DoGetChunkSuccessRate(ns3::WifiMode mode, ns3::WifiTxVector txVector, double snr, uint64_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3YansErrorRateModel__PythonHelper")
        .SetParent< ns3::YansErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3YansErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::YansWifiChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiChannel;


extern PyTypeObject PyNs3YansWifiChannel_Type;

class PyNs3YansWifiChannel__PythonHelper : public ns3::YansWifiChannel
{
public:
    PyObject *m_pyself;
    PyNs3YansWifiChannel__PythonHelper(ns3::YansWifiChannel const & arg0)
        : ns3::YansWifiChannel(arg0), m_pyself(NULL)
        {}

    PyNs3YansWifiChannel__PythonHelper()
        : ns3::YansWifiChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3YansWifiChannel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3YansWifiChannel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3YansWifiChannel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3YansWifiChannel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(std::size_t i) const;

    virtual std::size_t GetNDevices() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3YansWifiChannel__PythonHelper")
        .SetParent< ns3::YansWifiChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3YansWifiChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AdhocWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AdhocWifiMac;


extern PyTypeObject PyNs3AdhocWifiMac_Type;

class PyNs3AdhocWifiMac__PythonHelper : public ns3::AdhocWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3AdhocWifiMac__PythonHelper()
        : ns3::AdhocWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AdhocWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3AdhocWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::RegularWifiMac::DoInitialize(); }

    static PyObject * _wrap_DoDispose(PyNs3AdhocWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::RegularWifiMac::DoDispose(); }

    static PyObject * _wrap_TxOk(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxOk__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxOk(hdr); }

    static PyObject * _wrap_TxFailed(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxFailed__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxFailed(hdr); }

    static PyObject * _wrap_DeaggregateAmsduAndForward(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > mpdu)
    { ns3::RegularWifiMac::DeaggregateAmsduAndForward(mpdu); }

    static PyObject * _wrap_SetQosSupported(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SetQosSupported__parent_caller(bool enable)
    { ns3::RegularWifiMac::SetQosSupported(enable); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3AdhocWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AdhocWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to);

    virtual void Receive(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void SetShortSlotTimeSupported(bool enable);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual void SetPromisc();

    virtual bool GetShortSlotTimeSupported() const;

    virtual ns3::Ssid GetSsid() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Mac48Address GetBssid() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void ResetWifiPhy();

    virtual void ConfigureStandard(ns3::WifiStandard standard);

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void DoInitialize();

    virtual void DoDispose();

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void SetQosSupported(bool enable);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3AdhocWifiMac__PythonHelper")
        .SetParent< ns3::AdhocWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3AdhocWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::HePreambleParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiPhyRxfailureReason, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, unsigned short, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::WifiPsdu>, double, ns3::WifiTxVector, std::vector<bool, std::allocator<bool> >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::Mac48Address, unsigned char, ns3::OriginatorBlockAckAgreement::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Mac48Address_Unsigned_char_Ns3OriginatorBlockAckAgreementState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3Time_Ns3Mac48Address_Unsigned_char_Ns3OriginatorBlockAckAgreementState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::Time, WifiPhyState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::WifiTxVector, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, std::unordered_map<unsigned short, ns3::Ptr<const ns3::WifiPsdu>, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Ptr<const ns3::WifiPsdu> > > >, ns3::WifiTxVector, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    ns3::InfrastructureWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3InfrastructureWifiMac;


extern PyTypeObject PyNs3InfrastructureWifiMac_Type;

class PyNs3InfrastructureWifiMac__PythonHelper : public ns3::InfrastructureWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3InfrastructureWifiMac__PythonHelper()
        : ns3::InfrastructureWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3InfrastructureWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3InfrastructureWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::RegularWifiMac::DoInitialize(); }

    static PyObject * _wrap_DoDispose(PyNs3InfrastructureWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::RegularWifiMac::DoDispose(); }

    static PyObject * _wrap_Receive(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void Receive__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > mpdu)
    { ns3::RegularWifiMac::Receive(mpdu); }

    static PyObject * _wrap_TxOk(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxOk__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxOk(hdr); }

    static PyObject * _wrap_TxFailed(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxFailed__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxFailed(hdr); }

    static PyObject * _wrap_DeaggregateAmsduAndForward(PyNs3InfrastructureWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > mpdu)
    { ns3::RegularWifiMac::DeaggregateAmsduAndForward(mpdu); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3InfrastructureWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3InfrastructureWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to);

    virtual void SetQosSupported(bool enable);

    virtual void SetShortSlotTimeSupported(bool enable);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetPromisc();

    virtual bool GetShortSlotTimeSupported() const;

    virtual ns3::Ssid GetSsid() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Mac48Address GetBssid() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void ResetWifiPhy();

    virtual void ConfigureStandard(ns3::WifiStandard standard);

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void DoInitialize();

    virtual void DoDispose();

    virtual void Receive(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3InfrastructureWifiMac__PythonHelper")
        .SetParent< ns3::InfrastructureWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3InfrastructureWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::StaWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3StaWifiMac;


extern PyTypeObject PyNs3StaWifiMac_Type;

class PyNs3StaWifiMac__PythonHelper : public ns3::StaWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3StaWifiMac__PythonHelper()
        : ns3::StaWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3StaWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3StaWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::RegularWifiMac::DoDispose(); }

    static PyObject * _wrap_TxOk(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxOk__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxOk(hdr); }

    static PyObject * _wrap_TxFailed(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxFailed__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxFailed(hdr); }

    static PyObject * _wrap_DeaggregateAmsduAndForward(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::WifiMacQueueItem > mpdu)
    { ns3::RegularWifiMac::DeaggregateAmsduAndForward(mpdu); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3StaWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3StaWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to);

    virtual void Receive(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void DoInitialize();

    virtual void SetQosSupported(bool enable);

    virtual void SetShortSlotTimeSupported(bool enable);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetPromisc();

    virtual bool GetShortSlotTimeSupported() const;

    virtual ns3::Ssid GetSsid() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Mac48Address GetBssid() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void ResetWifiPhy();

    virtual void ConfigureStandard(ns3::WifiStandard standard);

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void DoDispose();

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3StaWifiMac__PythonHelper")
        .SetParent< ns3::StaWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3StaWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ApWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ApWifiMac;


extern PyTypeObject PyNs3ApWifiMac_Type;

class PyNs3ApWifiMac__PythonHelper : public ns3::ApWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3ApWifiMac__PythonHelper()
        : ns3::ApWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ApWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNewAggregate(PyNs3ApWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ApWifiMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to);

    virtual void Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual bool SupportsSendFrom() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void Receive(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::WifiMacQueueItem > mpdu);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void SetQosSupported(bool enable);

    virtual void SetShortSlotTimeSupported(bool enable);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual void SetPromisc();

    virtual bool GetShortSlotTimeSupported() const;

    virtual ns3::Ssid GetSsid() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Mac48Address GetBssid() const;

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void ResetWifiPhy();

    virtual void ConfigureStandard(ns3::WifiStandard standard);

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ApWifiMac__PythonHelper")
        .SetParent< ns3::ApWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ApWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::HtMinstrelRate *obj;
} Pyns3__HtMinstrelRate;


typedef struct {
    PyObject_HEAD
    Pyns3__HtMinstrelRate *container;
    ns3::HtMinstrelRate::iterator *iterator;
} Pyns3__HtMinstrelRateIter;


extern PyTypeObject Pyns3__HtMinstrelRate_Type;
extern PyTypeObject Pyns3__HtMinstrelRateIter_Type;

int _wrap_convert_py2c__ns3__HtMinstrelRate(PyObject *arg, ns3::HtMinstrelRate *container);

typedef struct {
    PyObject_HEAD
    std::map< std::string, ns3::LogComponent * > *obj;
} Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__ *container;
    std::map< std::string, ns3::LogComponent * >::iterator *iterator;
} Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__Iter;


extern PyTypeObject Pystd__map__lt___std__string__ns3__LogComponent___star_____gt___Type;
extern PyTypeObject Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__ns3__LogComponent___star_____gt__(PyObject *arg, std::map< std::string, ns3::LogComponent * > *container);

typedef struct {
    PyObject_HEAD
    ns3::TxTime *obj;
} Pyns3__TxTime;


typedef struct {
    PyObject_HEAD
    Pyns3__TxTime *container;
    ns3::TxTime::iterator *iterator;
} Pyns3__TxTimeIter;


extern PyTypeObject Pyns3__TxTime_Type;
extern PyTypeObject Pyns3__TxTimeIter_Type;

int _wrap_convert_py2c__ns3__TxTime(PyObject *arg, ns3::TxTime *container);

typedef struct {
    PyObject_HEAD
    ns3::WifiModeList *obj;
} Pyns3__WifiModeList;


typedef struct {
    PyObject_HEAD
    Pyns3__WifiModeList *container;
    ns3::WifiModeList::iterator *iterator;
} Pyns3__WifiModeListIter;


extern PyTypeObject Pyns3__WifiModeList_Type;
extern PyTypeObject Pyns3__WifiModeListIter_Type;

int _wrap_convert_py2c__ns3__WifiModeList(PyObject *arg, ns3::WifiModeList *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned short, ns3::HeMuUserInfo > *obj;
} Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__ *container;
    std::map< unsigned short, ns3::HeMuUserInfo >::iterator *iterator;
} Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__(PyObject *arg, std::map< unsigned short, ns3::HeMuUserInfo > *container);

typedef struct {
    PyObject_HEAD
    ns3::MinstrelRate *obj;
} Pyns3__MinstrelRate;


typedef struct {
    PyObject_HEAD
    Pyns3__MinstrelRate *container;
    ns3::MinstrelRate::iterator *iterator;
} Pyns3__MinstrelRateIter;


extern PyTypeObject Pyns3__MinstrelRate_Type;
extern PyTypeObject Pyns3__MinstrelRateIter_Type;

int _wrap_convert_py2c__ns3__MinstrelRate(PyObject *arg, ns3::MinstrelRate *container);

typedef struct {
    PyObject_HEAD
    std::vector< double > *obj;
} Pystd__vector__lt___double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___double___gt__ *container;
    std::vector< double >::iterator *iterator;
} Pystd__vector__lt___double___gt__Iter;


extern PyTypeObject Pystd__vector__lt___double___gt___Type;
extern PyTypeObject Pystd__vector__lt___double___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container);

typedef struct {
    PyObject_HEAD
    ns3::Bands *obj;
} Pyns3__Bands;


typedef struct {
    PyObject_HEAD
    Pyns3__Bands *container;
    ns3::Bands::iterator *iterator;
} Pyns3__BandsIter;


extern PyTypeObject Pyns3__Bands_Type;
extern PyTypeObject Pyns3__BandsIter_Type;

int _wrap_convert_py2c__ns3__Bands(PyObject *arg, ns3::Bands *container);

typedef struct {
    PyObject_HEAD
    ns3::WifiConstPsduMap *obj;
} Pyns3__WifiConstPsduMap;


typedef struct {
    PyObject_HEAD
    Pyns3__WifiConstPsduMap *container;
    ns3::WifiConstPsduMap::iterator *iterator;
} Pyns3__WifiConstPsduMapIter;


extern PyTypeObject Pyns3__WifiConstPsduMap_Type;
extern PyTypeObject Pyns3__WifiConstPsduMapIter_Type;

int _wrap_convert_py2c__ns3__WifiConstPsduMap(PyObject *arg, ns3::WifiConstPsduMap *container);

typedef struct {
    PyObject_HEAD
    std::vector< bool > *obj;
} Pystd__vector__lt___bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___bool___gt__ *container;
    std::vector< bool >::iterator *iterator;
} Pystd__vector__lt___bool___gt__Iter;


extern PyTypeObject Pystd__vector__lt___bool___gt___Type;
extern PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned short > *obj;
} Pystd__vector__lt___unsigned_short___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_short___gt__ *container;
    std::vector< unsigned short >::iterator *iterator;
} Pystd__vector__lt___unsigned_short___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_short___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_short___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_short___gt__(PyObject *arg, std::vector< unsigned short > *container);

typedef struct {
    PyObject_HEAD
    std::unordered_map< unsigned short, ns3::Ptr< ns3::WifiPsdu const > > *obj;
} Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__ *container;
    std::unordered_map< unsigned short, ns3::Ptr< ns3::WifiPsdu const > >::iterator *iterator;
} Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__Iter;


extern PyTypeObject Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt___Type;
extern PyTypeObject Pystd__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__unordered_map__lt___unsigned_short__ns3__Ptr__lt___ns3__WifiPsdu_const___gt_____gt__(PyObject *arg, std::unordered_map< unsigned short, ns3::Ptr< ns3::WifiPsdu const > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::WifiMacQueueItem > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::WifiMacQueueItem > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::WifiMacQueueItem > > *container);

typedef struct {
    PyObject_HEAD
    std::set< unsigned char > *obj;
} Pystd__set__lt___unsigned_char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt___unsigned_char___gt__ *container;
    std::set< unsigned char >::iterator *iterator;
} Pystd__set__lt___unsigned_char___gt__Iter;


extern PyTypeObject Pystd__set__lt___unsigned_char___gt___Type;
extern PyTypeObject Pystd__set__lt___unsigned_char___gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___unsigned_char___gt__(PyObject *arg, std::set< unsigned char > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::WifiRemoteStation * > *obj;
} Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt__ *container;
    std::vector< ns3::WifiRemoteStation * >::iterator *iterator;
} Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__WifiRemoteStation___star_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__WifiRemoteStation___star_____gt__(PyObject *arg, std::vector< ns3::WifiRemoteStation * > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::WifiRemoteStationState * > *obj;
} Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt__ *container;
    std::vector< ns3::WifiRemoteStationState * >::iterator *iterator;
} Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__WifiRemoteStationState___star_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__WifiRemoteStationState___star_____gt__(PyObject *arg, std::vector< ns3::WifiRemoteStationState * > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned int > *obj;
} Pystd__list__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_int___gt__ *container;
    std::list< unsigned int >::iterator *iterator;
} Pystd__list__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_int___gt__(PyObject *arg, std::list< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::map< ns3::AcIndex, ns3::Ptr< ns3::QosTxop > > *obj;
} Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__ *container;
    std::map< ns3::AcIndex, ns3::Ptr< ns3::QosTxop > >::iterator *iterator;
} Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___ns3__AcIndex__ns3__Ptr__lt___ns3__QosTxop___gt_____gt__(PyObject *arg, std::map< ns3::AcIndex, ns3::Ptr< ns3::QosTxop > > *container);

typedef struct {
    PyObject_HEAD
    ns3::MpduAggregator::EdcaQueues *obj;
} Pyns3__MpduAggregator__EdcaQueues;


typedef struct {
    PyObject_HEAD
    Pyns3__MpduAggregator__EdcaQueues *container;
    ns3::MpduAggregator::EdcaQueues::iterator *iterator;
} Pyns3__MpduAggregator__EdcaQueuesIter;


extern PyTypeObject Pyns3__MpduAggregator__EdcaQueues_Type;
extern PyTypeObject Pyns3__MpduAggregator__EdcaQueuesIter_Type;

int _wrap_convert_py2c__ns3__MpduAggregator__EdcaQueues(PyObject *arg, ns3::MpduAggregator::EdcaQueues *container);

typedef struct {
    PyObject_HEAD
    ns3::MsduAggregator::EdcaQueues *obj;
} Pyns3__MsduAggregator__EdcaQueues;


typedef struct {
    PyObject_HEAD
    Pyns3__MsduAggregator__EdcaQueues *container;
    ns3::MsduAggregator::EdcaQueues::iterator *iterator;
} Pyns3__MsduAggregator__EdcaQueuesIter;


extern PyTypeObject Pyns3__MsduAggregator__EdcaQueues_Type;
extern PyTypeObject Pyns3__MsduAggregator__EdcaQueuesIter_Type;

int _wrap_convert_py2c__ns3__MsduAggregator__EdcaQueues(PyObject *arg, ns3::MsduAggregator::EdcaQueues *container);

typedef struct {
    PyObject_HEAD
    std::map< ns3::Mac48Address, bool > *obj;
} Pystd__map__lt___ns3__Mac48Address__bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___ns3__Mac48Address__bool___gt__ *container;
    std::map< ns3::Mac48Address, bool >::iterator *iterator;
} Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter;


extern PyTypeObject Pystd__map__lt___ns3__Mac48Address__bool___gt___Type;
extern PyTypeObject Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___ns3__Mac48Address__bool___gt__(PyObject *arg, std::map< ns3::Mac48Address, bool > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::WifiMacQueueItem > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::WifiMacQueueItem > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__WifiMacQueueItem___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::WifiMacQueueItem > > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject *_PyNs3HashImplementation_Type;
#define PyNs3HashImplementation_Type (*_PyNs3HashImplementation_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject *_PyNs3HashFunctionFnv1a_Type;
#define PyNs3HashFunctionFnv1a_Type (*_PyNs3HashFunctionFnv1a_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject *_PyNs3HashFunctionHash32_Type;
#define PyNs3HashFunctionHash32_Type (*_PyNs3HashFunctionHash32_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject *_PyNs3HashFunctionHash64_Type;
#define PyNs3HashFunctionHash64_Type (*_PyNs3HashFunctionHash64_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject *_PyNs3HashFunctionMurmur3_Type;
#define PyNs3HashFunctionMurmur3_Type (*_PyNs3HashFunctionMurmur3_Type)


class PythonCallbackImpl0 : public ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    ns3::ObjectBase *
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        ns3::ObjectBase *retval;
        PyObject *args;
        PyNs3ObjectBase *tmp_ObjectBase;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return NULL;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ObjectBase_Type, &tmp_ObjectBase)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return NULL;
        }
        // dangerous!
        retval = tmp_ObjectBase->obj;
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(N)", py_Mac48Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<void, unsigned long, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, unsigned long arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(kk)", arg1, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Mac48Address arg2, ns3::Mac48Address arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Mac48Address *py_Mac48Address;
        PyNs3Mac48Address *py_Mac48Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address2->obj = new ns3::Mac48Address(arg3);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
        args = Py_BuildValue((char *) "(NNN)", py_Packet, py_Mac48Address, py_Mac48Address2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl8 : public ns3::CallbackImpl<void, ns3::Mac48Address, unsigned char, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl8(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl8()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl8 *other = dynamic_cast<const PythonCallbackImpl8*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1, unsigned char arg2, bool arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(NiN)", py_Mac48Address, (int) arg2, PyBool_FromLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl9 : public ns3::CallbackImpl<void, ns3::Mac48Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl9(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl9()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl9 *other = dynamic_cast<const PythonCallbackImpl9*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1, unsigned char arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(Ni)", py_Mac48Address, (int) arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl10 : public ns3::CallbackImpl<void, const ns3::WifiMacHeader &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl10(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl10()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl10 *other = dynamic_cast<const PythonCallbackImpl10*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::WifiMacHeader const & arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiMacHeader *py_WifiMacHeader;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
        args = Py_BuildValue((char *) "(N)", py_WifiMacHeader);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl11 : public ns3::CallbackImpl<void, ns3::Time, ns3::Mac48Address, unsigned char, ns3::OriginatorBlockAckAgreement::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl11(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl11()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl11 *other = dynamic_cast<const PythonCallbackImpl11*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Time arg1, ns3::Mac48Address arg2, unsigned char arg3, ns3::OriginatorBlockAckAgreement::State arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Time *py_Time;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg1);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(NNii)", py_Time, py_Mac48Address, (int) arg3, arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl12 : public ns3::CallbackImpl<void, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl12(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl12()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl12 *other = dynamic_cast<const PythonCallbackImpl12*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned int arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(N)", PyLong_FromUnsignedLong(arg1));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl13 : public ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl13(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl13()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl13 *other = dynamic_cast<const PythonCallbackImpl13*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned int arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(NN)", PyLong_FromUnsignedLong(arg1), PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl14 : public ns3::CallbackImpl<void, ns3::Time, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl14(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl14()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl14 *other = dynamic_cast<const PythonCallbackImpl14*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Time arg1, ns3::Time arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Time *py_Time;
        PyNs3Time *py_Time2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg1);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        py_Time2 = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time2->obj = new ns3::Time(arg2);
        PyNs3Time_wrapper_registry[(void *) py_Time2->obj] = (PyObject *) py_Time2;
        args = Py_BuildValue((char *) "(NN)", py_Time, py_Time2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl15 : public ns3::CallbackImpl<void, double, double, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl15(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl15()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl15 *other = dynamic_cast<const PythonCallbackImpl15*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(double arg1, double arg2, ns3::Mac48Address arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg3);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(ddN)", arg1, arg2, py_Mac48Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl16 : public ns3::CallbackImpl<void, ns3::DataRate, ns3::DataRate, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl16(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl16()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl16 *other = dynamic_cast<const PythonCallbackImpl16*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::DataRate arg1, ns3::DataRate arg2, ns3::Mac48Address arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3DataRate *py_DataRate;
        PyNs3DataRate *py_DataRate2;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_DataRate = PyObject_New(PyNs3DataRate, &PyNs3DataRate_Type);
        py_DataRate->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_DataRate->obj = new ns3::DataRate(arg1);
        PyNs3DataRate_wrapper_registry[(void *) py_DataRate->obj] = (PyObject *) py_DataRate;
        py_DataRate2 = PyObject_New(PyNs3DataRate, &PyNs3DataRate_Type);
        py_DataRate2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_DataRate2->obj = new ns3::DataRate(arg2);
        PyNs3DataRate_wrapper_registry[(void *) py_DataRate2->obj] = (PyObject *) py_DataRate2;
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg3);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(NNN)", py_DataRate, py_DataRate2, py_Mac48Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl17 : public ns3::CallbackImpl<void, unsigned char, double, bool, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl17(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl17()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl17 *other = dynamic_cast<const PythonCallbackImpl17*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned char arg1, double arg2, bool arg3, double arg4, double arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(idNdd)", (int) arg1, arg2, PyBool_FromLong(arg3), arg4, arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl18 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl18(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl18()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl18 *other = dynamic_cast<const PythonCallbackImpl18*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::WifiMacQueueItem > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_WifiMacQueueItem = NULL;
        } else {
            py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiMacQueueItem);
        }

        if (py_WifiMacQueueItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1))), &PyNs3WifiMacQueueItem_Type);
            py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);

            py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1))->Ref();
            py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
        }
        args = Py_BuildValue((char *) "(N)", py_WifiMacQueueItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl19 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl19(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl19()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl19 *other = dynamic_cast<const PythonCallbackImpl19*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl20 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl20(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl20()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl20 *other = dynamic_cast<const PythonCallbackImpl20*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_NetDevice);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl23 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::WifiPsdu>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl23(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl23()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl23 *other = dynamic_cast<const PythonCallbackImpl23*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::WifiPsdu > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiPsdu *py_WifiPsdu;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiPsdu *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_WifiPsdu = NULL;
        } else {
            py_WifiPsdu = (PyNs3WifiPsdu *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiPsdu);
        }

        if (py_WifiPsdu == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3WifiPsdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPsdu__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPsdu *> (ns3::PeekPointer (arg1))), &PyNs3WifiPsdu_Type);
            py_WifiPsdu = PyObject_New(PyNs3WifiPsdu, wrapper_type);

            py_WifiPsdu->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiPsdu *> (ns3::PeekPointer (arg1))->Ref();
            py_WifiPsdu->obj = const_cast<ns3::WifiPsdu *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_WifiPsdu->obj] = (PyObject *) py_WifiPsdu;
        }
        args = Py_BuildValue((char *) "(N)", py_WifiPsdu);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl25 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl25(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl25()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl25 *other = dynamic_cast<const PythonCallbackImpl25*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, double arg2, ns3::WifiMode arg3, ns3::WifiPreamble arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiMode *py_WifiMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
        py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMode->obj = new ns3::WifiMode(arg3);
        PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
        args = Py_BuildValue((char *) "(NdNi)", py_Packet, arg2, py_WifiMode, arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl26 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl26(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl26()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl26 *other = dynamic_cast<const PythonCallbackImpl26*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, double arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(Nd)", py_Packet, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl27 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl27(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl27()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl27 *other = dynamic_cast<const PythonCallbackImpl27*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::WifiMode arg2, ns3::WifiPreamble arg3, unsigned char arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiMode *py_WifiMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
        py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMode->obj = new ns3::WifiMode(arg2);
        PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
        args = Py_BuildValue((char *) "(NNii)", py_Packet, py_WifiMode, arg3, (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl30 : public ns3::CallbackImpl<void, ns3::WifiTxVector, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl30(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl30()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl30 *other = dynamic_cast<const PythonCallbackImpl30*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::WifiTxVector arg1, ns3::Time arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3Time *py_Time;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg1);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg2);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        args = Py_BuildValue((char *) "(NN)", py_WifiTxVector, py_Time);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl31 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::WifiPhyRxfailureReason, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl31(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl31()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl31 *other = dynamic_cast<const PythonCallbackImpl31*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::WifiPhyRxfailureReason arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(Ni)", py_Packet, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl32 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, unsigned short, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl32(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl32()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl32 *other = dynamic_cast<const PythonCallbackImpl32*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, unsigned short arg2, ns3::WifiTxVector arg3, ns3::MpduInfo arg4, ns3::SignalNoiseDbm arg5, unsigned short arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3MpduInfo *py_MpduInfo;
        PyNs3SignalNoiseDbm *py_SignalNoiseDbm;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg3);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_MpduInfo = PyObject_New(PyNs3MpduInfo, &PyNs3MpduInfo_Type);
        py_MpduInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_MpduInfo->obj = new ns3::MpduInfo(arg4);
        PyNs3MpduInfo_wrapper_registry[(void *) py_MpduInfo->obj] = (PyObject *) py_MpduInfo;
        py_SignalNoiseDbm = PyObject_New(PyNs3SignalNoiseDbm, &PyNs3SignalNoiseDbm_Type);
        py_SignalNoiseDbm->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_SignalNoiseDbm->obj = new ns3::SignalNoiseDbm(arg5);
        PyNs3SignalNoiseDbm_wrapper_registry[(void *) py_SignalNoiseDbm->obj] = (PyObject *) py_SignalNoiseDbm;
        args = Py_BuildValue((char *) "(NiNNNi)", py_Packet, (int) arg2, py_WifiTxVector, py_MpduInfo, py_SignalNoiseDbm, (int) arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl33 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl33(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl33()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl33 *other = dynamic_cast<const PythonCallbackImpl33*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, unsigned short arg2, ns3::WifiTxVector arg3, ns3::MpduInfo arg4, unsigned short arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3MpduInfo *py_MpduInfo;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg3);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_MpduInfo = PyObject_New(PyNs3MpduInfo, &PyNs3MpduInfo_Type);
        py_MpduInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_MpduInfo->obj = new ns3::MpduInfo(arg4);
        PyNs3MpduInfo_wrapper_registry[(void *) py_MpduInfo->obj] = (PyObject *) py_MpduInfo;
        args = Py_BuildValue((char *) "(NiNNi)", py_Packet, (int) arg2, py_WifiTxVector, py_MpduInfo, (int) arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl34 : public ns3::CallbackImpl<void, ns3::HePreambleParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl34(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl34()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl34 *other = dynamic_cast<const PythonCallbackImpl34*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::HePreambleParameters arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3HePreambleParameters *py_HePreambleParameters;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_HePreambleParameters = PyObject_New(PyNs3HePreambleParameters, &PyNs3HePreambleParameters_Type);
        py_HePreambleParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_HePreambleParameters->obj = new ns3::HePreambleParameters(arg1);
        PyNs3HePreambleParameters_wrapper_registry[(void *) py_HePreambleParameters->obj] = (PyObject *) py_HePreambleParameters;
        args = Py_BuildValue((char *) "(N)", py_HePreambleParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl35 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl35(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl35()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl35 *other = dynamic_cast<const PythonCallbackImpl35*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::MobilityModel const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MobilityModel *py_MobilityModel;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_MobilityModel);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel = NULL;
            } else {
                py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
                Py_INCREF(py_MobilityModel);
            }

            if (py_MobilityModel == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))), &PyNs3MobilityModel_Type);
                py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
                py_MobilityModel->inst_dict = NULL;

                py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))->Ref();
                py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_MobilityModel);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl36 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl36(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl36()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl36 *other = dynamic_cast<const PythonCallbackImpl36*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::SpectrumPhy const > arg1, ns3::Ptr< ns3::SpectrumPhy const > arg2, double arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumPhy *py_SpectrumPhy;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3SpectrumPhy *py_SpectrumPhy2;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3SpectrumPhy__PythonHelper).name())
        {
            py_SpectrumPhy = (PyNs3SpectrumPhy*) (((PyNs3SpectrumPhy__PythonHelper*) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_SpectrumPhy->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_SpectrumPhy);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_SpectrumPhy = NULL;
            } else {
                py_SpectrumPhy = (PyNs3SpectrumPhy *) wrapper_lookup_iter->second;
                Py_INCREF(py_SpectrumPhy);
            }

            if (py_SpectrumPhy == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1))), &PyNs3SpectrumPhy_Type);
                py_SpectrumPhy = PyObject_GC_New(PyNs3SpectrumPhy, wrapper_type);
                py_SpectrumPhy->inst_dict = NULL;

                py_SpectrumPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1))->Ref();
                py_SpectrumPhy->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_SpectrumPhy->obj] = (PyObject *) py_SpectrumPhy;
            }
        }
        if (typeid(*(const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2)))).name() == typeid(PyNs3SpectrumPhy__PythonHelper).name())
        {
            py_SpectrumPhy2 = (PyNs3SpectrumPhy*) (((PyNs3SpectrumPhy__PythonHelper*) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2)))->m_pyself);
            py_SpectrumPhy2->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2));
            Py_INCREF(py_SpectrumPhy2);
        } else {
            wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2)));
            if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
                py_SpectrumPhy2 = NULL;
            } else {
                py_SpectrumPhy2 = (PyNs3SpectrumPhy *) wrapper_lookup_iter2->second;
                Py_INCREF(py_SpectrumPhy2);
            }

            if (py_SpectrumPhy2 == NULL)
            {
                wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2))), &PyNs3SpectrumPhy_Type);
                py_SpectrumPhy2 = PyObject_GC_New(PyNs3SpectrumPhy, wrapper_type2);
                py_SpectrumPhy2->inst_dict = NULL;

                py_SpectrumPhy2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2))->Ref();
                py_SpectrumPhy2->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2));
                PyNs3ObjectBase_wrapper_registry[(void *) py_SpectrumPhy2->obj] = (PyObject *) py_SpectrumPhy2;
            }
        }
        args = Py_BuildValue((char *) "(NNd)", py_SpectrumPhy, py_SpectrumPhy2, arg3);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl37 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl37(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl37()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl37 *other = dynamic_cast<const PythonCallbackImpl37*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::MobilityModel const > arg1, ns3::Ptr< ns3::MobilityModel const > arg2, double arg3, double arg4, double arg5, double arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MobilityModel *py_MobilityModel;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3MobilityModel *py_MobilityModel2;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_MobilityModel);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel = NULL;
            } else {
                py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
                Py_INCREF(py_MobilityModel);
            }

            if (py_MobilityModel == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))), &PyNs3MobilityModel_Type);
                py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
                py_MobilityModel->inst_dict = NULL;

                py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))->Ref();
                py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
            }
        }
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)))->m_pyself);
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2));
            Py_INCREF(py_MobilityModel2);
        } else {
            wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)));
            if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel2 = NULL;
            } else {
                py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
                Py_INCREF(py_MobilityModel2);
            }

            if (py_MobilityModel2 == NULL)
            {
                wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2))), &PyNs3MobilityModel_Type);
                py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
                py_MobilityModel2->inst_dict = NULL;

                py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2))->Ref();
                py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
            }
        }
        args = Py_BuildValue((char *) "(NNdddd)", py_MobilityModel, py_MobilityModel2, arg3, arg4, arg5, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl38 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl38(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl38()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl38 *other = dynamic_cast<const PythonCallbackImpl38*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::SpectrumSignalParameters > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumSignalParameters *py_SpectrumSignalParameters;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_SpectrumSignalParameters = NULL;
        } else {
            py_SpectrumSignalParameters = (PyNs3SpectrumSignalParameters *) wrapper_lookup_iter->second;
            Py_INCREF(py_SpectrumSignalParameters);
        }

        if (py_SpectrumSignalParameters == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1))), &PyNs3SpectrumSignalParameters_Type);
            py_SpectrumSignalParameters = PyObject_New(PyNs3SpectrumSignalParameters, wrapper_type);

            py_SpectrumSignalParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1))->Ref();
            py_SpectrumSignalParameters->obj = const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_SpectrumSignalParameters->obj] = (PyObject *) py_SpectrumSignalParameters;
        }
        args = Py_BuildValue((char *) "(N)", py_SpectrumSignalParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl39 : public ns3::CallbackImpl<void, bool, unsigned int, double, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl39(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl39()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl39 *other = dynamic_cast<const PythonCallbackImpl39*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(bool arg1, unsigned int arg2, double arg3, ns3::Time arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Time *py_Time;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg4);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        args = Py_BuildValue((char *) "(NNdN)", PyBool_FromLong(arg1), PyLong_FromUnsignedLong(arg2), arg3, py_Time);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl40 : public ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl40(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl40()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl40 *other = dynamic_cast<const PythonCallbackImpl40*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Time arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Time *py_Time;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg1);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        args = Py_BuildValue((char *) "(N)", py_Time);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl41 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::QueueDiscItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl41(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl41()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl41 *other = dynamic_cast<const PythonCallbackImpl41*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::QueueDiscItem const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3QueueDiscItem *py_QueueDiscItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_QueueDiscItem = NULL;
        } else {
            py_QueueDiscItem = (PyNs3QueueDiscItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_QueueDiscItem);
        }

        if (py_QueueDiscItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1))), &PyNs3QueueDiscItem_Type);
            py_QueueDiscItem = PyObject_New(PyNs3QueueDiscItem, wrapper_type);

            py_QueueDiscItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1))->Ref();
            py_QueueDiscItem->obj = const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_QueueDiscItem->obj] = (PyObject *) py_QueueDiscItem;
        }
        args = Py_BuildValue((char *) "(N)", py_QueueDiscItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl42 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::WifiMacQueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl42(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl42()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl42 *other = dynamic_cast<const PythonCallbackImpl42*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::WifiMacQueueItem const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiMacQueueItem *py_WifiMacQueueItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_WifiMacQueueItem = NULL;
        } else {
            py_WifiMacQueueItem = (PyNs3WifiMacQueueItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_WifiMacQueueItem);
        }

        if (py_WifiMacQueueItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3WifiMacQueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiMacQueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1))), &PyNs3WifiMacQueueItem_Type);
            py_WifiMacQueueItem = PyObject_New(PyNs3WifiMacQueueItem, wrapper_type);

            py_WifiMacQueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1))->Ref();
            py_WifiMacQueueItem->obj = const_cast<ns3::WifiMacQueueItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_WifiMacQueueItem->obj] = (PyObject *) py_WifiMacQueueItem;
        }
        args = Py_BuildValue((char *) "(N)", py_WifiMacQueueItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl43 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl43(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl43()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl43 *other = dynamic_cast<const PythonCallbackImpl43*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Mac48Address arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(NN)", py_Packet, py_Mac48Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl44 : public ns3::CallbackImpl<void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl44(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl44()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl44 *other = dynamic_cast<const PythonCallbackImpl44*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(int arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(i)", arg1);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl45 : public ns3::CallbackImpl<void, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl45(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl45()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl45 *other = dynamic_cast<const PythonCallbackImpl45*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(double arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(d)", arg1);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl46 : public ns3::CallbackImpl<void, double, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl46(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl46()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl46 *other = dynamic_cast<const PythonCallbackImpl46*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(double arg1, double arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(dd)", arg1, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


int _wrap_convert_py2c__ns3__HtRateInfo(PyObject *value, ns3::HtRateInfo *address);


int _wrap_convert_py2c__ns3__LogComponent___star__(PyObject *value, ns3::LogComponent * *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__ns3__Time(PyObject *value, ns3::Time *address);


int _wrap_convert_py2c__ns3__WifiMode(PyObject *value, ns3::WifiMode *address);


int _wrap_convert_py2c__ns3__HeMuUserInfo(PyObject *value, ns3::HeMuUserInfo *address);


int _wrap_convert_py2c__short_unsigned_int(PyObject *value, short unsigned int *address);


int _wrap_convert_py2c__ns3__RateInfo(PyObject *value, ns3::RateInfo *address);


int _wrap_convert_py2c__double(PyObject *value, double *address);


int _wrap_convert_py2c__ns3__BandInfo(PyObject *value, ns3::BandInfo *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__WifiPsdu_const___gt__(PyObject *value, ns3::Ptr< ns3::WifiPsdu const > *address);


int _wrap_convert_py2c__bool(PyObject *value, bool *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__WifiMacQueueItem___gt__(PyObject *value, ns3::Ptr< ns3::WifiMacQueueItem > *address);


int _wrap_convert_py2c__unsigned_char(PyObject *value, unsigned char *address);


int _wrap_convert_py2c__ns3__WifiRemoteStation___star__(PyObject *value, ns3::WifiRemoteStation * *address);


int _wrap_convert_py2c__ns3__WifiRemoteStationState___star__(PyObject *value, ns3::WifiRemoteStationState * *address);


int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__QosTxop___gt__(PyObject *value, ns3::Ptr< ns3::QosTxop > *address);


int _wrap_convert_py2c__ns3__AcIndex(PyObject *value, ns3::AcIndex *address);


int _wrap_convert_py2c__ns3__Mac48Address(PyObject *value, ns3::Mac48Address *address);

