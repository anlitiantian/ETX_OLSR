/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03050000
typedef PyAsyncMethods* cmpfunc;
#else
typedef void* cmpfunc;
#endif
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif

#if PY_VERSION_HEX >= 0x03070000 && !defined(PyEval_ThreadsInitialized)
#define PyEval_ThreadsInitialized() 1
#endif


#include "ns3/netanim-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AllocationRetentionPriority *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AllocationRetentionPriority;


extern PyTypeObject *_PyNs3AllocationRetentionPriority_Type;
#define PyNs3AllocationRetentionPriority_Type (*_PyNs3AllocationRetentionPriority_Type)

extern std::map<void*, PyObject*> *_PyNs3AllocationRetentionPriority_wrapper_registry;
#define PyNs3AllocationRetentionPriority_wrapper_registry (*_PyNs3AllocationRetentionPriority_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BandInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BandInfo;


extern PyTypeObject *_PyNs3BandInfo_Type;
#define PyNs3BandInfo_Type (*_PyNs3BandInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3BandInfo_wrapper_registry;
#define PyNs3BandInfo_wrapper_registry (*_PyNs3BandInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BufferSizeLevelBsr *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferSizeLevelBsr;


extern PyTypeObject *_PyNs3BufferSizeLevelBsr_Type;
#define PyNs3BufferSizeLevelBsr_Type (*_PyNs3BufferSizeLevelBsr_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferSizeLevelBsr_wrapper_registry;
#define PyNs3BufferSizeLevelBsr_wrapper_registry (*_PyNs3BufferSizeLevelBsr_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BuildBroadcastListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildBroadcastListElement_s;


extern PyTypeObject *_PyNs3BuildBroadcastListElement_s_Type;
#define PyNs3BuildBroadcastListElement_s_Type (*_PyNs3BuildBroadcastListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3BuildBroadcastListElement_s_wrapper_registry;
#define PyNs3BuildBroadcastListElement_s_wrapper_registry (*_PyNs3BuildBroadcastListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BuildDataListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildDataListElement_s;


extern PyTypeObject *_PyNs3BuildDataListElement_s_Type;
#define PyNs3BuildDataListElement_s_Type (*_PyNs3BuildDataListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3BuildDataListElement_s_wrapper_registry;
#define PyNs3BuildDataListElement_s_wrapper_registry (*_PyNs3BuildDataListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BuildRarListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildRarListElement_s;


extern PyTypeObject *_PyNs3BuildRarListElement_s_Type;
#define PyNs3BuildRarListElement_s_Type (*_PyNs3BuildRarListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3BuildRarListElement_s_wrapper_registry;
#define PyNs3BuildRarListElement_s_wrapper_registry (*_PyNs3BuildRarListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BwPart_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BwPart_s;


extern PyTypeObject *_PyNs3BwPart_s_Type;
#define PyNs3BwPart_s_Type (*_PyNs3BwPart_s_Type)

extern std::map<void*, PyObject*> *_PyNs3BwPart_s_wrapper_registry;
#define PyNs3BwPart_s_wrapper_registry (*_PyNs3BwPart_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CqiConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqiConfig_s;


extern PyTypeObject *_PyNs3CqiConfig_s_Type;
#define PyNs3CqiConfig_s_Type (*_PyNs3CqiConfig_s_Type)

extern std::map<void*, PyObject*> *_PyNs3CqiConfig_s_wrapper_registry;
#define PyNs3CqiConfig_s_wrapper_registry (*_PyNs3CqiConfig_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CqiListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqiListElement_s;


extern PyTypeObject *_PyNs3CqiListElement_s_Type;
#define PyNs3CqiListElement_s_Type (*_PyNs3CqiListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3CqiListElement_s_wrapper_registry;
#define PyNs3CqiListElement_s_wrapper_registry (*_PyNs3CqiListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DataRate *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRate;


extern PyTypeObject *_PyNs3DataRate_Type;
#define PyNs3DataRate_Type (*_PyNs3DataRate_Type)

extern std::map<void*, PyObject*> *_PyNs3DataRate_wrapper_registry;
#define PyNs3DataRate_wrapper_registry (*_PyNs3DataRate_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeAccessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeAccessor;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type;
#define PyNs3DefaultDeleter__Ns3AttributeAccessor_Type (*_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeChecker > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeChecker;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeChecker_Type;
#define PyNs3DefaultDeleter__Ns3AttributeChecker_Type (*_PyNs3DefaultDeleter__Ns3AttributeChecker_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeValue_Type;
#define PyNs3DefaultDeleter__Ns3AttributeValue_Type (*_PyNs3DefaultDeleter__Ns3AttributeValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::CallbackImplBase > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3CallbackImplBase;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type;
#define PyNs3DefaultDeleter__Ns3CallbackImplBase_Type (*_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry (*_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Event > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3Event;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3Event_Type;
#define PyNs3DefaultDeleter__Ns3Event_Type (*_PyNs3DefaultDeleter__Ns3Event_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3Event_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3Event_wrapper_registry (*_PyNs3DefaultDeleter__Ns3Event_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::EventImpl > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3EventImpl;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3EventImpl_Type;
#define PyNs3DefaultDeleter__Ns3EventImpl_Type (*_PyNs3DefaultDeleter__Ns3EventImpl_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry (*_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Hash::Implementation > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3HashImplementation;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3HashImplementation_Type;
#define PyNs3DefaultDeleter__Ns3HashImplementation_Type (*_PyNs3DefaultDeleter__Ns3HashImplementation_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry (*_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::LteControlMessage > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3LteControlMessage;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3LteControlMessage_Type;
#define PyNs3DefaultDeleter__Ns3LteControlMessage_Type (*_PyNs3DefaultDeleter__Ns3LteControlMessage_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3LteControlMessage_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3LteControlMessage_wrapper_registry (*_PyNs3DefaultDeleter__Ns3LteControlMessage_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::LteHarqPhy > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3LteHarqPhy;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3LteHarqPhy_Type;
#define PyNs3DefaultDeleter__Ns3LteHarqPhy_Type (*_PyNs3DefaultDeleter__Ns3LteHarqPhy_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3LteHarqPhy_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3LteHarqPhy_wrapper_registry (*_PyNs3DefaultDeleter__Ns3LteHarqPhy_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::NixVector > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3NixVector;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3NixVector_Type;
#define PyNs3DefaultDeleter__Ns3NixVector_Type (*_PyNs3DefaultDeleter__Ns3NixVector_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry (*_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Packet > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3Packet;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3Packet_Type;
#define PyNs3DefaultDeleter__Ns3Packet_Type (*_PyNs3DefaultDeleter__Ns3Packet_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3Packet_wrapper_registry (*_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumModel > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumModel;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumModel_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumModel_Type (*_PyNs3DefaultDeleter__Ns3SpectrumModel_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumSignalParameters > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumSignalParameters;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type (*_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumValue_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumValue_Type (*_PyNs3DefaultDeleter__Ns3SpectrumValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::TraceSourceAccessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3TraceSourceAccessor;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type;
#define PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type (*_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry (*_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::VendorSpecificValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3VendorSpecificValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3VendorSpecificValue_Type;
#define PyNs3DefaultDeleter__Ns3VendorSpecificValue_Type (*_PyNs3DefaultDeleter__Ns3VendorSpecificValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3VendorSpecificValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3VendorSpecificValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3VendorSpecificValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::WifiPpdu > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3WifiPpdu;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3WifiPpdu_Type;
#define PyNs3DefaultDeleter__Ns3WifiPpdu_Type (*_PyNs3DefaultDeleter__Ns3WifiPpdu_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3WifiPpdu_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3WifiPpdu_wrapper_registry (*_PyNs3DefaultDeleter__Ns3WifiPpdu_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DlDciListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlDciListElement_s;


extern PyTypeObject *_PyNs3DlDciListElement_s_Type;
#define PyNs3DlDciListElement_s_Type (*_PyNs3DlDciListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3DlDciListElement_s_wrapper_registry;
#define PyNs3DlDciListElement_s_wrapper_registry (*_PyNs3DlDciListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DlInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlInfoListElement_s;


extern PyTypeObject *_PyNs3DlInfoListElement_s_Type;
#define PyNs3DlInfoListElement_s_Type (*_PyNs3DlInfoListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3DlInfoListElement_s_wrapper_registry;
#define PyNs3DlInfoListElement_s_wrapper_registry (*_PyNs3DlInfoListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DlSchedulingCallbackInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlSchedulingCallbackInfo;


extern PyTypeObject *_PyNs3DlSchedulingCallbackInfo_Type;
#define PyNs3DlSchedulingCallbackInfo_Type (*_PyNs3DlSchedulingCallbackInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3DlSchedulingCallbackInfo_wrapper_registry;
#define PyNs3DlSchedulingCallbackInfo_wrapper_registry (*_PyNs3DlSchedulingCallbackInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DrxConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DrxConfig_s;


extern PyTypeObject *_PyNs3DrxConfig_s_Type;
#define PyNs3DrxConfig_s_Type (*_PyNs3DrxConfig_s_Type)

extern std::map<void*, PyObject*> *_PyNs3DrxConfig_s_wrapper_registry;
#define PyNs3DrxConfig_s_wrapper_registry (*_PyNs3DrxConfig_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EutranMeasurementMapping *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EutranMeasurementMapping;


extern PyTypeObject *_PyNs3EutranMeasurementMapping_Type;
#define PyNs3EutranMeasurementMapping_Type (*_PyNs3EutranMeasurementMapping_Type)

extern std::map<void*, PyObject*> *_PyNs3EutranMeasurementMapping_wrapper_registry;
#define PyNs3EutranMeasurementMapping_wrapper_registry (*_PyNs3EutranMeasurementMapping_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProvider;


extern PyTypeObject *_PyNs3FfMacSchedSapProvider_Type;
#define PyNs3FfMacSchedSapProvider_Type (*_PyNs3FfMacSchedSapProvider_Type)

class PyNs3FfMacSchedSapProvider__PythonHelper : public ns3::FfMacSchedSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacSchedSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProvider_wrapper_registry;
#define PyNs3FfMacSchedSapProvider_wrapper_registry (*_PyNs3FfMacSchedSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUser;


extern PyTypeObject *_PyNs3FfMacSchedSapUser_Type;
#define PyNs3FfMacSchedSapUser_Type (*_PyNs3FfMacSchedSapUser_Type)

class PyNs3FfMacSchedSapUser__PythonHelper : public ns3::FfMacSchedSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacSchedSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapUser_wrapper_registry;
#define PyNs3FfMacSchedSapUser_wrapper_registry (*_PyNs3FfMacSchedSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser::SchedDlConfigIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUserSchedDlConfigIndParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_Type;
#define PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_Type (*_PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_wrapper_registry;
#define PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_wrapper_registry (*_PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser::SchedUlConfigIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUserSchedUlConfigIndParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_Type;
#define PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_Type (*_PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_wrapper_registry;
#define PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_wrapper_registry (*_PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::GbrQosInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GbrQosInformation;


extern PyTypeObject *_PyNs3GbrQosInformation_Type;
#define PyNs3GbrQosInformation_Type (*_PyNs3GbrQosInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3GbrQosInformation_wrapper_registry;
#define PyNs3GbrQosInformation_wrapper_registry (*_PyNs3GbrQosInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HarqProcessInfoElement_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HarqProcessInfoElement_t;


extern PyTypeObject *_PyNs3HarqProcessInfoElement_t_Type;
#define PyNs3HarqProcessInfoElement_t_Type (*_PyNs3HarqProcessInfoElement_t_Type)

extern std::map<void*, PyObject*> *_PyNs3HarqProcessInfoElement_t_wrapper_registry;
#define PyNs3HarqProcessInfoElement_t_wrapper_registry (*_PyNs3HarqProcessInfoElement_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject *_PyNs3Hasher_Type;
#define PyNs3Hasher_Type (*_PyNs3Hasher_Type)

extern std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;
#define PyNs3Hasher_wrapper_registry (*_PyNs3Hasher_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HeMuUserInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeMuUserInfo;


extern PyTypeObject *_PyNs3HeMuUserInfo_Type;
#define PyNs3HeMuUserInfo_Type (*_PyNs3HeMuUserInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3HeMuUserInfo_wrapper_registry;
#define PyNs3HeMuUserInfo_wrapper_registry (*_PyNs3HeMuUserInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HePreambleParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HePreambleParameters;


extern PyTypeObject *_PyNs3HePreambleParameters_Type;
#define PyNs3HePreambleParameters_Type (*_PyNs3HePreambleParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3HePreambleParameters_wrapper_registry;
#define PyNs3HePreambleParameters_wrapper_registry (*_PyNs3HePreambleParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HeRu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeRu;


extern PyTypeObject *_PyNs3HeRu_Type;
#define PyNs3HeRu_Type (*_PyNs3HeRu_Type)

extern std::map<void*, PyObject*> *_PyNs3HeRu_wrapper_registry;
#define PyNs3HeRu_wrapper_registry (*_PyNs3HeRu_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HeRu::RuSpec *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeRuRuSpec;


extern PyTypeObject *_PyNs3HeRuRuSpec_Type;
#define PyNs3HeRuRuSpec_Type (*_PyNs3HeRuRuSpec_Type)

extern std::map<void*, PyObject*> *_PyNs3HeRuRuSpec_wrapper_registry;
#define PyNs3HeRuRuSpec_wrapper_registry (*_PyNs3HeRuRuSpec_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HigherLayerSelected_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HigherLayerSelected_s;


extern PyTypeObject *_PyNs3HigherLayerSelected_s_Type;
#define PyNs3HigherLayerSelected_s_Type (*_PyNs3HigherLayerSelected_s_Type)

extern std::map<void*, PyObject*> *_PyNs3HigherLayerSelected_s_wrapper_registry;
#define PyNs3HigherLayerSelected_s_wrapper_registry (*_PyNs3HigherLayerSelected_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ImsiLcidPair_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ImsiLcidPair_t;


extern PyTypeObject *_PyNs3ImsiLcidPair_t_Type;
#define PyNs3ImsiLcidPair_t_Type (*_PyNs3ImsiLcidPair_t_Type)

extern std::map<void*, PyObject*> *_PyNs3ImsiLcidPair_t_wrapper_registry;
#define PyNs3ImsiLcidPair_t_wrapper_registry (*_PyNs3ImsiLcidPair_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Inet6SocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Inet6SocketAddress;


extern PyTypeObject *_PyNs3Inet6SocketAddress_Type;
#define PyNs3Inet6SocketAddress_Type (*_PyNs3Inet6SocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Inet6SocketAddress_wrapper_registry;
#define PyNs3Inet6SocketAddress_wrapper_registry (*_PyNs3Inet6SocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InetSocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InetSocketAddress;


extern PyTypeObject *_PyNs3InetSocketAddress_Type;
#define PyNs3InetSocketAddress_Type (*_PyNs3InetSocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3InetSocketAddress_wrapper_registry;
#define PyNs3InetSocketAddress_wrapper_registry (*_PyNs3InetSocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelper;


extern PyTypeObject *_PyNs3InterferenceHelper_Type;
#define PyNs3InterferenceHelper_Type (*_PyNs3InterferenceHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3InterferenceHelper_wrapper_registry;
#define PyNs3InterferenceHelper_wrapper_registry (*_PyNs3InterferenceHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper::SnrPer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelperSnrPer;


extern PyTypeObject *_PyNs3InterferenceHelperSnrPer_Type;
#define PyNs3InterferenceHelperSnrPer_Type (*_PyNs3InterferenceHelperSnrPer_Type)

extern std::map<void*, PyObject*> *_PyNs3InterferenceHelperSnrPer_wrapper_registry;
#define PyNs3InterferenceHelperSnrPer_wrapper_registry (*_PyNs3InterferenceHelperSnrPer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceAddress;


extern PyTypeObject *_PyNs3Ipv4InterfaceAddress_Type;
#define PyNs3Ipv4InterfaceAddress_Type (*_PyNs3Ipv4InterfaceAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4InterfaceAddress_wrapper_registry;
#define PyNs3Ipv4InterfaceAddress_wrapper_registry (*_PyNs3Ipv4InterfaceAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogComponent *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogComponent;


extern PyTypeObject *_PyNs3LogComponent_Type;
#define PyNs3LogComponent_Type (*_PyNs3LogComponent_Type)

extern std::map<void*, PyObject*> *_PyNs3LogComponent_wrapper_registry;
#define PyNs3LogComponent_wrapper_registry (*_PyNs3LogComponent_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogicalChannelConfigListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogicalChannelConfigListElement_s;


extern PyTypeObject *_PyNs3LogicalChannelConfigListElement_s_Type;
#define PyNs3LogicalChannelConfigListElement_s_Type (*_PyNs3LogicalChannelConfigListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3LogicalChannelConfigListElement_s_wrapper_registry;
#define PyNs3LogicalChannelConfigListElement_s_wrapper_registry (*_PyNs3LogicalChannelConfigListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCphySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCphySapProvider;


extern PyTypeObject *_PyNs3LteEnbCphySapProvider_Type;
#define PyNs3LteEnbCphySapProvider_Type (*_PyNs3LteEnbCphySapProvider_Type)

class PyNs3LteEnbCphySapProvider__PythonHelper : public ns3::LteEnbCphySapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbCphySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteEnbCphySapProvider_wrapper_registry;
#define PyNs3LteEnbCphySapProvider_wrapper_registry (*_PyNs3LteEnbCphySapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCphySapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCphySapUser;


extern PyTypeObject *_PyNs3LteEnbCphySapUser_Type;
#define PyNs3LteEnbCphySapUser_Type (*_PyNs3LteEnbCphySapUser_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbCphySapUser_wrapper_registry;
#define PyNs3LteEnbCphySapUser_wrapper_registry (*_PyNs3LteEnbCphySapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhySapProvider;


extern PyTypeObject *_PyNs3LteEnbPhySapProvider_Type;
#define PyNs3LteEnbPhySapProvider_Type (*_PyNs3LteEnbPhySapProvider_Type)

class PyNs3LteEnbPhySapProvider__PythonHelper : public ns3::LteEnbPhySapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteEnbPhySapProvider_wrapper_registry;
#define PyNs3LteEnbPhySapProvider_wrapper_registry (*_PyNs3LteEnbPhySapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhySapUser;


extern PyTypeObject *_PyNs3LteEnbPhySapUser_Type;
#define PyNs3LteEnbPhySapUser_Type (*_PyNs3LteEnbPhySapUser_Type)

class PyNs3LteEnbPhySapUser__PythonHelper : public ns3::LteEnbPhySapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteEnbPhySapUser_wrapper_registry;
#define PyNs3LteEnbPhySapUser_wrapper_registry (*_PyNs3LteEnbPhySapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteFfConverter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfConverter;


extern PyTypeObject *_PyNs3LteFfConverter_Type;
#define PyNs3LteFfConverter_Type (*_PyNs3LteFfConverter_Type)

extern std::map<void*, PyObject*> *_PyNs3LteFfConverter_wrapper_registry;
#define PyNs3LteFfConverter_wrapper_registry (*_PyNs3LteFfConverter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteFlowId_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFlowId_t;


extern PyTypeObject *_PyNs3LteFlowId_t_Type;
#define PyNs3LteFlowId_t_Type (*_PyNs3LteFlowId_t_Type)

extern std::map<void*, PyObject*> *_PyNs3LteFlowId_t_wrapper_registry;
#define PyNs3LteFlowId_t_wrapper_registry (*_PyNs3LteFlowId_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSap;


extern PyTypeObject *_PyNs3LteRrcSap_Type;
#define PyNs3LteRrcSap_Type (*_PyNs3LteRrcSap_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSap_wrapper_registry;
#define PyNs3LteRrcSap_wrapper_registry (*_PyNs3LteRrcSap_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AntennaInfoCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAntennaInfoCommon;


extern PyTypeObject *_PyNs3LteRrcSapAntennaInfoCommon_Type;
#define PyNs3LteRrcSapAntennaInfoCommon_Type (*_PyNs3LteRrcSapAntennaInfoCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapAntennaInfoCommon_wrapper_registry;
#define PyNs3LteRrcSapAntennaInfoCommon_wrapper_registry (*_PyNs3LteRrcSapAntennaInfoCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AntennaInfoDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAntennaInfoDedicated;


extern PyTypeObject *_PyNs3LteRrcSapAntennaInfoDedicated_Type;
#define PyNs3LteRrcSapAntennaInfoDedicated_Type (*_PyNs3LteRrcSapAntennaInfoDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapAntennaInfoDedicated_wrapper_registry;
#define PyNs3LteRrcSapAntennaInfoDedicated_wrapper_registry (*_PyNs3LteRrcSapAntennaInfoDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AntennaInfoUl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAntennaInfoUl;


extern PyTypeObject *_PyNs3LteRrcSapAntennaInfoUl_Type;
#define PyNs3LteRrcSapAntennaInfoUl_Type (*_PyNs3LteRrcSapAntennaInfoUl_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapAntennaInfoUl_wrapper_registry;
#define PyNs3LteRrcSapAntennaInfoUl_wrapper_registry (*_PyNs3LteRrcSapAntennaInfoUl_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AsConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAsConfig;


extern PyTypeObject *_PyNs3LteRrcSapAsConfig_Type;
#define PyNs3LteRrcSapAsConfig_Type (*_PyNs3LteRrcSapAsConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapAsConfig_wrapper_registry;
#define PyNs3LteRrcSapAsConfig_wrapper_registry (*_PyNs3LteRrcSapAsConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::BlackCellsToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapBlackCellsToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapBlackCellsToAddMod_Type;
#define PyNs3LteRrcSapBlackCellsToAddMod_Type (*_PyNs3LteRrcSapBlackCellsToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapBlackCellsToAddMod_wrapper_registry;
#define PyNs3LteRrcSapBlackCellsToAddMod_wrapper_registry (*_PyNs3LteRrcSapBlackCellsToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CarrierBandwidthEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCarrierBandwidthEutra;


extern PyTypeObject *_PyNs3LteRrcSapCarrierBandwidthEutra_Type;
#define PyNs3LteRrcSapCarrierBandwidthEutra_Type (*_PyNs3LteRrcSapCarrierBandwidthEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCarrierBandwidthEutra_wrapper_registry;
#define PyNs3LteRrcSapCarrierBandwidthEutra_wrapper_registry (*_PyNs3LteRrcSapCarrierBandwidthEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CarrierFreqEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCarrierFreqEutra;


extern PyTypeObject *_PyNs3LteRrcSapCarrierFreqEutra_Type;
#define PyNs3LteRrcSapCarrierFreqEutra_Type (*_PyNs3LteRrcSapCarrierFreqEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCarrierFreqEutra_wrapper_registry;
#define PyNs3LteRrcSapCarrierFreqEutra_wrapper_registry (*_PyNs3LteRrcSapCarrierFreqEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellAccessRelatedInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellAccessRelatedInfo;


extern PyTypeObject *_PyNs3LteRrcSapCellAccessRelatedInfo_Type;
#define PyNs3LteRrcSapCellAccessRelatedInfo_Type (*_PyNs3LteRrcSapCellAccessRelatedInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCellAccessRelatedInfo_wrapper_registry;
#define PyNs3LteRrcSapCellAccessRelatedInfo_wrapper_registry (*_PyNs3LteRrcSapCellAccessRelatedInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellIdentification *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellIdentification;


extern PyTypeObject *_PyNs3LteRrcSapCellIdentification_Type;
#define PyNs3LteRrcSapCellIdentification_Type (*_PyNs3LteRrcSapCellIdentification_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCellIdentification_wrapper_registry;
#define PyNs3LteRrcSapCellIdentification_wrapper_registry (*_PyNs3LteRrcSapCellIdentification_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellSelectionInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellSelectionInfo;


extern PyTypeObject *_PyNs3LteRrcSapCellSelectionInfo_Type;
#define PyNs3LteRrcSapCellSelectionInfo_Type (*_PyNs3LteRrcSapCellSelectionInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCellSelectionInfo_wrapper_registry;
#define PyNs3LteRrcSapCellSelectionInfo_wrapper_registry (*_PyNs3LteRrcSapCellSelectionInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellsToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellsToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapCellsToAddMod_Type;
#define PyNs3LteRrcSapCellsToAddMod_Type (*_PyNs3LteRrcSapCellsToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCellsToAddMod_wrapper_registry;
#define PyNs3LteRrcSapCellsToAddMod_wrapper_registry (*_PyNs3LteRrcSapCellsToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CgiInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCgiInfo;


extern PyTypeObject *_PyNs3LteRrcSapCgiInfo_Type;
#define PyNs3LteRrcSapCgiInfo_Type (*_PyNs3LteRrcSapCgiInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCgiInfo_wrapper_registry;
#define PyNs3LteRrcSapCgiInfo_wrapper_registry (*_PyNs3LteRrcSapCgiInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::DrbToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapDrbToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapDrbToAddMod_Type;
#define PyNs3LteRrcSapDrbToAddMod_Type (*_PyNs3LteRrcSapDrbToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapDrbToAddMod_wrapper_registry;
#define PyNs3LteRrcSapDrbToAddMod_wrapper_registry (*_PyNs3LteRrcSapDrbToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::FreqInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapFreqInfo;


extern PyTypeObject *_PyNs3LteRrcSapFreqInfo_Type;
#define PyNs3LteRrcSapFreqInfo_Type (*_PyNs3LteRrcSapFreqInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapFreqInfo_wrapper_registry;
#define PyNs3LteRrcSapFreqInfo_wrapper_registry (*_PyNs3LteRrcSapFreqInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::HandoverPreparationInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapHandoverPreparationInfo;


extern PyTypeObject *_PyNs3LteRrcSapHandoverPreparationInfo_Type;
#define PyNs3LteRrcSapHandoverPreparationInfo_Type (*_PyNs3LteRrcSapHandoverPreparationInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapHandoverPreparationInfo_wrapper_registry;
#define PyNs3LteRrcSapHandoverPreparationInfo_wrapper_registry (*_PyNs3LteRrcSapHandoverPreparationInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::LogicalChannelConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapLogicalChannelConfig;


extern PyTypeObject *_PyNs3LteRrcSapLogicalChannelConfig_Type;
#define PyNs3LteRrcSapLogicalChannelConfig_Type (*_PyNs3LteRrcSapLogicalChannelConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapLogicalChannelConfig_wrapper_registry;
#define PyNs3LteRrcSapLogicalChannelConfig_wrapper_registry (*_PyNs3LteRrcSapLogicalChannelConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MasterInformationBlock *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMasterInformationBlock;


extern PyTypeObject *_PyNs3LteRrcSapMasterInformationBlock_Type;
#define PyNs3LteRrcSapMasterInformationBlock_Type (*_PyNs3LteRrcSapMasterInformationBlock_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMasterInformationBlock_wrapper_registry;
#define PyNs3LteRrcSapMasterInformationBlock_wrapper_registry (*_PyNs3LteRrcSapMasterInformationBlock_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasConfig;


extern PyTypeObject *_PyNs3LteRrcSapMeasConfig_Type;
#define PyNs3LteRrcSapMeasConfig_Type (*_PyNs3LteRrcSapMeasConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasConfig_wrapper_registry;
#define PyNs3LteRrcSapMeasConfig_wrapper_registry (*_PyNs3LteRrcSapMeasConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasGapConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasGapConfig;


extern PyTypeObject *_PyNs3LteRrcSapMeasGapConfig_Type;
#define PyNs3LteRrcSapMeasGapConfig_Type (*_PyNs3LteRrcSapMeasGapConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasGapConfig_wrapper_registry;
#define PyNs3LteRrcSapMeasGapConfig_wrapper_registry (*_PyNs3LteRrcSapMeasGapConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasIdToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasIdToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapMeasIdToAddMod_Type;
#define PyNs3LteRrcSapMeasIdToAddMod_Type (*_PyNs3LteRrcSapMeasIdToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasIdToAddMod_wrapper_registry;
#define PyNs3LteRrcSapMeasIdToAddMod_wrapper_registry (*_PyNs3LteRrcSapMeasIdToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasObjectEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasObjectEutra;


extern PyTypeObject *_PyNs3LteRrcSapMeasObjectEutra_Type;
#define PyNs3LteRrcSapMeasObjectEutra_Type (*_PyNs3LteRrcSapMeasObjectEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasObjectEutra_wrapper_registry;
#define PyNs3LteRrcSapMeasObjectEutra_wrapper_registry (*_PyNs3LteRrcSapMeasObjectEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasObjectToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasObjectToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapMeasObjectToAddMod_Type;
#define PyNs3LteRrcSapMeasObjectToAddMod_Type (*_PyNs3LteRrcSapMeasObjectToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasObjectToAddMod_wrapper_registry;
#define PyNs3LteRrcSapMeasObjectToAddMod_wrapper_registry (*_PyNs3LteRrcSapMeasObjectToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultBestNeighCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultBestNeighCell;


extern PyTypeObject *_PyNs3LteRrcSapMeasResultBestNeighCell_Type;
#define PyNs3LteRrcSapMeasResultBestNeighCell_Type (*_PyNs3LteRrcSapMeasResultBestNeighCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResultBestNeighCell_wrapper_registry;
#define PyNs3LteRrcSapMeasResultBestNeighCell_wrapper_registry (*_PyNs3LteRrcSapMeasResultBestNeighCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultEutra;


extern PyTypeObject *_PyNs3LteRrcSapMeasResultEutra_Type;
#define PyNs3LteRrcSapMeasResultEutra_Type (*_PyNs3LteRrcSapMeasResultEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResultEutra_wrapper_registry;
#define PyNs3LteRrcSapMeasResultEutra_wrapper_registry (*_PyNs3LteRrcSapMeasResultEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultScell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultScell;


extern PyTypeObject *_PyNs3LteRrcSapMeasResultScell_Type;
#define PyNs3LteRrcSapMeasResultScell_Type (*_PyNs3LteRrcSapMeasResultScell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResultScell_wrapper_registry;
#define PyNs3LteRrcSapMeasResultScell_wrapper_registry (*_PyNs3LteRrcSapMeasResultScell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultServFreqList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultServFreqList;


extern PyTypeObject *_PyNs3LteRrcSapMeasResultServFreqList_Type;
#define PyNs3LteRrcSapMeasResultServFreqList_Type (*_PyNs3LteRrcSapMeasResultServFreqList_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResultServFreqList_wrapper_registry;
#define PyNs3LteRrcSapMeasResultServFreqList_wrapper_registry (*_PyNs3LteRrcSapMeasResultServFreqList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResults *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResults;


extern PyTypeObject *_PyNs3LteRrcSapMeasResults_Type;
#define PyNs3LteRrcSapMeasResults_Type (*_PyNs3LteRrcSapMeasResults_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResults_wrapper_registry;
#define PyNs3LteRrcSapMeasResults_wrapper_registry (*_PyNs3LteRrcSapMeasResults_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasurementReport *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasurementReport;


extern PyTypeObject *_PyNs3LteRrcSapMeasurementReport_Type;
#define PyNs3LteRrcSapMeasurementReport_Type (*_PyNs3LteRrcSapMeasurementReport_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasurementReport_wrapper_registry;
#define PyNs3LteRrcSapMeasurementReport_wrapper_registry (*_PyNs3LteRrcSapMeasurementReport_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MobilityControlInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMobilityControlInfo;


extern PyTypeObject *_PyNs3LteRrcSapMobilityControlInfo_Type;
#define PyNs3LteRrcSapMobilityControlInfo_Type (*_PyNs3LteRrcSapMobilityControlInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMobilityControlInfo_wrapper_registry;
#define PyNs3LteRrcSapMobilityControlInfo_wrapper_registry (*_PyNs3LteRrcSapMobilityControlInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MobilityStateParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMobilityStateParameters;


extern PyTypeObject *_PyNs3LteRrcSapMobilityStateParameters_Type;
#define PyNs3LteRrcSapMobilityStateParameters_Type (*_PyNs3LteRrcSapMobilityStateParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMobilityStateParameters_wrapper_registry;
#define PyNs3LteRrcSapMobilityStateParameters_wrapper_registry (*_PyNs3LteRrcSapMobilityStateParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::NonCriticalExtensionConfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapNonCriticalExtensionConfiguration;


extern PyTypeObject *_PyNs3LteRrcSapNonCriticalExtensionConfiguration_Type;
#define PyNs3LteRrcSapNonCriticalExtensionConfiguration_Type (*_PyNs3LteRrcSapNonCriticalExtensionConfiguration_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapNonCriticalExtensionConfiguration_wrapper_registry;
#define PyNs3LteRrcSapNonCriticalExtensionConfiguration_wrapper_registry (*_PyNs3LteRrcSapNonCriticalExtensionConfiguration_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::NonUlConfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapNonUlConfiguration;


extern PyTypeObject *_PyNs3LteRrcSapNonUlConfiguration_Type;
#define PyNs3LteRrcSapNonUlConfiguration_Type (*_PyNs3LteRrcSapNonUlConfiguration_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapNonUlConfiguration_wrapper_registry;
#define PyNs3LteRrcSapNonUlConfiguration_wrapper_registry (*_PyNs3LteRrcSapNonUlConfiguration_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PdschConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPdschConfigCommon;


extern PyTypeObject *_PyNs3LteRrcSapPdschConfigCommon_Type;
#define PyNs3LteRrcSapPdschConfigCommon_Type (*_PyNs3LteRrcSapPdschConfigCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPdschConfigCommon_wrapper_registry;
#define PyNs3LteRrcSapPdschConfigCommon_wrapper_registry (*_PyNs3LteRrcSapPdschConfigCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PdschConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPdschConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapPdschConfigDedicated_Type;
#define PyNs3LteRrcSapPdschConfigDedicated_Type (*_PyNs3LteRrcSapPdschConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPdschConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapPdschConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapPdschConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PhysCellIdRange *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPhysCellIdRange;


extern PyTypeObject *_PyNs3LteRrcSapPhysCellIdRange_Type;
#define PyNs3LteRrcSapPhysCellIdRange_Type (*_PyNs3LteRrcSapPhysCellIdRange_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPhysCellIdRange_wrapper_registry;
#define PyNs3LteRrcSapPhysCellIdRange_wrapper_registry (*_PyNs3LteRrcSapPhysCellIdRange_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PhysicalConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPhysicalConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapPhysicalConfigDedicated_Type;
#define PyNs3LteRrcSapPhysicalConfigDedicated_Type (*_PyNs3LteRrcSapPhysicalConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPhysicalConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapPhysicalConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapPhysicalConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PhysicalConfigDedicatedSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPhysicalConfigDedicatedSCell;


extern PyTypeObject *_PyNs3LteRrcSapPhysicalConfigDedicatedSCell_Type;
#define PyNs3LteRrcSapPhysicalConfigDedicatedSCell_Type (*_PyNs3LteRrcSapPhysicalConfigDedicatedSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPhysicalConfigDedicatedSCell_wrapper_registry;
#define PyNs3LteRrcSapPhysicalConfigDedicatedSCell_wrapper_registry (*_PyNs3LteRrcSapPhysicalConfigDedicatedSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PlmnIdentityInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPlmnIdentityInfo;


extern PyTypeObject *_PyNs3LteRrcSapPlmnIdentityInfo_Type;
#define PyNs3LteRrcSapPlmnIdentityInfo_Type (*_PyNs3LteRrcSapPlmnIdentityInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPlmnIdentityInfo_wrapper_registry;
#define PyNs3LteRrcSapPlmnIdentityInfo_wrapper_registry (*_PyNs3LteRrcSapPlmnIdentityInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PrachConfigSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPrachConfigSCell;


extern PyTypeObject *_PyNs3LteRrcSapPrachConfigSCell_Type;
#define PyNs3LteRrcSapPrachConfigSCell_Type (*_PyNs3LteRrcSapPrachConfigSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPrachConfigSCell_wrapper_registry;
#define PyNs3LteRrcSapPrachConfigSCell_wrapper_registry (*_PyNs3LteRrcSapPrachConfigSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PreambleInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPreambleInfo;


extern PyTypeObject *_PyNs3LteRrcSapPreambleInfo_Type;
#define PyNs3LteRrcSapPreambleInfo_Type (*_PyNs3LteRrcSapPreambleInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPreambleInfo_wrapper_registry;
#define PyNs3LteRrcSapPreambleInfo_wrapper_registry (*_PyNs3LteRrcSapPreambleInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PuschConfigDedicatedSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPuschConfigDedicatedSCell;


extern PyTypeObject *_PyNs3LteRrcSapPuschConfigDedicatedSCell_Type;
#define PyNs3LteRrcSapPuschConfigDedicatedSCell_Type (*_PyNs3LteRrcSapPuschConfigDedicatedSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPuschConfigDedicatedSCell_wrapper_registry;
#define PyNs3LteRrcSapPuschConfigDedicatedSCell_wrapper_registry (*_PyNs3LteRrcSapPuschConfigDedicatedSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::QuantityConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapQuantityConfig;


extern PyTypeObject *_PyNs3LteRrcSapQuantityConfig_Type;
#define PyNs3LteRrcSapQuantityConfig_Type (*_PyNs3LteRrcSapQuantityConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapQuantityConfig_wrapper_registry;
#define PyNs3LteRrcSapQuantityConfig_wrapper_registry (*_PyNs3LteRrcSapQuantityConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RaSupervisionInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRaSupervisionInfo;


extern PyTypeObject *_PyNs3LteRrcSapRaSupervisionInfo_Type;
#define PyNs3LteRrcSapRaSupervisionInfo_Type (*_PyNs3LteRrcSapRaSupervisionInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRaSupervisionInfo_wrapper_registry;
#define PyNs3LteRrcSapRaSupervisionInfo_wrapper_registry (*_PyNs3LteRrcSapRaSupervisionInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RachConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRachConfigCommon;


extern PyTypeObject *_PyNs3LteRrcSapRachConfigCommon_Type;
#define PyNs3LteRrcSapRachConfigCommon_Type (*_PyNs3LteRrcSapRachConfigCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRachConfigCommon_wrapper_registry;
#define PyNs3LteRrcSapRachConfigCommon_wrapper_registry (*_PyNs3LteRrcSapRachConfigCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RachConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRachConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapRachConfigDedicated_Type;
#define PyNs3LteRrcSapRachConfigDedicated_Type (*_PyNs3LteRrcSapRachConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRachConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapRachConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapRachConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigCommon;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigCommon_Type;
#define PyNs3LteRrcSapRadioResourceConfigCommon_Type (*_PyNs3LteRrcSapRadioResourceConfigCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigCommon_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigCommon_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigCommonSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigCommonSCell;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigCommonSCell_Type;
#define PyNs3LteRrcSapRadioResourceConfigCommonSCell_Type (*_PyNs3LteRrcSapRadioResourceConfigCommonSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigCommonSCell_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigCommonSCell_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigCommonSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigCommonSib *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigCommonSib;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigCommonSib_Type;
#define PyNs3LteRrcSapRadioResourceConfigCommonSib_Type (*_PyNs3LteRrcSapRadioResourceConfigCommonSib_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigCommonSib_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigCommonSib_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigCommonSib_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigDedicated_Type;
#define PyNs3LteRrcSapRadioResourceConfigDedicated_Type (*_PyNs3LteRrcSapRadioResourceConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigDedicatedSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigDedicatedSCell;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_Type;
#define PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_Type (*_PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReestabUeIdentity *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReestabUeIdentity;


extern PyTypeObject *_PyNs3LteRrcSapReestabUeIdentity_Type;
#define PyNs3LteRrcSapReestabUeIdentity_Type (*_PyNs3LteRrcSapReestabUeIdentity_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapReestabUeIdentity_wrapper_registry;
#define PyNs3LteRrcSapReestabUeIdentity_wrapper_registry (*_PyNs3LteRrcSapReestabUeIdentity_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReportConfigEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReportConfigEutra;


extern PyTypeObject *_PyNs3LteRrcSapReportConfigEutra_Type;
#define PyNs3LteRrcSapReportConfigEutra_Type (*_PyNs3LteRrcSapReportConfigEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapReportConfigEutra_wrapper_registry;
#define PyNs3LteRrcSapReportConfigEutra_wrapper_registry (*_PyNs3LteRrcSapReportConfigEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReportConfigToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReportConfigToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapReportConfigToAddMod_Type;
#define PyNs3LteRrcSapReportConfigToAddMod_Type (*_PyNs3LteRrcSapReportConfigToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapReportConfigToAddMod_wrapper_registry;
#define PyNs3LteRrcSapReportConfigToAddMod_wrapper_registry (*_PyNs3LteRrcSapReportConfigToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RlcConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRlcConfig;


extern PyTypeObject *_PyNs3LteRrcSapRlcConfig_Type;
#define PyNs3LteRrcSapRlcConfig_Type (*_PyNs3LteRrcSapRlcConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRlcConfig_wrapper_registry;
#define PyNs3LteRrcSapRlcConfig_wrapper_registry (*_PyNs3LteRrcSapRlcConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReconfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReconfiguration;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReconfiguration_Type;
#define PyNs3LteRrcSapRrcConnectionReconfiguration_Type (*_PyNs3LteRrcSapRrcConnectionReconfiguration_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReconfiguration_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReconfiguration_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReconfiguration_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReconfigurationCompleted *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReconfigurationCompleted;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_Type;
#define PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_Type (*_PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishment *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishment;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReestablishment_Type;
#define PyNs3LteRrcSapRrcConnectionReestablishment_Type (*_PyNs3LteRrcSapRrcConnectionReestablishment_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReestablishment_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReestablishment_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReestablishment_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentComplete *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentComplete;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReestablishmentComplete_Type;
#define PyNs3LteRrcSapRrcConnectionReestablishmentComplete_Type (*_PyNs3LteRrcSapRrcConnectionReestablishmentComplete_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReestablishmentComplete_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReestablishmentComplete_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReestablishmentComplete_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentReject *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentReject;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReestablishmentReject_Type;
#define PyNs3LteRrcSapRrcConnectionReestablishmentReject_Type (*_PyNs3LteRrcSapRrcConnectionReestablishmentReject_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReestablishmentReject_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReestablishmentReject_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReestablishmentReject_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentRequest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentRequest;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReestablishmentRequest_Type;
#define PyNs3LteRrcSapRrcConnectionReestablishmentRequest_Type (*_PyNs3LteRrcSapRrcConnectionReestablishmentRequest_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReestablishmentRequest_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReestablishmentRequest_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReestablishmentRequest_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReject *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReject;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReject_Type;
#define PyNs3LteRrcSapRrcConnectionReject_Type (*_PyNs3LteRrcSapRrcConnectionReject_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReject_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReject_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReject_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionRelease *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionRelease;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionRelease_Type;
#define PyNs3LteRrcSapRrcConnectionRelease_Type (*_PyNs3LteRrcSapRrcConnectionRelease_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionRelease_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionRelease_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionRelease_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionRequest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionRequest;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionRequest_Type;
#define PyNs3LteRrcSapRrcConnectionRequest_Type (*_PyNs3LteRrcSapRrcConnectionRequest_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionRequest_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionRequest_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionRequest_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionSetup *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionSetup;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionSetup_Type;
#define PyNs3LteRrcSapRrcConnectionSetup_Type (*_PyNs3LteRrcSapRrcConnectionSetup_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionSetup_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionSetup_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionSetup_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionSetupCompleted *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionSetupCompleted;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionSetupCompleted_Type;
#define PyNs3LteRrcSapRrcConnectionSetupCompleted_Type (*_PyNs3LteRrcSapRrcConnectionSetupCompleted_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionSetupCompleted_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionSetupCompleted_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionSetupCompleted_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SCellToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSCellToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapSCellToAddMod_Type;
#define PyNs3LteRrcSapSCellToAddMod_Type (*_PyNs3LteRrcSapSCellToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSCellToAddMod_wrapper_registry;
#define PyNs3LteRrcSapSCellToAddMod_wrapper_registry (*_PyNs3LteRrcSapSCellToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SoundingRsUlConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSoundingRsUlConfigCommon;


extern PyTypeObject *_PyNs3LteRrcSapSoundingRsUlConfigCommon_Type;
#define PyNs3LteRrcSapSoundingRsUlConfigCommon_Type (*_PyNs3LteRrcSapSoundingRsUlConfigCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSoundingRsUlConfigCommon_wrapper_registry;
#define PyNs3LteRrcSapSoundingRsUlConfigCommon_wrapper_registry (*_PyNs3LteRrcSapSoundingRsUlConfigCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SoundingRsUlConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSoundingRsUlConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapSoundingRsUlConfigDedicated_Type;
#define PyNs3LteRrcSapSoundingRsUlConfigDedicated_Type (*_PyNs3LteRrcSapSoundingRsUlConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSoundingRsUlConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapSoundingRsUlConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapSoundingRsUlConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SpeedStatePars *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSpeedStatePars;


extern PyTypeObject *_PyNs3LteRrcSapSpeedStatePars_Type;
#define PyNs3LteRrcSapSpeedStatePars_Type (*_PyNs3LteRrcSapSpeedStatePars_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSpeedStatePars_wrapper_registry;
#define PyNs3LteRrcSapSpeedStatePars_wrapper_registry (*_PyNs3LteRrcSapSpeedStatePars_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SpeedStateScaleFactors *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSpeedStateScaleFactors;


extern PyTypeObject *_PyNs3LteRrcSapSpeedStateScaleFactors_Type;
#define PyNs3LteRrcSapSpeedStateScaleFactors_Type (*_PyNs3LteRrcSapSpeedStateScaleFactors_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSpeedStateScaleFactors_wrapper_registry;
#define PyNs3LteRrcSapSpeedStateScaleFactors_wrapper_registry (*_PyNs3LteRrcSapSpeedStateScaleFactors_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SrbToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSrbToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapSrbToAddMod_Type;
#define PyNs3LteRrcSapSrbToAddMod_Type (*_PyNs3LteRrcSapSrbToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSrbToAddMod_wrapper_registry;
#define PyNs3LteRrcSapSrbToAddMod_wrapper_registry (*_PyNs3LteRrcSapSrbToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformation;


extern PyTypeObject *_PyNs3LteRrcSapSystemInformation_Type;
#define PyNs3LteRrcSapSystemInformation_Type (*_PyNs3LteRrcSapSystemInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSystemInformation_wrapper_registry;
#define PyNs3LteRrcSapSystemInformation_wrapper_registry (*_PyNs3LteRrcSapSystemInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformationBlockType1 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformationBlockType1;


extern PyTypeObject *_PyNs3LteRrcSapSystemInformationBlockType1_Type;
#define PyNs3LteRrcSapSystemInformationBlockType1_Type (*_PyNs3LteRrcSapSystemInformationBlockType1_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSystemInformationBlockType1_wrapper_registry;
#define PyNs3LteRrcSapSystemInformationBlockType1_wrapper_registry (*_PyNs3LteRrcSapSystemInformationBlockType1_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformationBlockType2 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformationBlockType2;


extern PyTypeObject *_PyNs3LteRrcSapSystemInformationBlockType2_Type;
#define PyNs3LteRrcSapSystemInformationBlockType2_Type (*_PyNs3LteRrcSapSystemInformationBlockType2_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSystemInformationBlockType2_wrapper_registry;
#define PyNs3LteRrcSapSystemInformationBlockType2_wrapper_registry (*_PyNs3LteRrcSapSystemInformationBlockType2_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ThresholdEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapThresholdEutra;


extern PyTypeObject *_PyNs3LteRrcSapThresholdEutra_Type;
#define PyNs3LteRrcSapThresholdEutra_Type (*_PyNs3LteRrcSapThresholdEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapThresholdEutra_wrapper_registry;
#define PyNs3LteRrcSapThresholdEutra_wrapper_registry (*_PyNs3LteRrcSapThresholdEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::TxFailParam *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapTxFailParam;


extern PyTypeObject *_PyNs3LteRrcSapTxFailParam_Type;
#define PyNs3LteRrcSapTxFailParam_Type (*_PyNs3LteRrcSapTxFailParam_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapTxFailParam_wrapper_registry;
#define PyNs3LteRrcSapTxFailParam_wrapper_registry (*_PyNs3LteRrcSapTxFailParam_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::UlConfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapUlConfiguration;


extern PyTypeObject *_PyNs3LteRrcSapUlConfiguration_Type;
#define PyNs3LteRrcSapUlConfiguration_Type (*_PyNs3LteRrcSapUlConfiguration_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapUlConfiguration_wrapper_registry;
#define PyNs3LteRrcSapUlConfiguration_wrapper_registry (*_PyNs3LteRrcSapUlConfiguration_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::UlPowerControlCommonSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapUlPowerControlCommonSCell;


extern PyTypeObject *_PyNs3LteRrcSapUlPowerControlCommonSCell_Type;
#define PyNs3LteRrcSapUlPowerControlCommonSCell_Type (*_PyNs3LteRrcSapUlPowerControlCommonSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapUlPowerControlCommonSCell_wrapper_registry;
#define PyNs3LteRrcSapUlPowerControlCommonSCell_wrapper_registry (*_PyNs3LteRrcSapUlPowerControlCommonSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::UlPowerControlDedicatedSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapUlPowerControlDedicatedSCell;


extern PyTypeObject *_PyNs3LteRrcSapUlPowerControlDedicatedSCell_Type;
#define PyNs3LteRrcSapUlPowerControlDedicatedSCell_Type (*_PyNs3LteRrcSapUlPowerControlDedicatedSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapUlPowerControlDedicatedSCell_wrapper_registry;
#define PyNs3LteRrcSapUlPowerControlDedicatedSCell_wrapper_registry (*_PyNs3LteRrcSapUlPowerControlDedicatedSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeConfig_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeConfig_t;


extern PyTypeObject *_PyNs3LteUeConfig_t_Type;
#define PyNs3LteUeConfig_t_Type (*_PyNs3LteUeConfig_t_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeConfig_t_wrapper_registry;
#define PyNs3LteUeConfig_t_wrapper_registry (*_PyNs3LteUeConfig_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapProvider;


extern PyTypeObject *_PyNs3LteUeCphySapProvider_Type;
#define PyNs3LteUeCphySapProvider_Type (*_PyNs3LteUeCphySapProvider_Type)

class PyNs3LteUeCphySapProvider__PythonHelper : public ns3::LteUeCphySapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCphySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUeCphySapProvider_wrapper_registry;
#define PyNs3LteUeCphySapProvider_wrapper_registry (*_PyNs3LteUeCphySapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUser;


extern PyTypeObject *_PyNs3LteUeCphySapUser_Type;
#define PyNs3LteUeCphySapUser_Type (*_PyNs3LteUeCphySapUser_Type)

class PyNs3LteUeCphySapUser__PythonHelper : public ns3::LteUeCphySapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCphySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUeCphySapUser_wrapper_registry;
#define PyNs3LteUeCphySapUser_wrapper_registry (*_PyNs3LteUeCphySapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser::UeMeasurementsElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUserUeMeasurementsElement;


extern PyTypeObject *_PyNs3LteUeCphySapUserUeMeasurementsElement_Type;
#define PyNs3LteUeCphySapUserUeMeasurementsElement_Type (*_PyNs3LteUeCphySapUserUeMeasurementsElement_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCphySapUserUeMeasurementsElement_wrapper_registry;
#define PyNs3LteUeCphySapUserUeMeasurementsElement_wrapper_registry (*_PyNs3LteUeCphySapUserUeMeasurementsElement_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser::UeMeasurementsParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUserUeMeasurementsParameters;


extern PyTypeObject *_PyNs3LteUeCphySapUserUeMeasurementsParameters_Type;
#define PyNs3LteUeCphySapUserUeMeasurementsParameters_Type (*_PyNs3LteUeCphySapUserUeMeasurementsParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCphySapUserUeMeasurementsParameters_wrapper_registry;
#define PyNs3LteUeCphySapUserUeMeasurementsParameters_wrapper_registry (*_PyNs3LteUeCphySapUserUeMeasurementsParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUePhySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhySapProvider;


extern PyTypeObject *_PyNs3LteUePhySapProvider_Type;
#define PyNs3LteUePhySapProvider_Type (*_PyNs3LteUePhySapProvider_Type)

class PyNs3LteUePhySapProvider__PythonHelper : public ns3::LteUePhySapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUePhySapProvider_wrapper_registry;
#define PyNs3LteUePhySapProvider_wrapper_registry (*_PyNs3LteUePhySapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUePhySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhySapUser;


extern PyTypeObject *_PyNs3LteUePhySapUser_Type;
#define PyNs3LteUePhySapUser_Type (*_PyNs3LteUePhySapUser_Type)

class PyNs3LteUePhySapUser__PythonHelper : public ns3::LteUePhySapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUePhySapUser_wrapper_registry;
#define PyNs3LteUePhySapUser_wrapper_registry (*_PyNs3LteUePhySapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapProvider;


extern PyTypeObject *_PyNs3LteUeRrcSapProvider_Type;
#define PyNs3LteUeRrcSapProvider_Type (*_PyNs3LteUeRrcSapProvider_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapProvider::CompleteSetupParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapProviderCompleteSetupParameters;


extern PyTypeObject *_PyNs3LteUeRrcSapProviderCompleteSetupParameters_Type;
#define PyNs3LteUeRrcSapProviderCompleteSetupParameters_Type (*_PyNs3LteUeRrcSapProviderCompleteSetupParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeRrcSapProviderCompleteSetupParameters_wrapper_registry;
#define PyNs3LteUeRrcSapProviderCompleteSetupParameters_wrapper_registry (*_PyNs3LteUeRrcSapProviderCompleteSetupParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapUser;


extern PyTypeObject *_PyNs3LteUeRrcSapUser_Type;
#define PyNs3LteUeRrcSapUser_Type (*_PyNs3LteUeRrcSapUser_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapUser::SetupParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapUserSetupParameters;


extern PyTypeObject *_PyNs3LteUeRrcSapUserSetupParameters_Type;
#define PyNs3LteUeRrcSapUserSetupParameters_Type (*_PyNs3LteUeRrcSapUserSetupParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeRrcSapUserSetupParameters_wrapper_registry;
#define PyNs3LteUeRrcSapUserSetupParameters_wrapper_registry (*_PyNs3LteUeRrcSapUserSetupParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject *_PyNs3Mac48Address_Type;
#define PyNs3Mac48Address_Type (*_PyNs3Mac48Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;
#define PyNs3Mac48Address_wrapper_registry (*_PyNs3Mac48Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac64Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac64Address;


extern PyTypeObject *_PyNs3Mac64Address_Type;
#define PyNs3Mac64Address_Type (*_PyNs3Mac64Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac64Address_wrapper_registry;
#define PyNs3Mac64Address_wrapper_registry (*_PyNs3Mac64Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac8Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac8Address;


extern PyTypeObject *_PyNs3Mac8Address_Type;
#define PyNs3Mac8Address_Type (*_PyNs3Mac8Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac8Address_wrapper_registry;
#define PyNs3Mac8Address_wrapper_registry (*_PyNs3Mac8Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::MacCeListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacCeListElement_s;


extern PyTypeObject *_PyNs3MacCeListElement_s_Type;
#define PyNs3MacCeListElement_s_Type (*_PyNs3MacCeListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3MacCeListElement_s_wrapper_registry;
#define PyNs3MacCeListElement_s_wrapper_registry (*_PyNs3MacCeListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::MacCeValue_u *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacCeValue_u;


extern PyTypeObject *_PyNs3MacCeValue_u_Type;
#define PyNs3MacCeValue_u_Type (*_PyNs3MacCeValue_u_Type)

extern std::map<void*, PyObject*> *_PyNs3MacCeValue_u_wrapper_registry;
#define PyNs3MacCeValue_u_wrapper_registry (*_PyNs3MacCeValue_u_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::MpduInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MpduInfo;


extern PyTypeObject *_PyNs3MpduInfo_Type;
#define PyNs3MpduInfo_Type (*_PyNs3MpduInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3MpduInfo_wrapper_registry;
#define PyNs3MpduInfo_wrapper_registry (*_PyNs3MpduInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeList;


extern PyTypeObject *_PyNs3NodeList_Type;
#define PyNs3NodeList_Type (*_PyNs3NodeList_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeList_wrapper_registry;
#define PyNs3NodeList_wrapper_registry (*_PyNs3NodeList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PagingInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PagingInfoListElement_s;


extern PyTypeObject *_PyNs3PagingInfoListElement_s_Type;
#define PyNs3PagingInfoListElement_s_Type (*_PyNs3PagingInfoListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3PagingInfoListElement_s_wrapper_registry;
#define PyNs3PagingInfoListElement_s_wrapper_registry (*_PyNs3PagingInfoListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ParameterLogger *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParameterLogger;


extern PyTypeObject *_PyNs3ParameterLogger_Type;
#define PyNs3ParameterLogger_Type (*_PyNs3ParameterLogger_Type)

extern std::map<void*, PyObject*> *_PyNs3ParameterLogger_wrapper_registry;
#define PyNs3ParameterLogger_wrapper_registry (*_PyNs3ParameterLogger_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PhichListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhichListElement_s;


extern PyTypeObject *_PyNs3PhichListElement_s_Type;
#define PyNs3PhichListElement_s_Type (*_PyNs3PhichListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3PhichListElement_s_wrapper_registry;
#define PyNs3PhichListElement_s_wrapper_registry (*_PyNs3PhichListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PhyReceptionStatParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyReceptionStatParameters;


extern PyTypeObject *_PyNs3PhyReceptionStatParameters_Type;
#define PyNs3PhyReceptionStatParameters_Type (*_PyNs3PhyReceptionStatParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3PhyReceptionStatParameters_wrapper_registry;
#define PyNs3PhyReceptionStatParameters_wrapper_registry (*_PyNs3PhyReceptionStatParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PhyTransmissionStatParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyTransmissionStatParameters;


extern PyTypeObject *_PyNs3PhyTransmissionStatParameters_Type;
#define PyNs3PhyTransmissionStatParameters_Type (*_PyNs3PhyTransmissionStatParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3PhyTransmissionStatParameters_wrapper_registry;
#define PyNs3PhyTransmissionStatParameters_wrapper_registry (*_PyNs3PhyTransmissionStatParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RachListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RachListElement_s;


extern PyTypeObject *_PyNs3RachListElement_s_Type;
#define PyNs3RachListElement_s_Type (*_PyNs3RachListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3RachListElement_s_wrapper_registry;
#define PyNs3RachListElement_s_wrapper_registry (*_PyNs3RachListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Rectangle *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Rectangle;


extern PyTypeObject *_PyNs3Rectangle_Type;
#define PyNs3Rectangle_Type (*_PyNs3Rectangle_Type)

extern std::map<void*, PyObject*> *_PyNs3Rectangle_wrapper_registry;
#define PyNs3Rectangle_wrapper_registry (*_PyNs3Rectangle_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RlcPduListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RlcPduListElement_s;


extern PyTypeObject *_PyNs3RlcPduListElement_s_Type;
#define PyNs3RlcPduListElement_s_Type (*_PyNs3RlcPduListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3RlcPduListElement_s_wrapper_registry;
#define PyNs3RlcPduListElement_s_wrapper_registry (*_PyNs3RlcPduListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SbMeasResult_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SbMeasResult_s;


extern PyTypeObject *_PyNs3SbMeasResult_s_Type;
#define PyNs3SbMeasResult_s_Type (*_PyNs3SbMeasResult_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SbMeasResult_s_wrapper_registry;
#define PyNs3SbMeasResult_s_wrapper_registry (*_PyNs3SbMeasResult_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SiConfiguration_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SiConfiguration_s;


extern PyTypeObject *_PyNs3SiConfiguration_s_Type;
#define PyNs3SiConfiguration_s_Type (*_PyNs3SiConfiguration_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SiConfiguration_s_wrapper_registry;
#define PyNs3SiConfiguration_s_wrapper_registry (*_PyNs3SiConfiguration_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SiMessageListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SiMessageListElement_s;


extern PyTypeObject *_PyNs3SiMessageListElement_s_Type;
#define PyNs3SiMessageListElement_s_Type (*_PyNs3SiMessageListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SiMessageListElement_s_wrapper_registry;
#define PyNs3SiMessageListElement_s_wrapper_registry (*_PyNs3SiMessageListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SignalNoiseDbm *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SignalNoiseDbm;


extern PyTypeObject *_PyNs3SignalNoiseDbm_Type;
#define PyNs3SignalNoiseDbm_Type (*_PyNs3SignalNoiseDbm_Type)

extern std::map<void*, PyObject*> *_PyNs3SignalNoiseDbm_wrapper_registry;
#define PyNs3SignalNoiseDbm_wrapper_registry (*_PyNs3SignalNoiseDbm_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SpsConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpsConfig_s;


extern PyTypeObject *_PyNs3SpsConfig_s_Type;
#define PyNs3SpsConfig_s_Type (*_PyNs3SpsConfig_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SpsConfig_s_wrapper_registry;
#define PyNs3SpsConfig_s_wrapper_registry (*_PyNs3SpsConfig_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SrConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SrConfig_s;


extern PyTypeObject *_PyNs3SrConfig_s_Type;
#define PyNs3SrConfig_s_Type (*_PyNs3SrConfig_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SrConfig_s_wrapper_registry;
#define PyNs3SrConfig_s_wrapper_registry (*_PyNs3SrConfig_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SrListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SrListElement_s;


extern PyTypeObject *_PyNs3SrListElement_s_Type;
#define PyNs3SrListElement_s_Type (*_PyNs3SrListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SrListElement_s_wrapper_registry;
#define PyNs3SrListElement_s_wrapper_registry (*_PyNs3SrListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tap;


extern PyTypeObject *_PyNs3Tap_Type;
#define PyNs3Tap_Type (*_PyNs3Tap_Type)

extern std::map<void*, PyObject*> *_PyNs3Tap_wrapper_registry;
#define PyNs3Tap_wrapper_registry (*_PyNs3Tap_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TbId_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TbId_t;


extern PyTypeObject *_PyNs3TbId_t_Type;
#define PyNs3TbId_t_Type (*_PyNs3TbId_t_Type)

extern std::map<void*, PyObject*> *_PyNs3TbId_t_wrapper_registry;
#define PyNs3TbId_t_wrapper_registry (*_PyNs3TbId_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TimeWithUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeWithUnit;


extern PyTypeObject *_PyNs3TimeWithUnit_Type;
#define PyNs3TimeWithUnit_Type (*_PyNs3TimeWithUnit_Type)

extern std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;
#define PyNs3TimeWithUnit_wrapper_registry (*_PyNs3TimeWithUnit_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TransmissionModesLayers *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TransmissionModesLayers;


extern PyTypeObject *_PyNs3TransmissionModesLayers_Type;
#define PyNs3TransmissionModesLayers_Type (*_PyNs3TransmissionModesLayers_Type)

extern std::map<void*, PyObject*> *_PyNs3TransmissionModesLayers_wrapper_registry;
#define PyNs3TransmissionModesLayers_wrapper_registry (*_PyNs3TransmissionModesLayers_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UanModesList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanModesList;


extern PyTypeObject *_PyNs3UanModesList_Type;
#define PyNs3UanModesList_Type (*_PyNs3UanModesList_Type)

extern std::map<void*, PyObject*> *_PyNs3UanModesList_wrapper_registry;
#define PyNs3UanModesList_wrapper_registry (*_PyNs3UanModesList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UanPacketArrival *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPacketArrival;


extern PyTypeObject *_PyNs3UanPacketArrival_Type;
#define PyNs3UanPacketArrival_Type (*_PyNs3UanPacketArrival_Type)

extern std::map<void*, PyObject*> *_PyNs3UanPacketArrival_wrapper_registry;
#define PyNs3UanPacketArrival_wrapper_registry (*_PyNs3UanPacketArrival_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UanPdp *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPdp;


extern PyTypeObject *_PyNs3UanPdp_Type;
#define PyNs3UanPdp_Type (*_PyNs3UanPdp_Type)

extern std::map<void*, PyObject*> *_PyNs3UanPdp_wrapper_registry;
#define PyNs3UanPdp_wrapper_registry (*_PyNs3UanPdp_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UanPhyListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyListener;


extern PyTypeObject *_PyNs3UanPhyListener_Type;
#define PyNs3UanPhyListener_Type (*_PyNs3UanPhyListener_Type)

class PyNs3UanPhyListener__PythonHelper : public ns3::UanPhyListener
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3UanPhyListener_wrapper_registry;
#define PyNs3UanPhyListener_wrapper_registry (*_PyNs3UanPhyListener_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UanTxMode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanTxMode;


extern PyTypeObject *_PyNs3UanTxMode_Type;
#define PyNs3UanTxMode_Type (*_PyNs3UanTxMode_Type)

extern std::map<void*, PyObject*> *_PyNs3UanTxMode_wrapper_registry;
#define PyNs3UanTxMode_wrapper_registry (*_PyNs3UanTxMode_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UanTxModeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanTxModeFactory;


extern PyTypeObject *_PyNs3UanTxModeFactory_Type;
#define PyNs3UanTxModeFactory_Type (*_PyNs3UanTxModeFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3UanTxModeFactory_wrapper_registry;
#define PyNs3UanTxModeFactory_wrapper_registry (*_PyNs3UanTxModeFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UeCapabilities_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeCapabilities_s;


extern PyTypeObject *_PyNs3UeCapabilities_s_Type;
#define PyNs3UeCapabilities_s_Type (*_PyNs3UeCapabilities_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UeCapabilities_s_wrapper_registry;
#define PyNs3UeCapabilities_s_wrapper_registry (*_PyNs3UeCapabilities_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UeSelected_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeSelected_s;


extern PyTypeObject *_PyNs3UeSelected_s_Type;
#define PyNs3UeSelected_s_Type (*_PyNs3UeSelected_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UeSelected_s_wrapper_registry;
#define PyNs3UeSelected_s_wrapper_registry (*_PyNs3UeSelected_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UlCqi_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlCqi_s;


extern PyTypeObject *_PyNs3UlCqi_s_Type;
#define PyNs3UlCqi_s_Type (*_PyNs3UlCqi_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UlCqi_s_wrapper_registry;
#define PyNs3UlCqi_s_wrapper_registry (*_PyNs3UlCqi_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UlDciListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlDciListElement_s;


extern PyTypeObject *_PyNs3UlDciListElement_s_Type;
#define PyNs3UlDciListElement_s_Type (*_PyNs3UlDciListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UlDciListElement_s_wrapper_registry;
#define PyNs3UlDciListElement_s_wrapper_registry (*_PyNs3UlDciListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UlGrant_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlGrant_s;


extern PyTypeObject *_PyNs3UlGrant_s_Type;
#define PyNs3UlGrant_s_Type (*_PyNs3UlGrant_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UlGrant_s_wrapper_registry;
#define PyNs3UlGrant_s_wrapper_registry (*_PyNs3UlGrant_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UlInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlInfoListElement_s;


extern PyTypeObject *_PyNs3UlInfoListElement_s_Type;
#define PyNs3UlInfoListElement_s_Type (*_PyNs3UlInfoListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UlInfoListElement_s_wrapper_registry;
#define PyNs3UlInfoListElement_s_wrapper_registry (*_PyNs3UlInfoListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject *_PyNs3Vector2D_Type;
#define PyNs3Vector2D_Type (*_PyNs3Vector2D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;
#define PyNs3Vector2D_wrapper_registry (*_PyNs3Vector2D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject *_PyNs3Vector3D_Type;
#define PyNs3Vector3D_Type (*_PyNs3Vector3D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;
#define PyNs3Vector3D_wrapper_registry (*_PyNs3Vector3D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::VendorSpecificListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VendorSpecificListElement_s;


extern PyTypeObject *_PyNs3VendorSpecificListElement_s_Type;
#define PyNs3VendorSpecificListElement_s_Type (*_PyNs3VendorSpecificListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3VendorSpecificListElement_s_wrapper_registry;
#define PyNs3VendorSpecificListElement_s_wrapper_registry (*_PyNs3VendorSpecificListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiMode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMode;


extern PyTypeObject *_PyNs3WifiMode_Type;
#define PyNs3WifiMode_Type (*_PyNs3WifiMode_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiMode_wrapper_registry;
#define PyNs3WifiMode_wrapper_registry (*_PyNs3WifiMode_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiModeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeFactory;


extern PyTypeObject *_PyNs3WifiModeFactory_Type;
#define PyNs3WifiModeFactory_Type (*_PyNs3WifiModeFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiModeFactory_wrapper_registry;
#define PyNs3WifiModeFactory_wrapper_registry (*_PyNs3WifiModeFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumValue5MhzFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumValue5MhzFactory;


extern PyTypeObject *_PyNs3WifiSpectrumValue5MhzFactory_Type;
#define PyNs3WifiSpectrumValue5MhzFactory_Type (*_PyNs3WifiSpectrumValue5MhzFactory_Type)

class PyNs3WifiSpectrumValue5MhzFactory__PythonHelper : public ns3::WifiSpectrumValue5MhzFactory
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiSpectrumValue5MhzFactory__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry;
#define PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry (*_PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumValueHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumValueHelper;


extern PyTypeObject *_PyNs3WifiSpectrumValueHelper_Type;
#define PyNs3WifiSpectrumValueHelper_Type (*_PyNs3WifiSpectrumValueHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiSpectrumValueHelper_wrapper_registry;
#define PyNs3WifiSpectrumValueHelper_wrapper_registry (*_PyNs3WifiSpectrumValueHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiStandardInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiStandardInfo;


extern PyTypeObject *_PyNs3WifiStandardInfo_Type;
#define PyNs3WifiStandardInfo_Type (*_PyNs3WifiStandardInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiStandardInfo_wrapper_registry;
#define PyNs3WifiStandardInfo_wrapper_registry (*_PyNs3WifiStandardInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::WifiTxVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiTxVector;


extern PyTypeObject *_PyNs3WifiTxVector_Type;
#define PyNs3WifiTxVector_Type (*_PyNs3WifiTxVector_Type)

extern std::map<void*, PyObject*> *_PyNs3WifiTxVector_wrapper_registry;
#define PyNs3WifiTxVector_wrapper_registry (*_PyNs3WifiTxVector_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::tbInfo_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TbInfo_t;


extern PyTypeObject *_PyNs3TbInfo_t_Type;
#define PyNs3TbInfo_t_Type (*_PyNs3TbInfo_t_Type)

extern std::map<void*, PyObject*> *_PyNs3TbInfo_t_wrapper_registry;
#define PyNs3TbInfo_t_wrapper_registry (*_PyNs3TbInfo_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpsBearer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpsBearer;


extern PyTypeObject *_PyNs3EpsBearer_Type;
#define PyNs3EpsBearer_Type (*_PyNs3EpsBearer_Type)

class PyNs3EpsBearer__PythonHelper : public ns3::EpsBearer
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpsBearer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::HtSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HtSigHeader;


extern PyTypeObject *_PyNs3HtSigHeader_Type;
#define PyNs3HtSigHeader_Type (*_PyNs3HtSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Header;


extern PyTypeObject *_PyNs3Ipv4Header_Type;
#define PyNs3Ipv4Header_Type (*_PyNs3Ipv4Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::LSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LSigHeader;


extern PyTypeObject *_PyNs3LSigHeader_Type;
#define PyNs3LSigHeader_Type (*_PyNs3LSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapProvider;


extern PyTypeObject *_PyNs3LteEnbRrcSapProvider_Type;
#define PyNs3LteEnbRrcSapProvider_Type (*_PyNs3LteEnbRrcSapProvider_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters;


extern PyTypeObject *_PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_Type;
#define PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_Type (*_PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_wrapper_registry;
#define PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_wrapper_registry (*_PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapUser;


extern PyTypeObject *_PyNs3LteEnbRrcSapUser_Type;
#define PyNs3LteEnbRrcSapUser_Type (*_PyNs3LteEnbRrcSapUser_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapUser::SetupUeParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapUserSetupUeParameters;


extern PyTypeObject *_PyNs3LteEnbRrcSapUserSetupUeParameters_Type;
#define PyNs3LteEnbRrcSapUserSetupUeParameters_Type (*_PyNs3LteEnbRrcSapUserSetupUeParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbRrcSapUserSetupUeParameters_wrapper_registry;
#define PyNs3LteEnbRrcSapUserSetupUeParameters_wrapper_registry (*_PyNs3LteEnbRrcSapUserSetupUeParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketBurst *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketBurst;


extern PyTypeObject *_PyNs3PacketBurst_Type;
#define PyNs3PacketBurst_Type (*_PyNs3PacketBurst_Type)

class PyNs3PacketBurst__PythonHelper : public ns3::PacketBurst
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketBurst__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationDelayModel;


extern PyTypeObject *_PyNs3PropagationDelayModel_Type;
#define PyNs3PropagationDelayModel_Type (*_PyNs3PropagationDelayModel_Type)

class PyNs3PropagationDelayModel__PythonHelper : public ns3::PropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationLossModel;


extern PyTypeObject *_PyNs3PropagationLossModel_Type;
#define PyNs3PropagationLossModel_Type (*_PyNs3PropagationLossModel_Type)

class PyNs3PropagationLossModel__PythonHelper : public ns3::PropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationDelayModel;


extern PyTypeObject *_PyNs3RandomPropagationDelayModel_Type;
#define PyNs3RandomPropagationDelayModel_Type (*_PyNs3RandomPropagationDelayModel_Type)

class PyNs3RandomPropagationDelayModel__PythonHelper : public ns3::RandomPropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationLossModel;


extern PyTypeObject *_PyNs3RandomPropagationLossModel_Type;
#define PyNs3RandomPropagationLossModel_Type (*_PyNs3RandomPropagationLossModel_Type)

class PyNs3RandomPropagationLossModel__PythonHelper : public ns3::RandomPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStream *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStream;


extern PyTypeObject *_PyNs3RandomVariableStream_Type;
#define PyNs3RandomVariableStream_Type (*_PyNs3RandomVariableStream_Type)

class PyNs3RandomVariableStream__PythonHelper : public ns3::RandomVariableStream
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomVariableStream__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RangePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RangePropagationLossModel;


extern PyTypeObject *_PyNs3RangePropagationLossModel_Type;
#define PyNs3RangePropagationLossModel_Type (*_PyNs3RangePropagationLossModel_Type)

class PyNs3RangePropagationLossModel__PythonHelper : public ns3::RangePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RangePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SequentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialRandomVariable;


extern PyTypeObject *_PyNs3SequentialRandomVariable_Type;
#define PyNs3SequentialRandomVariable_Type (*_PyNs3SequentialRandomVariable_Type)

class PyNs3SequentialRandomVariable__PythonHelper : public ns3::SequentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SequentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Event, ns3::empty, ns3::DefaultDeleter<ns3::Event> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type;
#define PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type (*_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Event_Ns3Empty_Ns3DefaultDeleter__lt__ns3Event__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type;
#define PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type (*_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type;
#define PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type (*_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___Type;
#define PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___Type (*_PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___Type;
#define PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___Type (*_PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___Type (*_PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiPpdu, ns3::empty, ns3::DefaultDeleter<ns3::WifiPpdu> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt___Type;
#define PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt___Type (*_PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3WifiPpdu_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiPpdu__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Socket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Socket;


extern PyTypeObject *_PyNs3Socket_Type;
#define PyNs3Socket_Type (*_PyNs3Socket_Type)

class PyNs3Socket__PythonHelper : public ns3::Socket
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Socket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTosTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTosTag;


extern PyTypeObject *_PyNs3SocketIpTosTag_Type;
#define PyNs3SocketIpTosTag_Type (*_PyNs3SocketIpTosTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTtlTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTtlTag;


extern PyTypeObject *_PyNs3SocketIpTtlTag_Type;
#define PyNs3SocketIpTtlTag_Type (*_PyNs3SocketIpTtlTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6HopLimitTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6HopLimitTag;


extern PyTypeObject *_PyNs3SocketIpv6HopLimitTag_Type;
#define PyNs3SocketIpv6HopLimitTag_Type (*_PyNs3SocketIpv6HopLimitTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6TclassTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6TclassTag;


extern PyTypeObject *_PyNs3SocketIpv6TclassTag_Type;
#define PyNs3SocketIpv6TclassTag_Type (*_PyNs3SocketIpv6TclassTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketPriorityTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketPriorityTag;


extern PyTypeObject *_PyNs3SocketPriorityTag_Type;
#define PyNs3SocketPriorityTag_Type (*_PyNs3SocketPriorityTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketSetDontFragmentTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketSetDontFragmentTag;


extern PyTypeObject *_PyNs3SocketSetDontFragmentTag_Type;
#define PyNs3SocketSetDontFragmentTag_Type (*_PyNs3SocketSetDontFragmentTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumInterference;


extern PyTypeObject *_PyNs3SpectrumInterference_Type;
#define PyNs3SpectrumInterference_Type (*_PyNs3SpectrumInterference_Type)

class PyNs3SpectrumInterference__PythonHelper : public ns3::SpectrumInterference
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumModel;


extern PyTypeObject *_PyNs3SpectrumModel_Type;
#define PyNs3SpectrumModel_Type (*_PyNs3SpectrumModel_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPhy;


extern PyTypeObject *_PyNs3SpectrumPhy_Type;
#define PyNs3SpectrumPhy_Type (*_PyNs3SpectrumPhy_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPropagationLossModel;


extern PyTypeObject *_PyNs3SpectrumPropagationLossModel_Type;
#define PyNs3SpectrumPropagationLossModel_Type (*_PyNs3SpectrumPropagationLossModel_Type)

class PyNs3SpectrumPropagationLossModel__PythonHelper : public ns3::SpectrumPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumSignalParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumSignalParameters;


extern PyTypeObject *_PyNs3SpectrumSignalParameters_Type;
#define PyNs3SpectrumSignalParameters_Type (*_PyNs3SpectrumSignalParameters_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumValue;


extern PyTypeObject *_PyNs3SpectrumValue_Type;
#define PyNs3SpectrumValue_Type (*_PyNs3SpectrumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ThreeLogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeLogDistancePropagationLossModel;


extern PyTypeObject *_PyNs3ThreeLogDistancePropagationLossModel_Type;
#define PyNs3ThreeLogDistancePropagationLossModel_Type (*_PyNs3ThreeLogDistancePropagationLossModel_Type)

class PyNs3ThreeLogDistancePropagationLossModel__PythonHelper : public ns3::ThreeLogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeLogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::TriangularRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularRandomVariable;


extern PyTypeObject *_PyNs3TriangularRandomVariable_Type;
#define PyNs3TriangularRandomVariable_Type (*_PyNs3TriangularRandomVariable_Type)

class PyNs3TriangularRandomVariable__PythonHelper : public ns3::TriangularRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TriangularRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TwoRayGroundPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TwoRayGroundPropagationLossModel;


extern PyTypeObject *_PyNs3TwoRayGroundPropagationLossModel_Type;
#define PyNs3TwoRayGroundPropagationLossModel_Type (*_PyNs3TwoRayGroundPropagationLossModel_Type)

class PyNs3TwoRayGroundPropagationLossModel__PythonHelper : public ns3::TwoRayGroundPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TwoRayGroundPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanMac;


extern PyTypeObject *_PyNs3UanMac_Type;
#define PyNs3UanMac_Type (*_PyNs3UanMac_Type)


typedef struct {
    PyObject_HEAD
    ns3::UanPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhy;


extern PyTypeObject *_PyNs3UanPhy_Type;
#define PyNs3UanPhy_Type (*_PyNs3UanPhy_Type)


typedef struct {
    PyObject_HEAD
    ns3::UanPhyCalcSinr *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyCalcSinr;


extern PyTypeObject *_PyNs3UanPhyCalcSinr_Type;
#define PyNs3UanPhyCalcSinr_Type (*_PyNs3UanPhyCalcSinr_Type)

class PyNs3UanPhyCalcSinr__PythonHelper : public ns3::UanPhyCalcSinr
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyCalcSinr__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanPhyCalcSinrDefault *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyCalcSinrDefault;


extern PyTypeObject *_PyNs3UanPhyCalcSinrDefault_Type;
#define PyNs3UanPhyCalcSinrDefault_Type (*_PyNs3UanPhyCalcSinrDefault_Type)

class PyNs3UanPhyCalcSinrDefault__PythonHelper : public ns3::UanPhyCalcSinrDefault
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyCalcSinrDefault__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanPhyCalcSinrFhFsk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyCalcSinrFhFsk;


extern PyTypeObject *_PyNs3UanPhyCalcSinrFhFsk_Type;
#define PyNs3UanPhyCalcSinrFhFsk_Type (*_PyNs3UanPhyCalcSinrFhFsk_Type)

class PyNs3UanPhyCalcSinrFhFsk__PythonHelper : public ns3::UanPhyCalcSinrFhFsk
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyCalcSinrFhFsk__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanPhyGen *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyGen;


extern PyTypeObject *_PyNs3UanPhyGen_Type;
#define PyNs3UanPhyGen_Type (*_PyNs3UanPhyGen_Type)


typedef struct {
    PyObject_HEAD
    ns3::UanPhyPer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyPer;


extern PyTypeObject *_PyNs3UanPhyPer_Type;
#define PyNs3UanPhyPer_Type (*_PyNs3UanPhyPer_Type)

class PyNs3UanPhyPer__PythonHelper : public ns3::UanPhyPer
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyPer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanPhyPerCommonModes *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyPerCommonModes;


extern PyTypeObject *_PyNs3UanPhyPerCommonModes_Type;
#define PyNs3UanPhyPerCommonModes_Type (*_PyNs3UanPhyPerCommonModes_Type)

class PyNs3UanPhyPerCommonModes__PythonHelper : public ns3::UanPhyPerCommonModes
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyPerCommonModes__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanPhyPerGenDefault *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyPerGenDefault;


extern PyTypeObject *_PyNs3UanPhyPerGenDefault_Type;
#define PyNs3UanPhyPerGenDefault_Type (*_PyNs3UanPhyPerGenDefault_Type)

class PyNs3UanPhyPerGenDefault__PythonHelper : public ns3::UanPhyPerGenDefault
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyPerGenDefault__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanPhyPerUmodem *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyPerUmodem;


extern PyTypeObject *_PyNs3UanPhyPerUmodem_Type;
#define PyNs3UanPhyPerUmodem_Type (*_PyNs3UanPhyPerUmodem_Type)

class PyNs3UanPhyPerUmodem__PythonHelper : public ns3::UanPhyPerUmodem
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyPerUmodem__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanPropModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPropModel;


extern PyTypeObject *_PyNs3UanPropModel_Type;
#define PyNs3UanPropModel_Type (*_PyNs3UanPropModel_Type)

class PyNs3UanPropModel__PythonHelper : public ns3::UanPropModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPropModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UanTransducer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanTransducer;


extern PyTypeObject *_PyNs3UanTransducer_Type;
#define PyNs3UanTransducer_Type (*_PyNs3UanTransducer_Type)


typedef struct {
    PyObject_HEAD
    ns3::UniformRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformRandomVariable;


extern PyTypeObject *_PyNs3UniformRandomVariable_Type;
#define PyNs3UniformRandomVariable_Type (*_PyNs3UniformRandomVariable_Type)

class PyNs3UniformRandomVariable__PythonHelper : public ns3::UniformRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::VendorSpecificValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VendorSpecificValue;


extern PyTypeObject *_PyNs3VendorSpecificValue_Type;
#define PyNs3VendorSpecificValue_Type (*_PyNs3VendorSpecificValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::VhtSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VhtSigHeader;


extern PyTypeObject *_PyNs3VhtSigHeader_Type;
#define PyNs3VhtSigHeader_Type (*_PyNs3VhtSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::WeibullRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullRandomVariable;


extern PyTypeObject *_PyNs3WeibullRandomVariable_Type;
#define PyNs3WeibullRandomVariable_Type (*_PyNs3WeibullRandomVariable_Type)

class PyNs3WeibullRandomVariable__PythonHelper : public ns3::WeibullRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WeibullRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhy;


extern PyTypeObject *_PyNs3WifiPhy_Type;
#define PyNs3WifiPhy_Type (*_PyNs3WifiPhy_Type)

class PyNs3WifiPhy__PythonHelper : public ns3::WifiPhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WifiPhyStateHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyStateHelper;


extern PyTypeObject *_PyNs3WifiPhyStateHelper_Type;
#define PyNs3WifiPhyStateHelper_Type (*_PyNs3WifiPhyStateHelper_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiPpdu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPpdu;


extern PyTypeObject *_PyNs3WifiPpdu_Type;
#define PyNs3WifiPpdu_Type (*_PyNs3WifiPpdu_Type)


typedef struct {
    PyObject_HEAD
    ns3::ZetaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaRandomVariable;


extern PyTypeObject *_PyNs3ZetaRandomVariable_Type;
#define PyNs3ZetaRandomVariable_Type (*_PyNs3ZetaRandomVariable_Type)

class PyNs3ZetaRandomVariable__PythonHelper : public ns3::ZetaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZetaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZipfRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfRandomVariable;


extern PyTypeObject *_PyNs3ZipfRandomVariable_Type;
#define PyNs3ZipfRandomVariable_Type (*_PyNs3ZipfRandomVariable_Type)

class PyNs3ZipfRandomVariable__PythonHelper : public ns3::ZipfRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZipfRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject *_PyNs3Channel_Type;
#define PyNs3Channel_Type (*_PyNs3Channel_Type)

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ComponentCarrier *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ComponentCarrier;


extern PyTypeObject *_PyNs3ComponentCarrier_Type;
#define PyNs3ComponentCarrier_Type (*_PyNs3ComponentCarrier_Type)

class PyNs3ComponentCarrier__PythonHelper : public ns3::ComponentCarrier
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ComponentCarrier__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ComponentCarrierBaseStation *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ComponentCarrierBaseStation;


extern PyTypeObject *_PyNs3ComponentCarrierBaseStation_Type;
#define PyNs3ComponentCarrierBaseStation_Type (*_PyNs3ComponentCarrierBaseStation_Type)


typedef struct {
    PyObject_HEAD
    ns3::ComponentCarrierEnb *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ComponentCarrierEnb;


extern PyTypeObject *_PyNs3ComponentCarrierEnb_Type;
#define PyNs3ComponentCarrierEnb_Type (*_PyNs3ComponentCarrierEnb_Type)

class PyNs3ComponentCarrierEnb__PythonHelper : public ns3::ComponentCarrierEnb
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ComponentCarrierEnb__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ComponentCarrierUe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ComponentCarrierUe;


extern PyTypeObject *_PyNs3ComponentCarrierUe_Type;
#define PyNs3ComponentCarrierUe_Type (*_PyNs3ComponentCarrierUe_Type)

class PyNs3ComponentCarrierUe__PythonHelper : public ns3::ComponentCarrierUe
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ComponentCarrierUe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRandomVariable;


extern PyTypeObject *_PyNs3ConstantRandomVariable_Type;
#define PyNs3ConstantRandomVariable_Type (*_PyNs3ConstantRandomVariable_Type)

class PyNs3ConstantRandomVariable__PythonHelper : public ns3::ConstantRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantSpeedPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantSpeedPropagationDelayModel;


extern PyTypeObject *_PyNs3ConstantSpeedPropagationDelayModel_Type;
#define PyNs3ConstantSpeedPropagationDelayModel_Type (*_PyNs3ConstantSpeedPropagationDelayModel_Type)

class PyNs3ConstantSpeedPropagationDelayModel__PythonHelper : public ns3::ConstantSpeedPropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantSpeedPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataRateChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateChecker;


extern PyTypeObject *_PyNs3DataRateChecker_Type;
#define PyNs3DataRateChecker_Type (*_PyNs3DataRateChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataRateValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateValue;


extern PyTypeObject *_PyNs3DataRateValue_Type;
#define PyNs3DataRateValue_Type (*_PyNs3DataRateValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DeterministicRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicRandomVariable;


extern PyTypeObject *_PyNs3DeterministicRandomVariable_Type;
#define PyNs3DeterministicRandomVariable_Type (*_PyNs3DeterministicRandomVariable_Type)

class PyNs3DeterministicRandomVariable__PythonHelper : public ns3::DeterministicRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeterministicRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DeviceEnergyModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeviceEnergyModel;


extern PyTypeObject *_PyNs3DeviceEnergyModel_Type;
#define PyNs3DeviceEnergyModel_Type (*_PyNs3DeviceEnergyModel_Type)


typedef struct {
    PyObject_HEAD
    ns3::DsssSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsssSigHeader;


extern PyTypeObject *_PyNs3DsssSigHeader_Type;
#define PyNs3DsssSigHeader_Type (*_PyNs3DsssSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalRandomVariable;


extern PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;
#define PyNs3EmpiricalRandomVariable_Type (*_PyNs3EmpiricalRandomVariable_Type)

class PyNs3EmpiricalRandomVariable__PythonHelper : public ns3::EmpiricalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmpiricalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeAccessor;


extern PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;
#define PyNs3EmptyAttributeAccessor_Type (*_PyNs3EmptyAttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeChecker;


extern PyTypeObject *_PyNs3EmptyAttributeChecker_Type;
#define PyNs3EmptyAttributeChecker_Type (*_PyNs3EmptyAttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ErlangRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangRandomVariable;


extern PyTypeObject *_PyNs3ErlangRandomVariable_Type;
#define PyNs3ErlangRandomVariable_Type (*_PyNs3ErlangRandomVariable_Type)

class PyNs3ErlangRandomVariable__PythonHelper : public ns3::ErlangRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErlangRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErrorModel;


extern PyTypeObject *_PyNs3ErrorModel_Type;
#define PyNs3ErrorModel_Type (*_PyNs3ErrorModel_Type)

class PyNs3ErrorModel__PythonHelper : public ns3::ErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Event *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Event;


extern PyTypeObject *_PyNs3Event_Type;
#define PyNs3Event_Type (*_PyNs3Event_Type)


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialRandomVariable;


extern PyTypeObject *_PyNs3ExponentialRandomVariable_Type;
#define PyNs3ExponentialRandomVariable_Type (*_PyNs3ExponentialRandomVariable_Type)

class PyNs3ExponentialRandomVariable__PythonHelper : public ns3::ExponentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ExponentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::FixedRssLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FixedRssLossModel;


extern PyTypeObject *_PyNs3FixedRssLossModel_Type;
#define PyNs3FixedRssLossModel_Type (*_PyNs3FixedRssLossModel_Type)

class PyNs3FixedRssLossModel__PythonHelper : public ns3::FixedRssLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FixedRssLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::FriisPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FriisPropagationLossModel;


extern PyTypeObject *_PyNs3FriisPropagationLossModel_Type;
#define PyNs3FriisPropagationLossModel_Type (*_PyNs3FriisPropagationLossModel_Type)

class PyNs3FriisPropagationLossModel__PythonHelper : public ns3::FriisPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FriisPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::GammaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaRandomVariable;


extern PyTypeObject *_PyNs3GammaRandomVariable_Type;
#define PyNs3GammaRandomVariable_Type (*_PyNs3GammaRandomVariable_Type)

class PyNs3GammaRandomVariable__PythonHelper : public ns3::GammaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GammaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::HeSigHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeSigHeader;


extern PyTypeObject *_PyNs3HeSigHeader_Type;
#define PyNs3HeSigHeader_Type (*_PyNs3HeSigHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4;


extern PyTypeObject *_PyNs3Ipv4_Type;
#define PyNs3Ipv4_Type (*_PyNs3Ipv4_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4L3Protocol;


extern PyTypeObject *_PyNs3Ipv4L3Protocol_Type;
#define PyNs3Ipv4L3Protocol_Type (*_PyNs3Ipv4L3Protocol_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MulticastRoute *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MulticastRoute;


extern PyTypeObject *_PyNs3Ipv4MulticastRoute_Type;
#define PyNs3Ipv4MulticastRoute_Type (*_PyNs3Ipv4MulticastRoute_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Route *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Route;


extern PyTypeObject *_PyNs3Ipv4Route_Type;
#define PyNs3Ipv4Route_Type (*_PyNs3Ipv4Route_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingProtocol;


extern PyTypeObject *_PyNs3Ipv4RoutingProtocol_Type;
#define PyNs3Ipv4RoutingProtocol_Type (*_PyNs3Ipv4RoutingProtocol_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ListErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ListErrorModel;


extern PyTypeObject *_PyNs3ListErrorModel_Type;
#define PyNs3ListErrorModel_Type (*_PyNs3ListErrorModel_Type)

class PyNs3ListErrorModel__PythonHelper : public ns3::ListErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ListErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogDistancePropagationLossModel;


extern PyTypeObject *_PyNs3LogDistancePropagationLossModel_Type;
#define PyNs3LogDistancePropagationLossModel_Type (*_PyNs3LogDistancePropagationLossModel_Type)

class PyNs3LogDistancePropagationLossModel__PythonHelper : public ns3::LogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LogNormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalRandomVariable;


extern PyTypeObject *_PyNs3LogNormalRandomVariable_Type;
#define PyNs3LogNormalRandomVariable_Type (*_PyNs3LogNormalRandomVariable_Type)

class PyNs3LogNormalRandomVariable__PythonHelper : public ns3::LogNormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogNormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteAmc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAmc;


extern PyTypeObject *_PyNs3LteAmc_Type;
#define PyNs3LteAmc_Type (*_PyNs3LteAmc_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteControlMessage;


extern PyTypeObject *_PyNs3LteControlMessage_Type;
#define PyNs3LteControlMessage_Type (*_PyNs3LteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteHarqPhy *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHarqPhy;


extern PyTypeObject *_PyNs3LteHarqPhy_Type;
#define PyNs3LteHarqPhy_Type (*_PyNs3LteHarqPhy_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteInterference;


extern PyTypeObject *_PyNs3LteInterference_Type;
#define PyNs3LteInterference_Type (*_PyNs3LteInterference_Type)

class PyNs3LteInterference__PythonHelper : public ns3::LteInterference
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LtePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePhy;


extern PyTypeObject *_PyNs3LtePhy_Type;
#define PyNs3LtePhy_Type (*_PyNs3LtePhy_Type)

class PyNs3LtePhy__PythonHelper : public ns3::LtePhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumPhy;


extern PyTypeObject *_PyNs3LteSpectrumPhy_Type;
#define PyNs3LteSpectrumPhy_Type (*_PyNs3LteSpectrumPhy_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteUePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhy;


extern PyTypeObject *_PyNs3LteUePhy_Type;
#define PyNs3LteUePhy_Type (*_PyNs3LteUePhy_Type)

class PyNs3LteUePhy__PythonHelper : public ns3::LteUePhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteUePowerControl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePowerControl;


extern PyTypeObject *_PyNs3LteUePowerControl_Type;
#define PyNs3LteUePowerControl_Type (*_PyNs3LteUePowerControl_Type)

class PyNs3LteUePowerControl__PythonHelper : public ns3::LteUePowerControl
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePowerControl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject *_PyNs3Mac48AddressChecker_Type;
#define PyNs3Mac48AddressChecker_Type (*_PyNs3Mac48AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject *_PyNs3Mac48AddressValue_Type;
#define PyNs3Mac48AddressValue_Type (*_PyNs3Mac48AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac64AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac64AddressChecker;


extern PyTypeObject *_PyNs3Mac64AddressChecker_Type;
#define PyNs3Mac64AddressChecker_Type (*_PyNs3Mac64AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac64AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac64AddressValue;


extern PyTypeObject *_PyNs3Mac64AddressValue_Type;
#define PyNs3Mac64AddressValue_Type (*_PyNs3Mac64AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::MatrixPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MatrixPropagationLossModel;


extern PyTypeObject *_PyNs3MatrixPropagationLossModel_Type;
#define PyNs3MatrixPropagationLossModel_Type (*_PyNs3MatrixPropagationLossModel_Type)

class PyNs3MatrixPropagationLossModel__PythonHelper : public ns3::MatrixPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MatrixPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::MibLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MibLteControlMessage;


extern PyTypeObject *_PyNs3MibLteControlMessage_Type;
#define PyNs3MibLteControlMessage_Type (*_PyNs3MibLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::MobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityModel;


extern PyTypeObject *_PyNs3MobilityModel_Type;
#define PyNs3MobilityModel_Type (*_PyNs3MobilityModel_Type)

class PyNs3MobilityModel__PythonHelper : public ns3::MobilityModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NakagamiPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NakagamiPropagationLossModel;


extern PyTypeObject *_PyNs3NakagamiPropagationLossModel_Type;
#define PyNs3NakagamiPropagationLossModel_Type (*_PyNs3NakagamiPropagationLossModel_Type)

class PyNs3NakagamiPropagationLossModel__PythonHelper : public ns3::NakagamiPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NakagamiPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalRandomVariable;


extern PyTypeObject *_PyNs3NormalRandomVariable_Type;
#define PyNs3NormalRandomVariable_Type (*_PyNs3NormalRandomVariable_Type)

class PyNs3NormalRandomVariable__PythonHelper : public ns3::NormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::OutputStreamWrapper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OutputStreamWrapper;


extern PyTypeObject *_PyNs3OutputStreamWrapper_Type;
#define PyNs3OutputStreamWrapper_Type (*_PyNs3OutputStreamWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::ParetoRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoRandomVariable;


extern PyTypeObject *_PyNs3ParetoRandomVariable_Type;
#define PyNs3ParetoRandomVariable_Type (*_PyNs3ParetoRandomVariable_Type)

class PyNs3ParetoRandomVariable__PythonHelper : public ns3::ParetoRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ParetoRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PointerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerChecker;


extern PyTypeObject *_PyNs3PointerChecker_Type;
#define PyNs3PointerChecker_Type (*_PyNs3PointerChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::PointerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerValue;


extern PyTypeObject *_PyNs3PointerValue_Type;
#define PyNs3PointerValue_Type (*_PyNs3PointerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::RachPreambleLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RachPreambleLteControlMessage;


extern PyTypeObject *_PyNs3RachPreambleLteControlMessage_Type;
#define PyNs3RachPreambleLteControlMessage_Type (*_PyNs3RachPreambleLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::RarLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RarLteControlMessage;


extern PyTypeObject *_PyNs3RarLteControlMessage_Type;
#define PyNs3RarLteControlMessage_Type (*_PyNs3RarLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::RarLteControlMessage::Rar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RarLteControlMessageRar;


extern PyTypeObject *_PyNs3RarLteControlMessageRar_Type;
#define PyNs3RarLteControlMessageRar_Type (*_PyNs3RarLteControlMessageRar_Type)

extern std::map<void*, PyObject*> *_PyNs3RarLteControlMessageRar_wrapper_registry;
#define PyNs3RarLteControlMessageRar_wrapper_registry (*_PyNs3RarLteControlMessageRar_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RateErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RateErrorModel;


extern PyTypeObject *_PyNs3RateErrorModel_Type;
#define PyNs3RateErrorModel_Type (*_PyNs3RateErrorModel_Type)

class PyNs3RateErrorModel__PythonHelper : public ns3::RateErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RateErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ReceiveListErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ReceiveListErrorModel;


extern PyTypeObject *_PyNs3ReceiveListErrorModel_Type;
#define PyNs3ReceiveListErrorModel_Type (*_PyNs3ReceiveListErrorModel_Type)

class PyNs3ReceiveListErrorModel__PythonHelper : public ns3::ReceiveListErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ReceiveListErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RectangleChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RectangleChecker;


extern PyTypeObject *_PyNs3RectangleChecker_Type;
#define PyNs3RectangleChecker_Type (*_PyNs3RectangleChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::RectangleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RectangleValue;


extern PyTypeObject *_PyNs3RectangleValue_Type;
#define PyNs3RectangleValue_Type (*_PyNs3RectangleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Sib1LteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Sib1LteControlMessage;


extern PyTypeObject *_PyNs3Sib1LteControlMessage_Type;
#define PyNs3Sib1LteControlMessage_Type (*_PyNs3Sib1LteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumChannel;


extern PyTypeObject *_PyNs3SpectrumChannel_Type;
#define PyNs3SpectrumChannel_Type (*_PyNs3SpectrumChannel_Type)

class PyNs3SpectrumChannel__PythonHelper : public ns3::SpectrumChannel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UanModesListChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanModesListChecker;


extern PyTypeObject *_PyNs3UanModesListChecker_Type;
#define PyNs3UanModesListChecker_Type (*_PyNs3UanModesListChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::UanModesListValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanModesListValue;


extern PyTypeObject *_PyNs3UanModesListValue_Type;
#define PyNs3UanModesListValue_Type (*_PyNs3UanModesListValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UlDciLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlDciLteControlMessage;


extern PyTypeObject *_PyNs3UlDciLteControlMessage_Type;
#define PyNs3UlDciLteControlMessage_Type (*_PyNs3UlDciLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject *_PyNs3Vector2DChecker_Type;
#define PyNs3Vector2DChecker_Type (*_PyNs3Vector2DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject *_PyNs3Vector2DValue_Type;
#define PyNs3Vector2DValue_Type (*_PyNs3Vector2DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject *_PyNs3Vector3DChecker_Type;
#define PyNs3Vector3DChecker_Type (*_PyNs3Vector3DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject *_PyNs3Vector3DValue_Type;
#define PyNs3Vector3DValue_Type (*_PyNs3Vector3DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiModeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeChecker;


extern PyTypeObject *_PyNs3WifiModeChecker_Type;
#define PyNs3WifiModeChecker_Type (*_PyNs3WifiModeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::WifiModeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeValue;


extern PyTypeObject *_PyNs3WifiModeValue_Type;
#define PyNs3WifiModeValue_Type (*_PyNs3WifiModeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BinaryErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BinaryErrorModel;


extern PyTypeObject *_PyNs3BinaryErrorModel_Type;
#define PyNs3BinaryErrorModel_Type (*_PyNs3BinaryErrorModel_Type)

class PyNs3BinaryErrorModel__PythonHelper : public ns3::BinaryErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BinaryErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::BsrLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BsrLteControlMessage;


extern PyTypeObject *_PyNs3BsrLteControlMessage_Type;
#define PyNs3BsrLteControlMessage_Type (*_PyNs3BsrLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::BurstErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BurstErrorModel;


extern PyTypeObject *_PyNs3BurstErrorModel_Type;
#define PyNs3BurstErrorModel_Type (*_PyNs3BurstErrorModel_Type)

class PyNs3BurstErrorModel__PythonHelper : public ns3::BurstErrorModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BurstErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ipv4L3ProtocolDropReason_Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3Ipv4Header___amp___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::HePreambleParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3HePreambleParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::UanTxMode, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3UanTxMode_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3UanTxMode_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3UanTxMode_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3UanTxMode_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3WifiMode_Ns3WifiPreamble_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Ptr__lt__ns3Ipv4__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiMode_Ns3WifiPreamble_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::WifiPhyRxfailureReason, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3WifiPhyRxfailureReason_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, std::map<std::pair<unsigned int, unsigned int>, double, std::less<std::pair<unsigned int, unsigned int> >, std::allocator<std::pair<const std::pair<unsigned int, unsigned int>, double> > >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___StdMap__lt__stdPair__lt__unsigned_int__unsigned_int__gt____double__stdLess__lt__stdPair__lt__unsigned_int__unsigned_int__gt_____gt____stdAllocator__lt__stdPair__lt__const_stdPair__lt__unsigned_int__unsigned_int__gt____double__gt_____gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, unsigned short, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Ns3SignalNoiseDbm_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Ns3WifiTxVector_Ns3MpduInfo_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, double, ns3::UanTxMode, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3UanTxMode_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3UanTxMode_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3UanTxMode_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3UanTxMode_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::WifiPsdu>, double, ns3::WifiTxVector, std::vector<bool, std::allocator<bool> >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Double_Ns3WifiTxVector_StdVector__lt__bool__stdAllocator__lt__bool__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::WifiPsdu>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3WifiPsdu__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::Time, WifiPhyState, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Time_Ns3Time_WifiPhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::WifiTxVector, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3WifiTxVector_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, std::unordered_map<unsigned short, ns3::Ptr<const ns3::WifiPsdu>, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, ns3::Ptr<const ns3::WifiPsdu> > > >, ns3::WifiTxVector, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_StdUnordered_map__lt__unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt____stdHash__lt__unsigned_short__gt____stdEqual_to__lt__unsigned_short__gt____stdAllocator__lt__stdPair__lt__const_unsigned_short__ns3Ptr__lt__const_ns3WifiPsdu__gt_____gt_____gt_____gt___Ns3WifiTxVector_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, const std::vector<int, std::allocator<int> > &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Const_stdVector__lt__int__stdAllocator__lt__int__gt_____gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Const_stdVector__lt__int__stdAllocator__lt__int__gt_____gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Const_stdVector__lt__int__stdAllocator__lt__int__gt_____gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Const_stdVector__lt__int__stdAllocator__lt__int__gt_____gt_____amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::DlCqiLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlCqiLteControlMessage;


extern PyTypeObject *_PyNs3DlCqiLteControlMessage_Type;
#define PyNs3DlCqiLteControlMessage_Type (*_PyNs3DlCqiLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::DlDciLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlDciLteControlMessage;


extern PyTypeObject *_PyNs3DlDciLteControlMessage_Type;
#define PyNs3DlDciLteControlMessage_Type (*_PyNs3DlDciLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::DlHarqFeedbackLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlHarqFeedbackLteControlMessage;


extern PyTypeObject *_PyNs3DlHarqFeedbackLteControlMessage_Type;
#define PyNs3DlHarqFeedbackLteControlMessage_Type (*_PyNs3DlHarqFeedbackLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhy;


extern PyTypeObject *_PyNs3LteEnbPhy_Type;
#define PyNs3LteEnbPhy_Type (*_PyNs3LteEnbPhy_Type)

class PyNs3LteEnbPhy__PythonHelper : public ns3::LteEnbPhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteNetDevice;


extern PyTypeObject *_PyNs3LteNetDevice_Type;
#define PyNs3LteNetDevice_Type (*_PyNs3LteNetDevice_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteUeNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeNetDevice;


extern PyTypeObject *_PyNs3LteUeNetDevice_Type;
#define PyNs3LteUeNetDevice_Type (*_PyNs3LteUeNetDevice_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbNetDevice;


extern PyTypeObject *_PyNs3LteEnbNetDevice_Type;
#define PyNs3LteEnbNetDevice_Type (*_PyNs3LteEnbNetDevice_Type)


typedef struct {
    PyObject_HEAD
    ns3::AnimationInterface *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AnimationInterface;


extern PyTypeObject PyNs3AnimationInterface_Type;

extern std::map<void*, PyObject*> PyNs3AnimationInterface_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AnimByteTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AnimByteTag;


extern PyTypeObject PyNs3AnimByteTag_Type;


typedef struct {
    PyObject_HEAD
    std::vector< ns3::CeBitmap_e > *obj;
} Pystd__vector__lt___ns3__CeBitmap_e___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__CeBitmap_e___gt__ *container;
    std::vector< ns3::CeBitmap_e >::iterator *iterator;
} Pystd__vector__lt___ns3__CeBitmap_e___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__CeBitmap_e___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__CeBitmap_e___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__CeBitmap_e___gt__(PyObject *arg, std::vector< ns3::CeBitmap_e > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned char > *obj;
} Pystd__vector__lt___unsigned_char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_char___gt__ *container;
    std::vector< unsigned char >::iterator *iterator;
} Pystd__vector__lt___unsigned_char___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_char___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_char___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_char___gt__(PyObject *arg, std::vector< unsigned char > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned short > *obj;
} Pystd__vector__lt___unsigned_short___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_short___gt__ *container;
    std::vector< unsigned short >::iterator *iterator;
} Pystd__vector__lt___unsigned_short___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_short___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_short___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_short___gt__(PyObject *arg, std::vector< unsigned short > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::DlInfoListElement_s::HarqStatus_e > *obj;
} Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__ *container;
    std::vector< ns3::DlInfoListElement_s::HarqStatus_e >::iterator *iterator;
} Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__(PyObject *arg, std::vector< ns3::DlInfoListElement_s::HarqStatus_e > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::VendorSpecificListElement_s > *obj;
} Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__ *container;
    std::vector< ns3::VendorSpecificListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__VendorSpecificListElement_s___gt__(PyObject *arg, std::vector< ns3::VendorSpecificListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::PagingInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__ *container;
    std::vector< ns3::PagingInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__PagingInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__PagingInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::PagingInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::DlInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__DlInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__DlInfoListElement_s___gt__ *container;
    std::vector< ns3::DlInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__DlInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__DlInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::DlInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::RachListElement_s > *obj;
} Pystd__vector__lt___ns3__RachListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__RachListElement_s___gt__ *container;
    std::vector< ns3::RachListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__RachListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__RachListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__RachListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__RachListElement_s___gt__(PyObject *arg, std::vector< ns3::RachListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::CqiListElement_s > *obj;
} Pystd__vector__lt___ns3__CqiListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__CqiListElement_s___gt__ *container;
    std::vector< ns3::CqiListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__CqiListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__CqiListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__CqiListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__CqiListElement_s___gt__(PyObject *arg, std::vector< ns3::CqiListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::UlInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__UlInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__UlInfoListElement_s___gt__ *container;
    std::vector< ns3::UlInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__UlInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__UlInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__UlInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__UlInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::UlInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::SrListElement_s > *obj;
} Pystd__vector__lt___ns3__SrListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__SrListElement_s___gt__ *container;
    std::vector< ns3::SrListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__SrListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__SrListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__SrListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__SrListElement_s___gt__(PyObject *arg, std::vector< ns3::SrListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::MacCeListElement_s > *obj;
} Pystd__vector__lt___ns3__MacCeListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__MacCeListElement_s___gt__ *container;
    std::vector< ns3::MacCeListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__MacCeListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__MacCeListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__MacCeListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__MacCeListElement_s___gt__(PyObject *arg, std::vector< ns3::MacCeListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildDataListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildDataListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildDataListElement_s___gt__ *container;
    std::vector< ns3::BuildDataListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildDataListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildDataListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildDataListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildDataListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildDataListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildRarListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildRarListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildRarListElement_s___gt__ *container;
    std::vector< ns3::BuildRarListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildRarListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildRarListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildRarListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildRarListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildRarListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildBroadcastListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__ *container;
    std::vector< ns3::BuildBroadcastListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildBroadcastListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildBroadcastListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::UlDciListElement_s > *obj;
} Pystd__vector__lt___ns3__UlDciListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__UlDciListElement_s___gt__ *container;
    std::vector< ns3::UlDciListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__UlDciListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__UlDciListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__UlDciListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__UlDciListElement_s___gt__(PyObject *arg, std::vector< ns3::UlDciListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::PhichListElement_s > *obj;
} Pystd__vector__lt___ns3__PhichListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__PhichListElement_s___gt__ *container;
    std::vector< ns3::PhichListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__PhichListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__PhichListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__PhichListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__PhichListElement_s___gt__(PyObject *arg, std::vector< ns3::PhichListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::map< std::string, ns3::LogComponent * > *obj;
} Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__ *container;
    std::map< std::string, ns3::LogComponent * >::iterator *iterator;
} Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__Iter;


extern PyTypeObject Pystd__map__lt___std__string__ns3__LogComponent___star_____gt___Type;
extern PyTypeObject Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__ns3__LogComponent___star_____gt__(PyObject *arg, std::map< std::string, ns3::LogComponent * > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::SrbToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::SrbToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::SrbToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::DrbToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::DrbToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::DrbToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned char > *obj;
} Pystd__list__lt___unsigned_char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_char___gt__ *container;
    std::list< unsigned char >::iterator *iterator;
} Pystd__list__lt___unsigned_char___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_char___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_char___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_char___gt__(PyObject *arg, std::list< unsigned char > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::CellsToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::CellsToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::CellsToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::BlackCellsToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::BlackCellsToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::BlackCellsToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasObjectToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::MeasObjectToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasObjectToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::ReportConfigToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::ReportConfigToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::ReportConfigToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasIdToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::MeasIdToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasIdToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned int > *obj;
} Pystd__list__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_int___gt__ *container;
    std::list< unsigned int >::iterator *iterator;
} Pystd__list__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_int___gt__(PyObject *arg, std::list< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasResultScell > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt__ *container;
    std::list< ns3::LteRrcSap::MeasResultScell >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasResultScell___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasResultScell > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasResultBestNeighCell > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__ *container;
    std::list< ns3::LteRrcSap::MeasResultBestNeighCell >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasResultBestNeighCell > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasResultEutra > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__ *container;
    std::list< ns3::LteRrcSap::MeasResultEutra >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasResultEutra > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::SCellToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::SCellToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::SCellToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement > *obj;
} Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__ *container;
    std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement >::iterator *iterator;
} Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__(PyObject *arg, std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::HigherLayerSelected_s > *obj;
} Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__ *container;
    std::vector< ns3::HigherLayerSelected_s >::iterator *iterator;
} Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__HigherLayerSelected_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__HigherLayerSelected_s___gt__(PyObject *arg, std::vector< ns3::HigherLayerSelected_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::SiMessageListElement_s > *obj;
} Pystd__vector__lt___ns3__SiMessageListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__SiMessageListElement_s___gt__ *container;
    std::vector< ns3::SiMessageListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__SiMessageListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__SiMessageListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__SiMessageListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__SiMessageListElement_s___gt__(PyObject *arg, std::vector< ns3::SiMessageListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Tap > *obj;
} Pystd__vector__lt___ns3__Tap___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Tap___gt__ *container;
    std::vector< ns3::Tap >::iterator *iterator;
} Pystd__vector__lt___ns3__Tap___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Tap___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Tap___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Tap___gt__(PyObject *arg, std::vector< ns3::Tap > *container);

typedef struct {
    PyObject_HEAD
    std::vector< double > *obj;
} Pystd__vector__lt___double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___double___gt__ *container;
    std::vector< double >::iterator *iterator;
} Pystd__vector__lt___double___gt__Iter;


extern PyTypeObject Pystd__vector__lt___double___gt___Type;
extern PyTypeObject Pystd__vector__lt___double___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned short, ns3::HeMuUserInfo > *obj;
} Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__ *container;
    std::map< unsigned short, ns3::HeMuUserInfo >::iterator *iterator;
} Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_short__ns3__HeMuUserInfo___gt__(PyObject *arg, std::map< unsigned short, ns3::HeMuUserInfo > *container);

typedef struct {
    PyObject_HEAD
    std::vector< int > *obj;
} Pystd__vector__lt___int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___int___gt__ *container;
    std::vector< int >::iterator *iterator;
} Pystd__vector__lt___int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___int___gt___Type;
extern PyTypeObject Pystd__vector__lt___int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector< int > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::Packet > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::Packet > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::Packet > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ipv6Address > *obj;
} Pystd__vector__lt___ns3__Ipv6Address___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ipv6Address___gt__ *container;
    std::vector< ns3::Ipv6Address >::iterator *iterator;
} Pystd__vector__lt___ns3__Ipv6Address___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ipv6Address___gt__(PyObject *arg, std::vector< ns3::Ipv6Address > *container);

typedef struct {
    PyObject_HEAD
    ns3::Bands *obj;
} Pyns3__Bands;


typedef struct {
    PyObject_HEAD
    Pyns3__Bands *container;
    ns3::Bands::iterator *iterator;
} Pyns3__BandsIter;


extern PyTypeObject Pyns3__Bands_Type;
extern PyTypeObject Pyns3__BandsIter_Type;

int _wrap_convert_py2c__ns3__Bands(PyObject *arg, ns3::Bands *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::UanPacketArrival > *obj;
} Pystd__list__lt___ns3__UanPacketArrival___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__UanPacketArrival___gt__ *container;
    std::list< ns3::UanPacketArrival >::iterator *iterator;
} Pystd__list__lt___ns3__UanPacketArrival___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__UanPacketArrival___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__UanPacketArrival___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__UanPacketArrival___gt__(PyObject *arg, std::list< ns3::UanPacketArrival > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::UanPhy > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__UanPhy___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__UanPhy___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::UanPhy > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__UanPhy___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__UanPhy___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__UanPhy___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__UanPhy___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::UanPhy > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< bool > *obj;
} Pystd__vector__lt___bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___bool___gt__ *container;
    std::vector< bool >::iterator *iterator;
} Pystd__vector__lt___bool___gt__Iter;


extern PyTypeObject Pystd__vector__lt___bool___gt___Type;
extern PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, unsigned int > *obj;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__unsigned_int___gt__ *container;
    std::map< unsigned int, unsigned int >::iterator *iterator;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__unsigned_int___gt__(PyObject *arg, std::map< unsigned int, unsigned int > *container);

typedef struct {
    PyObject_HEAD
    ns3::HarqProcessInfoList_t *obj;
} Pyns3__HarqProcessInfoList_t;


typedef struct {
    PyObject_HEAD
    Pyns3__HarqProcessInfoList_t *container;
    ns3::HarqProcessInfoList_t::iterator *iterator;
} Pyns3__HarqProcessInfoList_tIter;


extern PyTypeObject Pyns3__HarqProcessInfoList_t_Type;
extern PyTypeObject Pyns3__HarqProcessInfoList_tIter_Type;

int _wrap_convert_py2c__ns3__HarqProcessInfoList_t(PyObject *arg, ns3::HarqProcessInfoList_t *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::LteControlMessage > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::LteControlMessage > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::LteControlMessage > > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::UlDciLteControlMessage > *obj;
} Pystd__list__lt___ns3__UlDciLteControlMessage___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__UlDciLteControlMessage___gt__ *container;
    std::list< ns3::UlDciLteControlMessage >::iterator *iterator;
} Pystd__list__lt___ns3__UlDciLteControlMessage___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__UlDciLteControlMessage___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__UlDciLteControlMessage___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__UlDciLteControlMessage___gt__(PyObject *arg, std::list< ns3::UlDciLteControlMessage > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > > *obj;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__ *container;
    std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__(PyObject *arg, std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierBaseStation > > *obj;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierBaseStation___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierBaseStation___gt_____gt__ *container;
    std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierBaseStation > >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierBaseStation___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierBaseStation___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierBaseStation___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierBaseStation___gt_____gt__(PyObject *arg, std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierBaseStation > > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Config::MatchContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConfigMatchContainer;


extern PyTypeObject *_PyNs3ConfigMatchContainer_Type;
#define PyNs3ConfigMatchContainer_Type (*_PyNs3ConfigMatchContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3ConfigMatchContainer_wrapper_registry;
#define PyNs3ConfigMatchContainer_wrapper_registry (*_PyNs3ConfigMatchContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::Object > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::Object > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::Object > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< std::string > *obj;
} Pystd__vector__lt___std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__string___gt__ *container;
    std::vector< std::string >::iterator *iterator;
} Pystd__vector__lt___std__string___gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__string___gt___Type;
extern PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject *_PyNs3HashImplementation_Type;
#define PyNs3HashImplementation_Type (*_PyNs3HashImplementation_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject *_PyNs3HashFunctionFnv1a_Type;
#define PyNs3HashFunctionFnv1a_Type (*_PyNs3HashFunctionFnv1a_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject *_PyNs3HashFunctionHash32_Type;
#define PyNs3HashFunctionHash32_Type (*_PyNs3HashFunctionHash32_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject *_PyNs3HashFunctionHash64_Type;
#define PyNs3HashFunctionHash64_Type (*_PyNs3HashFunctionHash64_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject *_PyNs3HashFunctionMurmur3_Type;
#define PyNs3HashFunctionMurmur3_Type (*_PyNs3HashFunctionMurmur3_Type)


class PythonCallbackImpl0 : public ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    ns3::ObjectBase *
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        ns3::ObjectBase *retval;
        PyObject *args;
        PyNs3ObjectBase *tmp_ObjectBase;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return NULL;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ObjectBase_Type, &tmp_ObjectBase)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return NULL;
        }
        // dangerous!
        retval = tmp_ObjectBase->obj;
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;

            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;

            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;

            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        args = Py_BuildValue((char *) "(N)", py_NetDevice);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::MobilityModel const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MobilityModel *py_MobilityModel;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_MobilityModel);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel = NULL;
            } else {
                py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
                Py_INCREF(py_MobilityModel);
            }

            if (py_MobilityModel == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))), &PyNs3MobilityModel_Type);
                py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
                py_MobilityModel->inst_dict = NULL;

                py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))->Ref();
                py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_MobilityModel);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::SpectrumPhy const > arg1, ns3::Ptr< ns3::SpectrumPhy const > arg2, double arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumPhy *py_SpectrumPhy;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3SpectrumPhy *py_SpectrumPhy2;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_SpectrumPhy = NULL;
        } else {
            py_SpectrumPhy = (PyNs3SpectrumPhy *) wrapper_lookup_iter->second;
            Py_INCREF(py_SpectrumPhy);
        }

        if (py_SpectrumPhy == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1))), &PyNs3SpectrumPhy_Type);
            py_SpectrumPhy = PyObject_GC_New(PyNs3SpectrumPhy, wrapper_type);
            py_SpectrumPhy->inst_dict = NULL;

            py_SpectrumPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1))->Ref();
            py_SpectrumPhy->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_SpectrumPhy->obj] = (PyObject *) py_SpectrumPhy;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_SpectrumPhy2 = NULL;
        } else {
            py_SpectrumPhy2 = (PyNs3SpectrumPhy *) wrapper_lookup_iter2->second;
            Py_INCREF(py_SpectrumPhy2);
        }

        if (py_SpectrumPhy2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2))), &PyNs3SpectrumPhy_Type);
            py_SpectrumPhy2 = PyObject_GC_New(PyNs3SpectrumPhy, wrapper_type2);
            py_SpectrumPhy2->inst_dict = NULL;

            py_SpectrumPhy2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2))->Ref();
            py_SpectrumPhy2->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2));
            PyNs3ObjectBase_wrapper_registry[(void *) py_SpectrumPhy2->obj] = (PyObject *) py_SpectrumPhy2;
        }
        args = Py_BuildValue((char *) "(NNd)", py_SpectrumPhy, py_SpectrumPhy2, arg3);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::MobilityModel const > arg1, ns3::Ptr< ns3::MobilityModel const > arg2, double arg3, double arg4, double arg5, double arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MobilityModel *py_MobilityModel;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3MobilityModel *py_MobilityModel2;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_MobilityModel);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel = NULL;
            } else {
                py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
                Py_INCREF(py_MobilityModel);
            }

            if (py_MobilityModel == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))), &PyNs3MobilityModel_Type);
                py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
                py_MobilityModel->inst_dict = NULL;

                py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))->Ref();
                py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
            }
        }
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)))->m_pyself);
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2));
            Py_INCREF(py_MobilityModel2);
        } else {
            wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)));
            if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel2 = NULL;
            } else {
                py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
                Py_INCREF(py_MobilityModel2);
            }

            if (py_MobilityModel2 == NULL)
            {
                wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2))), &PyNs3MobilityModel_Type);
                py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
                py_MobilityModel2->inst_dict = NULL;

                py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2))->Ref();
                py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
            }
        }
        args = Py_BuildValue((char *) "(NNdddd)", py_MobilityModel, py_MobilityModel2, arg3, arg4, arg5, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl8 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl8(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl8()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl8 *other = dynamic_cast<const PythonCallbackImpl8*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::SpectrumSignalParameters > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumSignalParameters *py_SpectrumSignalParameters;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_SpectrumSignalParameters = NULL;
        } else {
            py_SpectrumSignalParameters = (PyNs3SpectrumSignalParameters *) wrapper_lookup_iter->second;
            Py_INCREF(py_SpectrumSignalParameters);
        }

        if (py_SpectrumSignalParameters == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1))), &PyNs3SpectrumSignalParameters_Type);
            py_SpectrumSignalParameters = PyObject_New(PyNs3SpectrumSignalParameters, wrapper_type);

            py_SpectrumSignalParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1))->Ref();
            py_SpectrumSignalParameters->obj = const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_SpectrumSignalParameters->obj] = (PyObject *) py_SpectrumSignalParameters;
        }
        args = Py_BuildValue((char *) "(N)", py_SpectrumSignalParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl9 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl9(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl9()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl9 *other = dynamic_cast<const PythonCallbackImpl9*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl10 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl10(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl10()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl10 *other = dynamic_cast<const PythonCallbackImpl10*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl12 : public ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl12(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl12()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl12 *other = dynamic_cast<const PythonCallbackImpl12*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, ns3::Ptr< ns3::SpectrumValue > arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumValue *py_SpectrumValue;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_SpectrumValue = NULL;
        } else {
            py_SpectrumValue = (PyNs3SpectrumValue *) wrapper_lookup_iter->second;
            Py_INCREF(py_SpectrumValue);
        }

        if (py_SpectrumValue == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2))), &PyNs3SpectrumValue_Type);
            py_SpectrumValue = PyObject_New(PyNs3SpectrumValue, wrapper_type);

            py_SpectrumValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2))->Ref();
            py_SpectrumValue->obj = const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_SpectrumValue->obj] = (PyObject *) py_SpectrumValue;
        }
        args = Py_BuildValue((char *) "(iN)", (int) arg1, py_SpectrumValue);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl13 : public ns3::CallbackImpl<void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl13(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl13()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl13 *other = dynamic_cast<const PythonCallbackImpl13*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::DlInfoListElement_s arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3DlInfoListElement_s *py_DlInfoListElement_s;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_DlInfoListElement_s = PyObject_New(PyNs3DlInfoListElement_s, &PyNs3DlInfoListElement_s_Type);
        py_DlInfoListElement_s->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_DlInfoListElement_s->obj = new ns3::DlInfoListElement_s(arg1);
        PyNs3DlInfoListElement_s_wrapper_registry[(void *) py_DlInfoListElement_s->obj] = (PyObject *) py_DlInfoListElement_s;
        args = Py_BuildValue((char *) "(N)", py_DlInfoListElement_s);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl14 : public ns3::CallbackImpl<void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl14(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl14()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl14 *other = dynamic_cast<const PythonCallbackImpl14*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::UlInfoListElement_s arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3UlInfoListElement_s *py_UlInfoListElement_s;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_UlInfoListElement_s = PyObject_New(PyNs3UlInfoListElement_s, &PyNs3UlInfoListElement_s_Type);
        py_UlInfoListElement_s->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_UlInfoListElement_s->obj = new ns3::UlInfoListElement_s(arg1);
        PyNs3UlInfoListElement_s_wrapper_registry[(void *) py_UlInfoListElement_s->obj] = (PyObject *) py_UlInfoListElement_s;
        args = Py_BuildValue((char *) "(N)", py_UlInfoListElement_s);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl15 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl15(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl15()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl15 *other = dynamic_cast<const PythonCallbackImpl15*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::PacketBurst const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3PacketBurst *py_PacketBurst;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3PacketBurst__PythonHelper).name())
        {
            py_PacketBurst = (PyNs3PacketBurst*) (((PyNs3PacketBurst__PythonHelper*) const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_PacketBurst);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_PacketBurst = NULL;
            } else {
                py_PacketBurst = (PyNs3PacketBurst *) wrapper_lookup_iter->second;
                Py_INCREF(py_PacketBurst);
            }

            if (py_PacketBurst == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1))), &PyNs3PacketBurst_Type);
                py_PacketBurst = PyObject_GC_New(PyNs3PacketBurst, wrapper_type);
                py_PacketBurst->inst_dict = NULL;

                py_PacketBurst->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1))->Ref();
                py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_PacketBurst->obj] = (PyObject *) py_PacketBurst;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_PacketBurst);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl16 : public ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl16(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl16()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl16 *other = dynamic_cast<const PythonCallbackImpl16*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::PhyReceptionStatParameters arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3PhyReceptionStatParameters *py_PhyReceptionStatParameters;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_PhyReceptionStatParameters = PyObject_New(PyNs3PhyReceptionStatParameters, &PyNs3PhyReceptionStatParameters_Type);
        py_PhyReceptionStatParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_PhyReceptionStatParameters->obj = new ns3::PhyReceptionStatParameters(arg1);
        PyNs3PhyReceptionStatParameters_wrapper_registry[(void *) py_PhyReceptionStatParameters->obj] = (PyObject *) py_PhyReceptionStatParameters;
        args = Py_BuildValue((char *) "(N)", py_PhyReceptionStatParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl17 : public ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl17(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl17()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl17 *other = dynamic_cast<const PythonCallbackImpl17*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, double arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iid)", (int) arg1, (int) arg2, arg3);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl18 : public ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl18(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl18()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl18 *other = dynamic_cast<const PythonCallbackImpl18*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, ns3::LteUePhy::State arg3, ns3::LteUePhy::State arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiii)", (int) arg1, (int) arg2, arg3, arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl19 : public ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl19(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl19()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl19 *other = dynamic_cast<const PythonCallbackImpl19*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, double arg3, double arg4, unsigned char arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiddi)", (int) arg1, (int) arg2, arg3, arg4, (int) arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl20 : public ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl20(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl20()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl20 *other = dynamic_cast<const PythonCallbackImpl20*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, double arg3, double arg4, bool arg5, unsigned char arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiddNi)", (int) arg1, (int) arg2, arg3, arg4, PyBool_FromLong(arg5), (int) arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl21 : public ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl21(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl21()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl21 *other = dynamic_cast<const PythonCallbackImpl21*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::PhyTransmissionStatParameters arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3PhyTransmissionStatParameters *py_PhyTransmissionStatParameters;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_PhyTransmissionStatParameters = PyObject_New(PyNs3PhyTransmissionStatParameters, &PyNs3PhyTransmissionStatParameters_Type);
        py_PhyTransmissionStatParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_PhyTransmissionStatParameters->obj = new ns3::PhyTransmissionStatParameters(arg1);
        PyNs3PhyTransmissionStatParameters_wrapper_registry[(void *) py_PhyTransmissionStatParameters->obj] = (PyObject *) py_PhyTransmissionStatParameters;
        args = Py_BuildValue((char *) "(N)", py_PhyTransmissionStatParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl23 : public ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl23(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl23()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl23 *other = dynamic_cast<const PythonCallbackImpl23*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, double arg3, unsigned char arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iidi)", (int) arg1, (int) arg2, arg3, (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl24 : public ns3::CallbackImpl<void, int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl24(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl24()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl24 *other = dynamic_cast<const PythonCallbackImpl24*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(int arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(i)", arg1);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl25 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, double, ns3::UanTxMode, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl25(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl25()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl25 *other = dynamic_cast<const PythonCallbackImpl25*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, double arg2, ns3::UanTxMode arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3UanTxMode *py_UanTxMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
        py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_UanTxMode->obj = new ns3::UanTxMode(arg3);
        PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
        args = Py_BuildValue((char *) "(NdN)", py_Packet, arg2, py_UanTxMode);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl26 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl26(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl26()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl26 *other = dynamic_cast<const PythonCallbackImpl26*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, double arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(Nd)", py_Packet, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl27 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, double, ns3::UanTxMode, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl27(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl27()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl27 *other = dynamic_cast<const PythonCallbackImpl27*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, double arg2, ns3::UanTxMode arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3UanTxMode *py_UanTxMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
        py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_UanTxMode->obj = new ns3::UanTxMode(arg3);
        PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
        args = Py_BuildValue((char *) "(NdN)", py_Packet, arg2, py_UanTxMode);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl31 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, double, ns3::WifiMode, ns3::WifiPreamble, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl31(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl31()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl31 *other = dynamic_cast<const PythonCallbackImpl31*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, double arg2, ns3::WifiMode arg3, ns3::WifiPreamble arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiMode *py_WifiMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
        py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMode->obj = new ns3::WifiMode(arg3);
        PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
        args = Py_BuildValue((char *) "(NdNi)", py_Packet, arg2, py_WifiMode, arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl32 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl32(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl32()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl32 *other = dynamic_cast<const PythonCallbackImpl32*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, double arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(Nd)", py_Packet, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl33 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::WifiMode, ns3::WifiPreamble, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl33(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl33()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl33 *other = dynamic_cast<const PythonCallbackImpl33*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::WifiMode arg2, ns3::WifiPreamble arg3, unsigned char arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiMode *py_WifiMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
        py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMode->obj = new ns3::WifiMode(arg2);
        PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
        args = Py_BuildValue((char *) "(NNii)", py_Packet, py_WifiMode, arg3, (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl36 : public ns3::CallbackImpl<void, ns3::WifiTxVector, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl36(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl36()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl36 *other = dynamic_cast<const PythonCallbackImpl36*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::WifiTxVector arg1, ns3::Time arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3Time *py_Time;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg1);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg2);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        args = Py_BuildValue((char *) "(NN)", py_WifiTxVector, py_Time);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl37 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::WifiPhyRxfailureReason, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl37(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl37()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl37 *other = dynamic_cast<const PythonCallbackImpl37*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::WifiPhyRxfailureReason arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(Ni)", py_Packet, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl38 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, ns3::SignalNoiseDbm, unsigned short, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl38(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl38()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl38 *other = dynamic_cast<const PythonCallbackImpl38*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, unsigned short arg2, ns3::WifiTxVector arg3, ns3::MpduInfo arg4, ns3::SignalNoiseDbm arg5, unsigned short arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3MpduInfo *py_MpduInfo;
        PyNs3SignalNoiseDbm *py_SignalNoiseDbm;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg3);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_MpduInfo = PyObject_New(PyNs3MpduInfo, &PyNs3MpduInfo_Type);
        py_MpduInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_MpduInfo->obj = new ns3::MpduInfo(arg4);
        PyNs3MpduInfo_wrapper_registry[(void *) py_MpduInfo->obj] = (PyObject *) py_MpduInfo;
        py_SignalNoiseDbm = PyObject_New(PyNs3SignalNoiseDbm, &PyNs3SignalNoiseDbm_Type);
        py_SignalNoiseDbm->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_SignalNoiseDbm->obj = new ns3::SignalNoiseDbm(arg5);
        PyNs3SignalNoiseDbm_wrapper_registry[(void *) py_SignalNoiseDbm->obj] = (PyObject *) py_SignalNoiseDbm;
        args = Py_BuildValue((char *) "(NiNNNi)", py_Packet, (int) arg2, py_WifiTxVector, py_MpduInfo, py_SignalNoiseDbm, (int) arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl39 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, unsigned short, ns3::WifiTxVector, ns3::MpduInfo, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl39(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl39()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl39 *other = dynamic_cast<const PythonCallbackImpl39*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, unsigned short arg2, ns3::WifiTxVector arg3, ns3::MpduInfo arg4, unsigned short arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiTxVector *py_WifiTxVector;
        PyNs3MpduInfo *py_MpduInfo;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_WifiTxVector = PyObject_New(PyNs3WifiTxVector, &PyNs3WifiTxVector_Type);
        py_WifiTxVector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiTxVector->obj = new ns3::WifiTxVector(arg3);
        PyNs3WifiTxVector_wrapper_registry[(void *) py_WifiTxVector->obj] = (PyObject *) py_WifiTxVector;
        py_MpduInfo = PyObject_New(PyNs3MpduInfo, &PyNs3MpduInfo_Type);
        py_MpduInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_MpduInfo->obj = new ns3::MpduInfo(arg4);
        PyNs3MpduInfo_wrapper_registry[(void *) py_MpduInfo->obj] = (PyObject *) py_MpduInfo;
        args = Py_BuildValue((char *) "(NiNNi)", py_Packet, (int) arg2, py_WifiTxVector, py_MpduInfo, (int) arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl40 : public ns3::CallbackImpl<void, ns3::HePreambleParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl40(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl40()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl40 *other = dynamic_cast<const PythonCallbackImpl40*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::HePreambleParameters arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3HePreambleParameters *py_HePreambleParameters;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_HePreambleParameters = PyObject_New(PyNs3HePreambleParameters, &PyNs3HePreambleParameters_Type);
        py_HePreambleParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_HePreambleParameters->obj = new ns3::HePreambleParameters(arg1);
        PyNs3HePreambleParameters_wrapper_registry[(void *) py_HePreambleParameters->obj] = (PyObject *) py_HePreambleParameters;
        args = Py_BuildValue((char *) "(N)", py_HePreambleParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl41 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl41(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl41()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl41 *other = dynamic_cast<const PythonCallbackImpl41*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_Socket);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl42 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl42(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl42()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl42 *other = dynamic_cast<const PythonCallbackImpl42*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl43 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl43(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl43()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl43 *other = dynamic_cast<const PythonCallbackImpl43*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl44 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl44(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl44()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl44 *other = dynamic_cast<const PythonCallbackImpl44*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(NN)", py_Socket, PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl45 : public ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl45(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl45()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl45 *other = dynamic_cast<const PythonCallbackImpl45*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv4Header const & arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned int arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv4Header *py_Ipv4Header;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Header->obj = new ns3::Ipv4Header(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(NNN)", py_Ipv4Header, py_Packet, PyLong_FromUnsignedLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl46 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl46(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl46()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl46 *other = dynamic_cast<const PythonCallbackImpl46*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Ptr< ns3::Ipv4 > arg2, unsigned int arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv4 *py_Ipv4;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Ipv4 = NULL;
        } else {
            py_Ipv4 = (PyNs3Ipv4 *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Ipv4);
        }

        if (py_Ipv4 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg2))), &PyNs3Ipv4_Type);
            py_Ipv4 = PyObject_GC_New(PyNs3Ipv4, wrapper_type2);
            py_Ipv4->inst_dict = NULL;

            py_Ipv4->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg2))->Ref();
            py_Ipv4->obj = const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg2));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4->obj] = (PyObject *) py_Ipv4;
        }
        args = Py_BuildValue((char *) "(NNN)", py_Packet, py_Ipv4, PyLong_FromUnsignedLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl47 : public ns3::CallbackImpl<void, const ns3::Ipv4Header &, ns3::Ptr<const ns3::Packet>, ns3::Ipv4L3Protocol::DropReason, ns3::Ptr<ns3::Ipv4>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl47(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl47()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl47 *other = dynamic_cast<const PythonCallbackImpl47*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv4Header const & arg1, ns3::Ptr< ns3::Packet const > arg2, ns3::Ipv4L3Protocol::DropReason arg3, ns3::Ptr< ns3::Ipv4 > arg4, unsigned int arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv4Header *py_Ipv4Header;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv4 *py_Ipv4;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Header->obj = new ns3::Ipv4Header(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg4)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Ipv4 = NULL;
        } else {
            py_Ipv4 = (PyNs3Ipv4 *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Ipv4);
        }

        if (py_Ipv4 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg4))), &PyNs3Ipv4_Type);
            py_Ipv4 = PyObject_GC_New(PyNs3Ipv4, wrapper_type2);
            py_Ipv4->inst_dict = NULL;

            py_Ipv4->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg4))->Ref();
            py_Ipv4->obj = const_cast<ns3::Ipv4 *> (ns3::PeekPointer (arg4));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4->obj] = (PyObject *) py_Ipv4;
        }
        args = Py_BuildValue((char *) "(NNiNN)", py_Ipv4Header, py_Packet, arg3, py_Ipv4, PyLong_FromUnsignedLong(arg5));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Object___gt__(PyObject *value, ns3::Ptr< ns3::Object > *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__ns3__CeBitmap_e(PyObject *value, ns3::CeBitmap_e *address);


int _wrap_convert_py2c__unsigned_char(PyObject *value, unsigned char *address);


int _wrap_convert_py2c__short_unsigned_int(PyObject *value, short unsigned int *address);


int _wrap_convert_py2c__ns3__DlInfoListElement_s__HarqStatus_e(PyObject *value, ns3::DlInfoListElement_s::HarqStatus_e *address);


int _wrap_convert_py2c__ns3__VendorSpecificListElement_s(PyObject *value, ns3::VendorSpecificListElement_s *address);


int _wrap_convert_py2c__ns3__PagingInfoListElement_s(PyObject *value, ns3::PagingInfoListElement_s *address);


int _wrap_convert_py2c__ns3__DlInfoListElement_s(PyObject *value, ns3::DlInfoListElement_s *address);


int _wrap_convert_py2c__ns3__RachListElement_s(PyObject *value, ns3::RachListElement_s *address);


int _wrap_convert_py2c__ns3__CqiListElement_s(PyObject *value, ns3::CqiListElement_s *address);


int _wrap_convert_py2c__ns3__UlInfoListElement_s(PyObject *value, ns3::UlInfoListElement_s *address);


int _wrap_convert_py2c__ns3__SrListElement_s(PyObject *value, ns3::SrListElement_s *address);


int _wrap_convert_py2c__ns3__MacCeListElement_s(PyObject *value, ns3::MacCeListElement_s *address);


int _wrap_convert_py2c__ns3__BuildDataListElement_s(PyObject *value, ns3::BuildDataListElement_s *address);


int _wrap_convert_py2c__ns3__BuildRarListElement_s(PyObject *value, ns3::BuildRarListElement_s *address);


int _wrap_convert_py2c__ns3__BuildBroadcastListElement_s(PyObject *value, ns3::BuildBroadcastListElement_s *address);


int _wrap_convert_py2c__ns3__UlDciListElement_s(PyObject *value, ns3::UlDciListElement_s *address);


int _wrap_convert_py2c__ns3__PhichListElement_s(PyObject *value, ns3::PhichListElement_s *address);


int _wrap_convert_py2c__ns3__LogComponent___star__(PyObject *value, ns3::LogComponent * *address);


int _wrap_convert_py2c__ns3__LteRrcSap__SrbToAddMod(PyObject *value, ns3::LteRrcSap::SrbToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__DrbToAddMod(PyObject *value, ns3::LteRrcSap::DrbToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__CellsToAddMod(PyObject *value, ns3::LteRrcSap::CellsToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__BlackCellsToAddMod(PyObject *value, ns3::LteRrcSap::BlackCellsToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasObjectToAddMod(PyObject *value, ns3::LteRrcSap::MeasObjectToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__ReportConfigToAddMod(PyObject *value, ns3::LteRrcSap::ReportConfigToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasIdToAddMod(PyObject *value, ns3::LteRrcSap::MeasIdToAddMod *address);


int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasResultScell(PyObject *value, ns3::LteRrcSap::MeasResultScell *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasResultBestNeighCell(PyObject *value, ns3::LteRrcSap::MeasResultBestNeighCell *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasResultEutra(PyObject *value, ns3::LteRrcSap::MeasResultEutra *address);


int _wrap_convert_py2c__ns3__LteRrcSap__SCellToAddMod(PyObject *value, ns3::LteRrcSap::SCellToAddMod *address);


int _wrap_convert_py2c__ns3__LteUeCphySapUser__UeMeasurementsElement(PyObject *value, ns3::LteUeCphySapUser::UeMeasurementsElement *address);


int _wrap_convert_py2c__ns3__HigherLayerSelected_s(PyObject *value, ns3::HigherLayerSelected_s *address);


int _wrap_convert_py2c__ns3__SiMessageListElement_s(PyObject *value, ns3::SiMessageListElement_s *address);


int _wrap_convert_py2c__ns3__Tap(PyObject *value, ns3::Tap *address);


int _wrap_convert_py2c__double(PyObject *value, double *address);


int _wrap_convert_py2c__ns3__HeMuUserInfo(PyObject *value, ns3::HeMuUserInfo *address);


int _wrap_convert_py2c__int(PyObject *value, int *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Packet___gt__(PyObject *value, ns3::Ptr< ns3::Packet > *address);


int _wrap_convert_py2c__ns3__Ipv6Address(PyObject *value, ns3::Ipv6Address *address);


int _wrap_convert_py2c__ns3__BandInfo(PyObject *value, ns3::BandInfo *address);


int _wrap_convert_py2c__ns3__UanPacketArrival(PyObject *value, ns3::UanPacketArrival *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__UanPhy___gt__(PyObject *value, ns3::Ptr< ns3::UanPhy > *address);


int _wrap_convert_py2c__bool(PyObject *value, bool *address);


int _wrap_convert_py2c__ns3__HarqProcessInfoElement_t(PyObject *value, ns3::HarqProcessInfoElement_t *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__LteControlMessage___gt__(PyObject *value, ns3::Ptr< ns3::LteControlMessage > *address);


int _wrap_convert_py2c__ns3__UlDciLteControlMessage(PyObject *value, ns3::UlDciLteControlMessage *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt__(PyObject *value, ns3::Ptr< ns3::ComponentCarrierUe > *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__ComponentCarrierBaseStation___gt__(PyObject *value, ns3::Ptr< ns3::ComponentCarrierBaseStation > *address);

